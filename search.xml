<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CF worker 使用</title>
      <link href="/tutorial/cf-worker/"/>
      <url>/tutorial/cf-worker/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2198b39aa584f95871e1ad528e1ab2622389cf0e51e7007a93c1800b8a14f3be"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile 简化运维操作</title>
      <link href="/tutorial/Makefile-with-ops/"/>
      <url>/tutorial/Makefile-with-ops/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在项目测试时，由于需要在不同场景下切换，导致有多个 <code>docker-compose.yml</code> 存在，而每次启动&#x2F;停止都得用 <code>-f</code> 指定目标文件，这样操作太过繁琐，就想利用 <code>Makefile</code> 简化操作，实现 <code>make aaa start</code>，实现 <code>aaa</code> 的 启动，<code>make bbb stop</code> 实现 <code>bbb</code> 的停止这样的效果</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>调研了下，可以通过 <code>Makefile</code> 中的模块处理实现，具体如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量来存储模块名称</span></span><br><span class="line">MODULE := <span class="variable">$(<span class="built_in">firstword</span> <span class="variable">$(MAKECMDGOALS)</span>)</span></span><br><span class="line"><span class="comment"># 动态创建目标</span></span><br><span class="line"><span class="variable">$(<span class="built_in">eval</span> <span class="variable">$(MODULE)</span>:;@:)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用规则来处理模块和目标</span></span><br><span class="line"><span class="keyword">define</span> MODULE_RULE</span><br><span class="line"><span class="section">$(1)-start:</span></span><br><span class="line">    @echo <span class="string">&quot;Executing $(1) start&quot;</span></span><br><span class="line"><span class="keyword">ifeq</span> ($(1),aaa)</span><br><span class="line">    docker compose -f docker-compose-aaa.yml up -d</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> ($(1),bbb)</span><br><span class="line">    docker compose -f docker-compose-bbb.yml up -d</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> ($(1),ccc)</span><br><span class="line">    docker compose -f docker-compose-ccc.yml up -d</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="section">$(1)-stop:</span></span><br><span class="line">    @echo <span class="string">&quot;Executing $(1) stop&quot;</span></span><br><span class="line"><span class="keyword">ifeq</span> ($(1),aaa)</span><br><span class="line">    docker compose -f docker-compose-aaa.yml down</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> ($(1),bbb)</span><br><span class="line">    docker compose -f docker-compose-bbb.yml down</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> ($(1),ccc)</span><br><span class="line">    docker compose -f docker-compose-ccc.yml down</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模块列表</span></span><br><span class="line">MODULES := aaa bbb ccc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每个模块生成规则</span></span><br><span class="line"><span class="variable">$(<span class="built_in">foreach</span> module,<span class="variable">$(MODULES)</span>,$(<span class="built_in">eval</span> $(<span class="built_in">call</span> MODULE_RULE,<span class="variable">$(module)</span>)</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模式规则来捕获模块名称和目标</span></span><br><span class="line"><span class="section">%: <span class="variable">$(MODULE)</span>-%</span></span><br><span class="line">    @<span class="variable">$(MAKE)</span> <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>在这个 Makefile 中：</p><ul><li><code>MODULE</code> 变量存储了模块名称<ul><li><code>$(MAKECMDGOALS)</code>：这是一个内置变量，它包含了在命令行中传递给 <code>make</code> 的目标（targets）。例如，如果在命令行中执行 <code>make clean all</code>，那么 <code>$(MAKECMDGOALS)</code> 的值就是 <code>clean all</code></li><li><code>$(firstword ...)</code>：这是一个函数，用于从给定的参数中提取第一个单词。它会返回传入参数中的第一个字符串</li></ul></li><li><code>$(eval $(MODULE):;@:)</code><ul><li>使用 <code>eval</code> 动态创建一个名为 <code>MODULE</code> 值的目标（例如 <code>aaa</code>），并且该目标没有实际的命令。这样做是为了在 Makefile 中确保该目标存在，但不执行任何操作</li><li><code>;</code> 表示命令结束，但这里没有实际命令要执行，因此后面没有跟随任何有效命令</li><li><code>@</code> 表示在执行该命令时不打印命令本身</li><li><code>:</code> 是一个伪命令，表示什么也不做</li></ul></li><li><code>MODULE_RULE</code> <ul><li>定义了一个通用规则模板，用于生成每个模块的目标</li><li><code>$(1)</code> 是模板中的占位符，它会在后续调用中被具体的模块名替换</li><li>使用 <code>ifeq</code> 条件语句来根据模块的不同，执行相应的 Docker Compose 命令</li></ul></li><li><code>MODULES</code> 列表包含所有模块名称</li><li><code>$(foreach module,$(MODULES),$(eval $(call MODULE_RULE,$(module))))</code> <ul><li><code>foreach</code> 函数会遍历 <code>MODULES</code> 中的每个模块名，调用 <code>MODULE_RULE</code> 模板并生成相应的规则</li><li>结果是为每个模块生成 <code>aaa-start</code>、<code>aaa-stop</code>、<code>bbb-start</code>、<code>bbb-stop</code>、<code>ccc-start</code> 和 <code>ccc-stop</code> 等规则</li></ul></li><li><code>%: $(MODULE)-%</code> <ul><li>这是一个模式规则，表示任何目标（<code>%</code>）都会依赖于相应的 <code>MODULE</code> 名称和后缀（例如，<code>aaa-start</code> 或 <code>aaa-stop</code>）</li><li>当调用 <code>make aaa-start</code> 时，Make 会寻找 <code>aaa-start</code> 目标，并执行它</li></ul></li><li><code>@$(MAKE) $@</code><ul><li><code>@</code>：表示在执行该命令时不打印命令本身。这对于保持输出整洁很有用。</li><li><code>$(MAKE)</code>：这是一个特殊变量，表示当前的 Make 命令。使用 <code>$(MAKE)</code> 可以确保在调用 Make 时使用相同的参数和环境。</li><li><code>$@</code>：这是一个自动变量，表示规则中的目标名。在这个上下文中，<code>$@</code> 将被替换为当前目标的名称</li></ul></li></ul><p>这样，当你运行 make aaa start、make bbb start、make ccc start 等命令时，它们会执行相应的 Docker Compose 命令</p><p><font color="red">注意：</font><code>Makefile</code> 中需要使用 tab，而非 空格 作为缩进，否则执行时，会报错类似 <code>Makefile:28: *** missing separator. Stop</code>，<code>vim</code>  可以用 <code>:set list</code> 命令显示空格和制表符，制表符会显示为 <code>^I</code>，如果不是制表符，可以使用 <code>:%s/^\s\+/\t/g</code> 进行替换</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Div 迷你主机</title>
      <link href="/tutorial/div-miniserver/"/>
      <url>/tutorial/div-miniserver/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="be08eb7937b846b1202d3bd50ba029fe18f62300d132874a88e063d52d5304eb">ec3afd5a5ab7d2bf73c7cebb244d392e7494fdcb450216205665b7b217ee5066769fed21f6f754540dc2a9fb20f1641d98637d1aaa0473fa4eb5d6900da48fd972b7f7b30b202046807b88cce338add2bee971353eb7219e6c355999b1c8ed30c9154a17791f8e744ed52af95a05d5ef09d050626fee468cb06ab2f26ee4ac5fb0653bf9342d11e5ec0813e23e73a49ac2e534339b2cfff4043903c68ade4a17044f2510b33c4efa4de33d2b9aa2edb12933f0a5d478fe4fd495230ab7d2434e65e9e3cd357e596b78a89ad14b71f2b929a39dcbff7bc7776a4027f58edf56866a2fd6be9f26dd030298b7de7f1a8918a177dfe777cfecfc50d72eaf4a6c9fc2218cf2eee5abcac7243b0af8583d727675b4138598e193144712831a8fc1633f093fa41d066b863c85395685d5ae17698cbc681251c3d269d44c47bc88cd21bf9597d701c38820bdff724a8878b47aba01d829df29f0b99751b9710c8189bbeab57103bf51b7eaf296eea307fe115756b0dd1791fa75657e929777852592519c18811d18aa5b1854984dedf3847cdff40f98d94fa8434a1bc6106a530abc94f6718b43d555a4827e9290c0ab362f5d1a2e4741421672f8e4ef046c6c4c5827074f64dff4b98811d6bb6bd3eb524cc9b8d64c0c5c6eed615d311f352c3e7e9c98c849b9cfa8d02a85a29fc3f462171f1b6de15ce626977468744a31a7ac1627a8f76cfe3ad29cd96501873adc4a254bd8a51b51a802a9008cef744697e594ac8f7f2f9988c12c835ad000e014201fd263056787e3f32359a20abd8198f5efed4bf846c204a2a7fbe5ded8a88fc235e9ee3b40e287cc5c485f3474e9321c0627143e3e9f70d5f8be90195e7474540d6666f262271913f938a7e565ffad3ab1bfdda0bb7cff2e4f6ac3791381bbaa14dc225da37373d08c8444a6722b43784dbd029d4899867bad6b212ceed5c5774a4b5541d3f885263963eb72af7ce6ca7c07be4a96557304e1da323409bfe9798354ef5450a5e34ae3e7d747fc9d1fd317c5bff0873c19b9ed1d534a76823944557ee65e7e8e315c153c7833a545209d4ac52abadd34d1a80dbb345294099bba8bafd9b6f5db8f4ab9ec146308904a28963ce3d1cf48a5586c450500b23b58eb3ff33b84963bcb6f925d016182d9dae17771340daade88d6c39444a396bc4db5afdf9648436cc369d16f22bf19da1023aa39a19b8696b82dd1d41b5fd01272ac6ecb0b873c0728867ea93e4a37c53470a5e0226a2fdf1ece7b57b341abd73c2c6d2d22fd00d179e5cd8a5ede1a229e58e4192d5cd6aecd467ef43f693707dafe9dee30b7191e6081e2a0b974f3126e5a962610921325bf86e252a29911829fb2cc66a57b38f4160f7328f34a42ae65250241404dd8bfec29eb7d813a1766cdb436e984d4b2c705eddc7d517257a17c43da3a95ed2623a789467e0aed9deea236fa40e186de609aa3bb254003c2aabf104bce26b8bf932969a3ee3290d059704c838b767344e729677efaa065d5408eeac74152b405e91d86b34368f517e35dc8adfbc8c28f0f25dea9d93d52aa92dbaffb7ef36cb861f5d4da6710dd8d9081f803f6a7657176df26b84808d7b649c4ea9841691c4694beb4a1ed34e9ee37aa2c13ab4bb9eeabb139de5a21d370a7eb048be2200d281bd46928d0e908dad3cf3dbd7bbfe4c7ecbe5db37bf9675c9c61751916dc8a62c47e7d4c3d22c6a14d2816e3b18805a5c632e0b491bd8b991a80a6e7aa8ddb73519827e454288f5e4db1e3edfab87bd5f88930f3108fae3dd330de8341b6a45d1f56dd6e98779a3049d1e36e971deda8ec44dfb17a1792c622769f1570e285e698b7c4bd12b0ef97707ec91bff65f9916b3f07d79e5a93d81db6ed02151b8879866342e0c736569b3ed0f6a85f8f017a0ed29873f9176779b5ba665b379b58b25e4f6cd30f17434668c36a219a111d92b44e7fc6eb0a806a9871666a7e4743caccae216ee8939707c97aa4d436b308489d2e98e58bc8a824f0f47d7803db7e4d1e15f44ff180b831a5c03f2644ebfb0e883fe075ed5e6860e9c2de8b9eafb62eb9e51ab6ee6fedffe35e8ec595e3429369ed7e99034354ad013fa10f435d8e4e07ea3755b3416af13031b77520a63b79b2eebe4ae8c39a61081095f3647d283136248060d2167bbae469411fa8668eb9c58d555314c28c879fb6a16c69bea78b4143bd940468316ebfb114529f1ab2caa6310081f7776dbe988ba632be2310af6108072f9f5469c0eed07e58eeea1fa28c16996e9029ae0db245a88269454cb95a6416805a15932a54310cda6b2600e5fce97782691d6608603b4114997778378a8fe3e1fa709c5412b15a89b86d7296d4607cb7f3411c45606358a7f92d6ddb8b2ed9a852e79c6ad2574809c0417f263641dafddab67dd628f8742e8dbf26eb880c6258f440a201629f9b5a729cb4828a783f383946df0c253fc1753a13018d782b3155a4720b90a5ad521ec102f51dd89811146cb011fd0eb2f4a02207fdcfae8744961d670fb3ac566721da492813bfc25614839fac32fa545ada032f1a809aeed939f791d85528ecf364af0af356671060ff38b2935e2d48d3c0635190fae3a5d98de4d073898b5d4d51951ed3a7da51475e2bc47448d42e1865d4e1af340b6b49cbeaf9b0461984c973245d2612f906a85d2818b14fc4546272da9f2f2d0ec9a415c6cf08267a39e29eb6060d54ae84addd80971c2418400be8117e80561b398b016849842289ca1ae96e4ff133524d932e222595116ac8e4eef3fc237c46ed2f1eaf00adb97132c7eeafcab7fb793b9c6e98123ac067ea4fb5e7e48607015ceedb067aac8bf5b6d201d1a229906a29ccc9e481b7a87520246c1d20a4f58198c4b799c02ccc6157207f9914d1b578ea6983c540464ca0a57ce41dde9bb2acf561b52a8b8ec5ba8c0a3fae35ba99a1f65500793fc403509124dbcea3d2d8eb20d528a15fb45772975d5c5ced5b12df3dcb76927fe830a2d4da226844b93c36a4b7f6db15506360bf9eaa818e436e82c563aa33012c4c03d2296aab18846b27db5da88a9b5f8a18a6c59cb537a21d84a35a43a340fe930e8a4d307b5ed1a299e17b1454666d7d6396712792ff7ceb97f7635c99a22ac56bda427627d431354fd801539ac50d7ac8abf425940cbe0491029e289538af44880502b3a7161d483c3789aa36066697e1fbc19358693c873c801713162031e9c60123fd44b34b216298423136324ae3a9d71a5f8f0455644208a674b408ec675b933123cdf36683c7acd9634e5b5e00d7d4e6adc4ae5ebed3d0178f935d8d8a55abf64903da05712c0b4bb5692db5236cced739660d96ec5e91d7c9aba31c4002b046771c5a1e2a2a443bbbccbb6e0890c262baa87d4d95fc0faab16bb9c4631ebc46a03c832abaaedf212c7c89adb31ae5d32e8690ad3dc22a29c227bd9ab418019fac6d2a05d01bb5c27e857838836982c28fd2f91d507df2024027a1d95b03b718b7cd2cf654094a888aa7249838fa674961335fdfbc56cad4f9970b9b0005e6778645aa274cbb39a8c8b5da15711ebcaf73cde44741b8e3e1378e7b04743420756456c8f91888382ad35671e8ae0176ad777109b8ecc6976c03f5f30b008a347dbdb6e8e9cf0035a8f0c38c25dd35e753d9fc4e128b7794e770e3abfaab9ceaa6b4b90ecf348cbba6e39dd0222a25d0dccf0b99fa6b441c9fc886e5862e01dfb085aaa49001ec9828d1afe7c397544bce989afb270442ccc6fbd14b0480c6dc5cedc88667e8e68dab6d29f9080ba44d8246c637b3a4ba62bef8e5e7a941ccb7d033cb9c0354b19a1989eb38637ef1120bc54d69f23c4c91d9f63633e83eaa253dae1afad593170de0d74fca48710b623685e9509982564a952d87c0d33df05f00c7a5930925c084f0c7a4ff7320e4159d052dbfac1fc2db82169d598acae0d1d776350e4cff93b78dfb29381be3b05295b06550cfdede3272dca5b30139d9172073a743d89ac38489c9a186dd4daec56f237dbda00581df6e66e1f52cc835121078c8425623e62e2d418739d00682413299d346b8746e004420784852c5289562dcb9da20d6a4a56f0c1f090e3663d703e73b65e48be95f134560a0ad0ef7229eb88faa0c9940f5df99471ec9fdb797f26e14455160504c0c7857fbfdc61e1f5df7297e050c54727c6888838061d30b15b3787e9400ba16b836cf8719efcd5281510b9a63c9854af4c111af5bb8fad10f2479db70b71711ce7b32ff0659cf259a7b41726853f2ba2bd78a4ca64a99b197ddbd355f0a9d85be657559b700ca98885c10d9fa70a274ddd3a2f9abb3eaef4f5cc151eb138c9ba0ba5361919eba6c80c8f980539bdf0c7a0a9a16856ef3b55ea9a449dd24fea41ac978afe2bacbf19ec20885b971ea8eabf400fa8fcc566e4623674eb970e313a4d8f1b2c40890f85419c4b770d9ebc7e8720da810f7379e3da4c9ab0b0a3b1ce71d96b8e7a4e68fa0bd2aac0ef878ffd031a119306eaa4ba0c6a003afa5738d7581463b1f549c652bd764cee0c2a354cef64c4af5f941dd675db26f2536e75edc84287c5eab1b79557c45220d325ec342a36051864d809ed6e0e21a19b58eb1190f3d3c61c15fad55d7c2034c5f10792e652637e025324bc6e624e317c04ae5f29d59bf4ff70b5dc7d6281bef6c7b80ae7be0be3df5f7f8e36e2bc7f3decb2747432132e91554c628286b1ea6100155a8f6a5fb45c6ab8c2153483dca363d124cbead3c012b775df2619b42e1bc7e9d6af7c50909ffd2d896b4602a21b0f2e0a4a603612021fdeb933585e221905698818072170b519d4114440837c1af79452682a533f00254c1a52df65a2a6264f768844099848c12dbb13c50d6b633566ed9936a9c5f8869c29ad2cb3cb00d36ed4eff59ea23aeef39d84e3bb833f320bf9e77d66748784ad6fb0ccc72f9d44957dcb9279ac0b081d8c2a0cd1e32124541be997c15ca52e0aa135aea0558832b6d61fe1477400ad78629138a922883d05f7f9929c1f3d55be4ed662858780ce5a50ea472c5e18712cd0cff344c057c39d4bd9c58bb6bf128c9bed9a20b83d0a7d794072c6a7ab3a0f2e3438eb3645cba4ca5d94c9336b77c19754c1c26dea2f81aff1e8d6f7e02f3c2cbb3fcd4fba88cf9efb6c88b8a4d2aa16bd7fcdfaee34f00753f3018d0a64ea5c9f62667803c9f48d1cf93378e14dabba556654c512847b8a8da3a6af6183c3432f6c8b7d5a147c38565fdd895a212b9e4b5db54a2e5005f0113bee502b6d181692896d175dc5d0f0a0bd12c1950fa6eaafaf6abee403797893743633ec64de409d5c80615257a395b36e0067afa8ecdb94b46fe12f12803b76f26b4baa9aeecb5a87d2bbfc0c3dcc077615f6a712ac312fff81f18775ad07e0bad51f79f9e98b0be7c21a7b999b8b571af375021cc0556568997599515dbee221b9f14bfb87f4f3bc85bfd45652e41abf0acef1fd426a98471bcac94d84d029d085967b507008b2e77d04c9b30815454376dc95a3e849a4a231c9bcf0c6049c0874df43d4c701b4db57fe84cd27f2fd571a876c1b62f1083caa2924c1c332ebf6ccde3caf019ec991086e1fd76de226dea9e80c0c57935af965be9a0f69263c98f6b7dd72a5ec6d66e2948f9adcab6a2a0fc2dcfe6e5582355781302836b27b8f9abf01ade57cf828466e4ba9387042ad85994b6f8d35d4e551c179138c069b119903196dd49162cae19482a05646a7537437442e40676d7464a82785cbeec7a6de036135bfa132af1338f086941d3291a740ff4447ccc2004c65175e3d3e237dc23e68ad505093307e8c023635fae6082abde986677d11edbec9c3e3b9cd43138261b1565bb0763c2eb44da982abe6d014ece6a1393b4fa877356e456b25328591223b9c33fe417c0903cf910ae9d99d4ebf9c5751d9ae6d11ca648bbb0f1baac009800692998b1ac4734b27b1087c3d1d21b6ec94d2cfbfca6a4ee0dc15c1778cd2d8e93f6ba24ee0edb9f497d9c2dda937c05eab93cc81cebe77524487c761217f3cbd64b55834ae12d76a649332f3df4185e21e08dce8207b6e07f0140cab4a844713618c08353db00072d4f5bf1db4910d6c70f8a7d16d0a09d88e094c90eb470ee69b0bda4c1e99987a92732026743ee2c7894889ff628a2eeab29984ec3a8b85e640b358d8b8655217da4a21b60737f624c6404c353eb2610c2c57c2f47c4802a43ff2540bdf26cde9113eaaf05ac24dc7deff30da803f325bc94648da4c70594d06f16cbdd7cb52d8a2be96d5894181ea6e6f6fc23489c81ecc80798e66ef83975f77e5870ebde9963ecb8009fb7bb17f22c2c3848719efd9c8e0c12858cbcef8ee6638a21555180e40ee97f5c6a59430c1617c2e03b045d67a6886419dcdf560857ff120dbcd84edc35750572c62e0f71bc5f3d9e966b03a4dde1208a9815ff11436caf3efb6f746099b82ae0fc90021306aff8b7d288dc2fe0e3f0f45c93ab3a8ddfa69c8c1876e195946ee7fc2ef241a5a2adab67f7dd14b19aa0dbbe3c278eedc32d4c75f375484473d6f78f3665d4e1b3ee99feaad4016b5d20abfe606bf9e20a39971ebb8dd42a1721ca7f9eb5c2550cd6de166fed7b0acbca8b3e299eb960ca3dc689c78ca5fea0bfcbfb4968270ae4539ae9dfa043acb3885548b61f6fc76126f53d76938c1d05eba53d0297797652c2548478d467a2512c68da8280bc9e4c0652fa9de7d24c5b2e8152ffeba3caa8a0fe2a523154f0cfce29631c036d9878009be45492960dac96e9e2bcea500a400446fe8a0009f83b47a7ea14808425e30f219f1388ad3abc909933ec5e1844913c4c011fb9fb5c31dd93ab4f95a85b01d846df0371822e75d2eb759b5ea01f4bb8d3a7a18193a02f087e18c57bc48af487b9ed574b49a92621ffdab577a619d5745466a4719a93c15d71f8ac78e0c38e9cb75b96a1ae1f23b224873460878db7730142ef68fe1c83caf13679c29b79afcbf31fda415443566f2bdf90f311d7e6bf69ace1fa4b2cc98682a284125971ef852bb2379a988ba0c0a2576c44278c9cb7101f39d4140a7815d4a36a69539bcce671b8ce59d11d26ce2faba8b53969946775c09d854553cb1dff367bacdc9febc90890ca9684e0c0850f9cdd06b82ea4585402db86f5178b3d7fa8bc05a1a78010e07e740f0b9d85f0fff4c81e7743f1d446bc7ca490178627ba2a0c62af764ccb093b818fa07a5fd3a0ef6d1d35f1442aee2dc2cf0ac7f7c9cc1b9e62869dcf2db5014311935ef2218c57ca0d6dc8f38875c9d3487b73bb18183c012361e8c040e94e4e942bdce5ced7f626dd7c30d3aa67b913df8ac9cde60b1ec855409b273c15ab51fa9a9e0d27529e6239a1915d7f2149da0fdb9e82ba9505030781dd881268bc4a33806873a102527609e1d51a7fa409e4ac3fdfd77557d8626aac2fd751caa3ae4a306a08a391dd2bef125003b6452823a2fd82b78291eb5db99ad71dda7213565916d9a754d06a74dac40236d1b73deae90b4eef920cc938ed5d4d6c149f82c4706388983874c7cc05ee09a8d4c7c23786e09d9add3a7d2026b77c6d1d6ba905791f7df2f4c62d875db6ba95e8da1b4b4ad2856ba785061571e76487c175cb6ed38d615f0f53fc288a0c6fd0f7c1a0b02274f1e605aaf33a67a594e97448afe3467b6f030dc643efe267ac3be766afd6c93f8764346be375e7579ff87e359686eda9199c78f13e807aa75c9e598e32cd45b4cdb4e4d9de65119ef8dbae300e8c24a21bd07b03f7b4db57230a5fadd89b28efe200545f1edc27750121e21a420c579aab43e3a10fae60e637d7158fff3700b40ba57846aee1d3aa529e44a8a797c34a620d32aae816e9f1e36383ad191e47b2055e4aa8712ba579365d5d26623f676b2bd34617f137c3e313f1c34b2ea01d3ba7c5559bec71b905f853cb433e138c8c7ab9da47700f63d069acbf3a8b24324d83b1035b4dff8f7b528142bf8e53097315c184c5e09985745e32a5f0cbeecb5b287cd5d85161244e714de1aa600a4cb7341c210281d08e6203e982a76b50d8e671648ece83c15eea296647d0fd1abd1e43f8295d0545d1c6f8b0ac7fd9df256b77e7096fd1d42cf82ee32cf4e81180d0924a0f42919ed4a1b0ca321a8fcb522a7921bb41f2e829edb2e39704363185ae22117b630b2e97aa4de3544bcebf36acb8d6b276ec18dde8728070b6a831ed70deb9d3b9ffbb9403b7b0c413158911a20cdd36267f4904c93e105bdc2064d3c40a9f46b0c417beb78b8c64f3c666d3103b821a7b58822cabcc9652ccbc6954b45964156cd0f08abf21275756853b944abc4daf519cf439b61aecd3136f8d4232261c092cd48c37e3229edad97569ab044485de2b697ae5ce014d799717f03d51a7cf3c044cbe5e896adc1498b95f8e73183643472424f321375646d905c0772330098aa8de1fc77da41e4f4ea84aad58f8901c6f50797c12b5e1acb1e4220a5bab83b75e12fc1b8bb4c1f9bb7fca6f5d9c06721c6c29f445b2fc6304b87e389d7833f2674f89ddcfed348be9455b98df2b6a3a95516137205307efcbf183de053a85039f036eb89e6a8d0de66df4d2d4f59ab4d1ab8bc499ab9e8facee460bc06c569a9ea2aff5d690ef291e01bc0dfbdba1e4a236349875127ffbee4609f0f357b2b988694f2f09e293dfd6452271624ba1bd167eaa38c56dedf981b01a56aac919be8ba5c3623fdc8cf7e3b9c1cd0bcb060f1a33ed5aad5f266065aff420a06eb5f7d47f708daf15f09016ef29caa0976c111c249705be6958b120682b061b3be67e55605c8b6a36df031db4d8fdbd23d0c5867ad0eeeeb35165f13a43008acc6db14b4a8f060f00873e78ca4f59aca1024c352c7354ee6a34c78b139c0919b87ada699ae3ee953804c685f1b70c7989d100e4b7b05f7ba0180e95e3e030b96817cdc4ccf24c004d366ac1e38f9586549aa5f83e1d17be7b5b0a80a614535eee50d7143b9c37d1568581c82f703a25e027c85e4d9e6f423bd8a65c0487d89b4b69e116551e79f0d82ce9286ca1f62f12a19d1ce4cc910c02383388c25c97c6ba5cd039808f4b66a52178bf5350e2117e3dc3456f1a400d12cfbd92bf97bd342c2e5e48c0283920af0f9d29dde2cd3bac5c5f491ff331512f226f6239191536d06b794087d3144532ba823f6295e1c95c9e08e420a020db00f71ea10e3ea7a3019175ea9b3978c20dbf42bd96c6c8f269765f7aaf487dc5dae8bf69310ca0a4fa0257cb4524600b91fa63617b1011e67f2086fd3b6ad2acc55a98e7465adfa4db04c43b5975879bdbf463c4d7380ee2f75f5a4b5ed61dbe08725e835ca270b28ca7f1500e0388a5980e63cf0896325393345918404ea703385cb6b11bbb732dcaf996d9d7311ae06a1e253c31d5423f594b423197ad6b49d70007d5467e5339bcd6c1fd489a54a5e392a4e7cbff1356350fe3c3f94938038cea9aa530313914973c0524e93264a5f435402fad7e1405a38f17ba0ea8eccd57532ea2f2c06f1943d91115a7bc6f54f945712f2735f4a379057205f2ce8261a24e155c575a78052c534dbd1ca1fdbb348d7c92bfcea63dbd0b3dae2165aa8542f5c02373446092e2b8c988d768f5f0a4e6ead697f5dcab9fa7ac285b80d24aed19f153958d444004655a8509a466c89b057d90f9cc900fe790dcf88947fad8aa7d657b552c7b14b6124c9aa01525c77693af86e8678a3d66021f5d7bad81530ab57be9d34614bc6a72a2a0f5986f7d9520f09dd2fe3b947a428b89c2d1e3ffc723c6273b0ac370845473f49e0166240ac7cbf2296942652957c0a56d89a6c5ca95f0a435723640ca231fad3e637cadd5742d556d508eb12c8b7fb8f34aef50a87dd9b3eb6895176fa9f58d81099eb491ea5970305e9934903d7a57c5e15b418c8e036807b0922d6678e85cb8b12438fde64abafc6541de68fcd4c563a80f7cc6de1828d06ec27e22abb22b12b32d8e694bd627e62e7ee546d52189b7d388f98791be51710d42a856fcf270957a3c71f3a3e0f3afc8cb8167a3bff95412ef6c822b901368c5c85fb818e0b490594bd409030b5560495145e44034bdb46e7122ae6c489f23df16f180521b2840e0cb960469a783aebaef6f4593325424bbdf622cf5393d4d59c76a66440197b06de196cf5f8587e94da98162696719553296a01400a8ade6f73893cbc559d247335615e7620848acebb1c4ee2c8db820eea24d356ca9e6643ced57eec6aa37c0d2ba9470f5906d9dbafb89fa2402678e74a431e8ae99dbbb510127c199439f67cfd0bb5609740ce6d1609855583942a1ecea06a21f0ca57a8e7cc60c992875cfb99825bd574490ed292cc3fc295d606cbce37b6c5919661e6d341214cdee05e9d054b0af0a27246dacbfd443a7733f243e2b5410d06e892fc96df86b4ceb606c89e46ddb3a69358eed82f912315311ed52fda4b17f3022152fa6eddc4c99818327b3d7b6ffd770c7a09685c6554a07a1ade5c2ec44ddd23beb00e2e8ef9d9ca08057596843c04f948c203336c649b51f5fa0a4d08b5ea4300666b3bef093b9f8000966cbd6670063a5e746b6793a0a5d7eba4a16d1bd2fb547074c50dcf73dcd2f49366935246ae6f8adbf68cac4237615e10db6d0bf44bffb2ecc7841719ef1edddac39c252cf00c7ccbac315f2636d57cf71617c48bba85a3329c727940d9fab6ff746ab3e0482f2dc101ca6ab1183a280e8faa1fce7fc6b8018c492b2d2cb0edd9ed4161906fba92d6786948067017f16a43fe6cb45e8735b768db552aaf0503d8992759e673e547ef4317273198c52d8fc045e2c5382f7a629c2cb3d75595a8487f1f22afd1636863558a376e67c4c51f3127541e71be55739f0a25f12bc32c384a3bc7a3f79cc3a142ecb7e0e47c2b4cb05fadd1d7689bd11f824d227bc8b3094f76903d062f301e4ee133f06182fd793025859fe410d3e622d552a7d915246fd48df6b97537b2bdd0f10f56cb5e57b66253f1442a3913f4567e66578cef226a551375a5192886a8b9745c95013c22f27376876af4f5ef0d937d24af3e5df88f53aa174bc4365904b06f4ef97bf6633b7f46fe466bb964ab8bc1232b7798b678d0dea6135fee8ef2f3170f95b0facd346b80a48f464b8227dbacebd774bbd604767fca75eb6abbe0d7857c83249853de5904678e9bf148d38349a5d87ef0dca6c56eced5094911bb8cbe210acaacdcd1d080d3ef6c2d8e8e6a3833b64893f50a2c0887180f5889dcac41736ba959b74e21e7f94c7c3cb0b0dffc0d640625e45c21e7bbbbc1625efd5c2081c8498c10a0a5feab36dcddbab31bdd5a9a5acaa5b6fe361fc7efae48da4548deea6ed699e64b68bcea79899aed5ce8b833819ca48172837e88c6a807aa7f36bef7133676da694d966f4b80754c3036fc894c2bd0629c0d41eab60ba8fd32e11cfa4c8099d9dcad2600d2310c66d4742d2aa0a3703c288c74b7d056c1b12be1d1c3c1b81c076f7a07687995f780097d57eae81cc4292c0ab85c1d1bf184d4bdd504c772317dbb2ead83a8da3f83e0c4cb65448c452e0aab2300a757ccf8aee0b462fdcbdb73c451991f7e43631f063f72b4a0e243465d0be73dd241e5b33a65e8ffe87cff829ee1b699715511b9c8913b971e65c186920f8115ca9dfe14ff68e10909ceda7e08052ca623ec4ee93e33e4d3643437b9e7b3383450e4258e08ca39ce8fc246adf0b66b84eb192fe25b0b12585cc2ffc74d60a04cd1b7e5a47455a4561a903bdbcdfe5ce9488cd3ce088674ceb5354c75b28caffdd8cfae59b3cfb8cca0657299a17f044d8fa32270d18de31e5744745da12c1ef12a8bd2d72a2b5d100a8369905bbf82ad9c2bf3f2e25ae12fe9d666b0db25ecbea0b80ef1a8e96ce2b1ed9ba3fa58a229f73d050b338f5ae1ee472829039241b605b19f9d826264d4acc512da637e67b704e3444a51924ee104030bd2bc89b19e60232e518a58c61399788752b8208620b36d67c88515586863855b1ba30ea9a4c03bbc2ff0f0be1f100115179e972f8ece8c4b2399d13fa2ad954d59ca1ed9946a1a356d4ce7774b7bdc49851e986fb7c8fb43e049149d839472c00bd1dbf4d3c004c33bb2dea2e100922d4eda00bc7dae5efed307e9c5c07f32e0605eb749a7a57acc07f17c3550e6f824490cb79dd06ea6e5ba30f46ec8b684615e4394e4c4be41191e9e6dca351f3b0e58868790a42f303a1d38205997e9196dbf989cc32ebc9150c0a6ba20e99f46f3b82c35b29eac1506f058255f62098d559128f3fe496c2429bcfb5f9b3e7fdfbb8a1c37cba7073701817cf7e24bc9bd8f9003082f2e7f898eec9f0857ce03c9409b1114508f2bed1e8ef891ac7b28b9662f2a4de5f1269ef55fee750a23e59059359308df0dc2de2ccdc607d13b12546ea639d6c9987d7dab2e080f16b65d6057e055fac721a3a4fc2970281be504ff26f3a654a5afd364b4d80c69142306c84ce04427a841c48951ad9fcabab15ee11ad2b5574a351369aa0c2bebefecaa20b3e94e29ffb2e1af8b14e8ed467561e68745d3274d52b8904f17a35d54bb28a7dd694d4fe20f5027821e8bbe337cc6b58bfe5cca1a285da1f31d0eb8c10b306b65462108267eb244cf88159c9ae79609f57e661a328c8774f292654eb4b50b6a4b42ac63d2d982a0bd93fd9579208fb48eae62be3aed35a5f54e709a69887cab7f131e8eb57e946cb0f1c76df14f929bea5e910a61f14e5867f4f7512cabb5bb24568be0558b6830f102e6b489eddb58614b1e109f961607c411e88d66b56e8685f1a3bcf38bb8dc360dad8eef8913ebe9686e0f740adf550c5da93371d56354cedda50bcc8ed22e404202a674830111f9cce0b14c74c5a8cf57e3fbf9f8540cc80313fb23d2e126942d934c5ba6242b0d285c8322c57297ecdd70b9eb9fb1e4379c478cf700600025a9f77d3ad0b78dd239cbd9a24d38ecdbee5fcf196a8d54446316fd25efe6e97f76419ad7b329f8efbcc83f63f341ade627af55e7219709d91e593b4c4b8798b467306f9fa0ca4e0f7739ebd8f891a3ca760911569322c7ced2ca581a0cd3322fcf1a0b75a47649d57a649ac44294b484613b2e57ea170c5ce678cf6cb8e9a8808c0cb60a688a6df912050e44c5e2e8b9d74489fd1431dff7c2973b5f3cbb4fd61597a3b31070ac74bcde8f6ac37904926c77b009e97f6851de725b5f89c7ef87584294016c48f1aaf6d3bdd0b89c230c0d67cd09b15fcaa07e9691efcb348cf72f9010f4e9aa2df0f21dd5b1a0e87e89faef8683901fb3d57e581c9ef2a1d9cd2209c70f077de72f353c6b7f62373849598342a6058ca71cc9ae9dac3f6c06522d4cb32850201fe44b088eedef8a6831ad480c8b475f73723286dcad7046bf859c40727713af88a808602983667a0adcb0593b6262c431c2298235d8193b8e63fea64a3ae03289025e2610790478d5bd23ee0f1392f884453b76e3d32e0a394b3cdf0ec172f7a93df62c3a19766c65c0d9bddd43cb41075e37af0868f5825b30279cdcdbb8ae939149511547adbc188c526188b4406f39dacc012583124ddd37a5d9d9671123f5f0bba3e9c9890a7cfdc3de3b11013c134143ae89379c7d6a2908cc8aa5cc4d39e43ab1bc81a2c77a11b6d4d69ff9cf96ccf12047f294e6eb3807c1b0315527b66b56c66efd410ca454af3af4d07f5e7b65a2459cfd4793c127ece2d339538f181d2a89b2dff8e6e8057112d4a9807d4d039a67997f65df6b5e01ac91c1874be70e202a4a15f674faf2e5f11c70d118244c36881d8791da0fef6c500138274221de58caf5c84e4c7daaf87da515b9d947e2ecc99677f92730c8662ba600794e9997781a74e8718b16048c11d1022a090ae7d1851a73d848f208d7605c992283b68415af4523db83098ad4e4074b8ecef8cad1aa43be6930057e11d68f7fa21b551018c1e5a4914bfd4595e5be7e23385bdbcf9ba94879ca549c4c4a1f7cfc467a926cdb4fb1cefc1e146b38d0396be3dc6fb21a6337eb72483014f8e0bbf919e078cb41b489ebacc6c62c01db20a2f6e805501520cfb9b2c3f610a0af7ffaaf6a87d6dee2f4ad7596fe037dea447a45d01d4e771c734970cfd6cf956a25c8818f972af115cd7e62f456e94b179d3578375caad4a0b6487634620521b01af6118c1d9d52cbdff5ec971a90163b702356ea20f28c9225463051d4a51937115baee2602608efef15064de640bb0cfbbdab1a4ca942e7386c80f758e902306eaecf2ee95098cb97041151399a10250274ff35906aadaadfaa281b6f2108067b5532bd3df62c7e15c748103ab93a1e517e8eb5552ad0abf4f07dade220a6a55d8b6285e493e8364b2d81e6a4dff6b925fdc70e8431f123842115790fff137f9ac2a84e95e71441d2075712e4820699c02c4e40a921017947aec2d6a5b3675563be0a17c5c9d85f674ee38461ac0c80ec8cea11b4733a45455fbe8c5a523fda095e8b2426a5b1a2528a2b8998f9becbfe710d0ad4b7e000d2014a43376c8be4fed869ebd4ed3bbf9be212e017e8f186646d63a30bdd5d0fa280610d65b128aa3c93c7f5c953b2416a6c56685cc9359615c1fbd931ae6b0165cca11d74477e7dedc98cb6b23000ff9a48d5121d4b3b6f7f208647e37a302a4934d57bfdaed9af70e3e8d11b55f7aca6e646c56ff332fd07cf2246e46e430096756bc21451ab010372b30449df555eaba0ff7a608d05cd545e5c9b46cc3f0334b26236eefa7313bf0ad86e027a0d9a70eb92a61e1bb0342342ffdd9c32a70e2f36ba1a0682c834eee337e8098cb3c70ef81943dc389e203b3871290b2a8bdc895da375b417ae57c66473c53bdfbfefc25ee20226c9363811a6f21bf8887c0275001ce8746aefdac085e95b46b15a677ae759edac5e2f5ce5ac91c9ecd0b80d5ccca7a1d4d9e9e32b33ce2a2f510c979999647998fe8379024e9bfd9957398612f168428e0ce18de5c0eff3cfb2522d2c544357632d772c8dd2560bc3a376f53baac5cb446c7dc11e78b467dbb8c37391084440b576904759c6e1226aa798e92fcd35ac034699ced3966d1fb3e07b70b923a6bd9564e81a9c73dec0223a8a40dc4aa02a1f2a4f594fb844b7425bf2c306642ffadb192f42d903cdb40b60d30a1065d85b7732b2386c0ed0ab41739f63a63febf8d0560dc0ba05d3d92cb59868d8764410e142ec07e5236a178145aec831c486e1f75a70374b1cc33d974e25521c8c64a98e74736709278f6f6042d536d00a4775a12ca826060261a993e05f1021f267d19f4a83d5540c492c1c04b34c8ee762608f92cf5522f8d603b2b31ecb936214d35e74df3f95af608527d746f45978091e770c939feb13ebaf21f97d5c6fb05e985cf6f051ad3d2fe5868c1ff064d16957b21ca13fe3e8aab2b73a6409717c3563168ab071ed1e74923478a5bdaccaf31acee773088a4dd548da90b23f3eaa37a7a19fbfb82a93bba2ed1c486c9a4edb5f8f1ecdb1181e117f827dc03ab1b47227f68e3d3068fb7f17173b9948287adc15508e0317890621dd1ec1ea161e9330be98189d5248f3e3f89415d237ee9db1d278933d68b2b30bc153a4bc560e9eba61ea12e7175aeca3f04a9e0b477707b1a1442f1559ccbda7646b0d49ea496aabc602808fdde388675d37f1c52e07a21a88cd88c39a69214da9236179f3fb69287a0d47fe03b8df02fec9a3ebe23fbb44f84d8b4873e4292334221fe11ff15937f1f62eb2ef65ebb2bb492cd073e01161d56bdf2bde612cb884475f4658d40866a40e14348eb3c5019a38975b95d12d547ae165929da348d7fef1e7856d48dbccbbb2a77f8308286c299fed40e02fac5e92621efd06dce593e5d5f4b49d9a70b6babb91cba503ca1cd634e3671ba5691e6e2aa25b79b9b4d738f0ed0f6763d60cb4e531fd9e7c5370a49791205441247ce31c25825347fee30a00fe85b0addeafd75310d8e8e89bfe5fe90faf33e0af97fe5f7599daa61aca9829e497958ee6aa4d3e61db86b15f3e070cc8d601793e1c800d753cd45cc67fb227a968e292c8cc909572d2abc8c17b75cac0353a2d88cdbbea0e50039f35c7c31d78081b665f8eacc7dda63a0d2bd3ff2bd1db0364b219338e3578f88cf1205c1d6a8bcf44e66294a5745f49123c1a55e2227f938250caa7fa6d4a097a0f1c463b3cc7d5e4672379e778c5333d5197c417c69bfa729a56580a57357e112eac3c90b1e9332d4b97c51fc4d2392397baed9698da8a7c1bd5eb12f05b2ef61f68e2ef5d3d266078230e68fd1a2d97884fcca23ad4b950924fa40f7f86a29b14587841347c2f6b41ee2f4382343790acd6ac52133be284a9421e2abdff51624345f17d90fc118cb0cb5392eded638269495774a9bde47c8dff8a657f6d048d891a8e207422e1d00abc557ee850d5ee8357de7f88de2f64c08fe478201cded519beca38f9b541caf7a0d955d03007a40da2bb00250cebf778c8733715bea3288b9381f27104fe13dd598c16b6207f9a649486eeb1b49e2797c521a9d8431d31bc7083508cf50e18f890118ccd3d713633335e6b5893b2ff463cae2018e9a71d751e7c618ac7470e4e2ba5b8be460c20bf910e2a823296675a899025ad3089ba0e2406c559ec2e829973e11f97491a0450f962bf0a4f62d954cb28466d495a860959337768956ced6e4b8c6d6f6cb95fe08b963bc9562069e5fbdc271314924b8e9521297f3f035fc83b7f7ca4c961809fdabd1d7f909be385d4babb2e8aa5adb4d5e85e9fed8e4fb7b62cd2d625ac88a7acabcd1ac6b96988af9cda2813c36895887e6add05f46690ad4535c43b1fc57db7344be48bd4088174e745c2f15ca1fc15ac8bcb6988db92346eab79bf89ec1d0c3c53977412443c2edec1067b875efbade828113895373d2f4dce2027ad31a7dba266154ee6feefaf90e5844c4b95537f2974504beaa5e169e7b6930ccb59c3c348cc18245894e5b193f89743d2e3e9af26efb965206bd1d9dbf513983638c52562771d609bffb0fe1435d4b90ced4c7a974080ba7019e6956dd5efeec5592e53f36d1668cea0350b1203eb9dee5d7b52c68f8e2349006e56b535dc36acdb905919192e841ea21933fb5d3a089e4757e82a8c689e0f48703f65cf2352bff866e6c4f3f44c78545a41746bca876448e5afa330b5bb00d03479e70fbf2e9587e1239978d20220fc7e7cee2770372ee9c4b0c01315e6d4e40a19de358ea6e83ea636a2dbeb0cbcbd8ba8b36f70c5e3b7414186fe3b077a2ffda86606f318a58f30de3b1549fb4a62bc9c6cde8b9bdbbf7fe852c584b262f580be163352d17ab9ee8dae7a46ccb0fe7e07894f43c9e9e40ebfcd17040685b95714a8c2acf0d71abe18931e60a43333348858b17b369ce1c848b458a9eea7c2e9b1e7cc2fe13d9f427bbfc1a263c03d755e5c43f2ed33119b958ec41b4000a7d3a34c728f075f803db0ac00fdd155cd93b0fc49d7281439429f598dd02c07028c049726efeb44ec656863f797dcb35329ec77189c5140ba38c86fc96e0bcb185add9ff02e4c09a71586ca072e0754a6ee4045c973465e7f19a729ef1fd41f71ee195964cbd2f5c19f58b11292014f0f9e67f936392ea7df913edc907bf2009a8675d1895129a865d60fc4be1bedac5ffb740ca45c9b88b64b408f441cc8cc470392a2dccd9f36ec5fe2210dce2437b1e6ff6616bcccd3f1d39ecdd83fd8e003a6b8536023ea1fd7e6f08dc7b6c18c626f37aed8b6b4c9350283ff3d2c8752eaf4c961bbd412a37823d6a8f03546037b1975dea6ce480f6a8aa9510f5f0f3a96da4db459113b4cd29ed9d360829c94654a3905488edcf27cb6bf6dac22fcc4b51b0aa85fa9fcbcd631d48ae4d699a76f341d2ccbcc41513ca00a9b71ffddaa38b54b6d57445bed16005604a8b8b73fcd113f2b389453bb81e9aebaa19853683eec98d6872e7402b5645e733d670951e5c4dc424ccff2af1113b45f0baf1f7c4c3177f05c9e285d0a19d8527b1dc9d57794e025298e6c1e72e49b3964207aecf927abae5b9d96fb91620937069520a16588b5b5d6c54b9a0365b728f2d17603245c3f84bfcf885f59d259e5741947d4836eca65771cd33c1ace8b41566c444119f6604b1ad7ffeeda28083ca20e975f6a6e7b7d675ea89a54d5aff05d6d5e81b2e94d3b4aa92f01b48ce7ca3ce956b7f8b3c83b988c44b820f7da7062738d8779ea06f334f1c82ecd3813dc2fa72ddc6e8701f0fb48f5019de4bf154031bae06aff3a627dd173af7e35a021efcb6a5e631c40fe380b61fee479e0894f1b1dcacde0b5613a436bb5c13cca1e765aaf1656da27a9f5a7d3cdf5efddbb202556433276baba8c7a209f020d9a9ac28621a173eb2bd70d6fc2b3808e6642cdbf67b82906cdf29c3dd576bfa0df5a9dd43e302326ef3fee2be9e90690ad2e23affe55e7516e9399398944bde7ad196d75b6bfc3882047b7c689cc2fcbab510e7a405a50cba673c6a23b879733f8f8feff77801ac0e6694e50dedc1bc468f4a7c2ff78d0cef38a8d8fd2a9a8509d2bfa543496e43c433e779245ffee686ffbb7d28de4686cb8115dea1b5ee4cb71675f222c9552cf937996e771556c12ec35854f8274d4093c0688084d564bf9681bf15139a8b3d6e282f77fa30be5c6fc9e2aeb05916efee688de006c3badb9320251a01f8266d2157144425a09227196e26f39da3c2cf81e6ab5387947049a6c6eaf6da90f6d6876ccbafbd0320c41b718038ede2433b384feb5dbe0c70ac266a3fa299e5ee94a91244e7b859756fb910eea10b8c75a827fc2b5be93aa92412e296fc9b728fd854ff5f23d9604b595461f6fc0d4b236ece5b26b37519b9b9a0553fb51b1308055846da6796f034128e902ed1dd96c003366f1a1aeef1cd6278af77da466e62e219783f0c5353ca1feef4fea06bd0b1054822262234cc49b5259e8fc8a856be385783cd3f5ba015ff5b1f381bad486fdc790ddfc62f610ae8b5e95fdd31879796a0441ef1f3af3b462fb148f8abecafa32f4fb13c60d9dfee614da14fe6b531d72409af00979b4031ab175e9f55e8e10bcc008ba7942b13091e78e75509f6871e71679fdc78a6846295d92dbc388d8c535da02edb320cde58052b37ab1a4e55a7c1678f5bc7461d7d8a7d161840b013b334514ae8756624bc7e920f723b7c4fc0e8d4b0ef6d1ea259ff0280549f02a4b6567e0660aaeffaae67cf60659e6ae7dcc0a293fed607e5315d9453fe20bc8894ecbc25cecf2d966dc51147396310c254bacf1c2841b78f048decd018c9d33e264818887327c00a5df57592faa055e5ab24e0daeb85c9861a397a2edc5ce2ecedd0b4973796327c2fad44cc62fea5ec907562ce0bf28537b1ec259ef1ab3f3b234268679627664879599810cf0904186a8ccf2049726ab34af06ef338e629e16f6231332848adffe60f23bcac6b3a9a2df1978959c64c5aee2c6afc4111531a9609839202c95f6ebf912219f0404a22eda3f8c99aecf2368755bc8df6c051bbe739ee9da3b2323287ec9194746e7d1793dc3a2c8873aa7a9850847e850004e47243c98209e84e77ed9574da0308483564b2166d2d63708bcc24ab52eb391b64c4d15407b80ed2937655a5af143758417877d9d1bedc9dc88e0c98ed7c2a98b93f9e7329da801082afe38b66de1f2afaa5696cd4fa1bbffff722327d19f893292fe5d80d072421bde543fa1e7eb322ba005fa5ea33fcd7935dc1b0470dc07ce92532b3b2111c25229cab7be8973c4e8990b015a707723f4c22bcffe314e6bc55b6b26b896ec7b458e2f3c4569b1ee7a040f6b3054ad77e37501362a49458bb3b166b93645a168137a4f0653f3edf7f101fe31b958df407b48e7676624267ba8c9c2827011a3bd871dac2b0e14b8f649506eccaf98dfeab5809e12d8e498f8dac1bec7bbdae3013e9419622c7390795cfe2ddbafde80e74526683a0f96e94d32e566ae7c22cceef67d5f3b7d70392bd628d3c882752380c40d9a2e8308b63cb28ad3090a31301ac73f0e1b63bfb758d4b1a9b659316447343f541659d175fbecf4bc7ec658c5d0491deffcae86faf60aee58526e041c8f3b61b32d4902ad586a7bf29979c588055d49c3ca2e02cc13cff9951325561d738b017510b5f64843dd66da760eef1777b93f9413b756efb11d7dae72bc429e2ac6c535a17d4fe2e3b0b30d2c10ab65b640c87cf6a3cede2ae62a7eaa04513307c7b3b621aa0fb23c674fe5aa6d04f079e34b314e3fb6322fe316f3e3821316b8d5692c21584f95fb1396b2f4a699dd2305d336b6cea130d61dc5e2fdab677b325f78e1ad04bfdcfc2d40c7c9170d1902471394df5f5b34775f8609fa55cc657d9818c2bf4907ed814a6ead5d0b79a34dc82a4496b1845c5b73956ff68307e1555ae7528485c174b3ae47dbba74e5a99cd2b8edc1353897de8628a76b1762e471f48c8ffee3ab0a96ca53c1dac9a90c26c8f8d0b37b70abaf17c25b5074efb0eb32bcfd1bd39e872e2e1ee8d7df2d2985423f80f7487bfd1d84ab628f32545f3b069b5a8ed30d78d1d40b4252fd0846652280166c3c64fea37358900f7844fa21993dbf5ab022905a18557b9ab6294503ef0688a40c2a43d91598d7dbb279affe0fa8e74b54ceec66c25e9dfb878a5f3b78fb4b63ee25d31b3d653ab274bb1a8b3eeae33de939ecc9db42fdd6c27dfc5f3b5dab02f8273440e3084f4533d116188fc956c48c5c26ca9ba54522e3c46c1273ff9cc050801a202931fee887c6074b029b8a3cc4a7df08d5c4d399a1cbdc8b05230929bf3da7c2b0dceadce34f1eca71c5cde19f6f1cefb36320a2642098a94bb6aae1f8e96998898a59586e4aced3f73b2fbb8b175e927cd1877095d5c8e1b6ba43d0e59da5f7f3f1f235f28c6f147cdae3f2509ff765d9aa6a30d7e6c96688a9bf44e5637e0a33af14935f94df6b81607c872915c1535d291e8d37c20af83d49cfe0ed69e14d9c9b1f5c73c90f5afa6a2c3609968068faebec41a38107a6e3807bbe74d71a5beeb1a993524b1634bc8511c419756026ee36006a7532a0415251d350ac0763873d818eee4805207568cf02e5519c2f1c1332d0f57fd8dfc878522f07dcd7c155ba452fe109589f9031abfce7a816cb3abf2087c057224a086d49f2e3ee875cbf9caf682e0c2f9ccff93191018042e6de730a77fc7e88d37f1caa08154fe95ba1b96a4360f45c505c71046d9198280607d5450470c60b86d62a02597dc98174dc64cee31e5b392b2546f02f28b9c587320fd2b581c0f1cabe678d25b069c95bcc448a65d3073ad249a0844eaa9f0caf9af612167fe0720a81c3a000b042fc849a21f8a44c0bf42ff9cfdd179d17ba7916cc3591e9534f1c6290205c28d8f9a9a691699ec5ec5a4e96211a624aead5dfb39f942cfe3418545db8b262c3ef7788c1cac23a4038a01e413c14cefc5145674acde0e052619814ba73dece0a7df87f0c4cc8b1a21a9ba3a61ced5fbf50e081687575fe41c8821b20e0167654e9eded488886445f0396b11c80e9b31303e01a854a0c4b425070703c9d9f40a7bed979d95409d67ec804452d99cf6e88a465c9a66da05859b380a80a49e49b784cebf1c7eea3acb8e6efa34318e6a4bba8b53bb880988889d7290d2adf44e5d66ad815497197526fdbb8da9a2ea24423c32e75b19495855225d20b39cfde48e03765f522c161a3e9ca61a45ffa80c37f6d9401dc3b730372f30eb7d325eb3d84e79d423ffc1a65ceb935f76375f9d5402881ff24e7b49871511c3dec1066a26edcd7a48c2ea4789dfdd9b393840c99f66af2bf827c1c7d940f07ce85d292d52fe7d831040d8a532be2fb4ceca6236a1482ebab387f19c0d50b643999a92b884294e6aa00b86d2f5a5d08cae3958f5361a3c19d308fc142c8e8ab94a445df5402eb4d31c6cef3b258c63bc705bb91453740532de348ad4613aa2452bf6145528c212810b025ae5a1b1331855a8cef78bbc9996f6a6844ad615dcd28784e6643d2ce036cfec631bb45d27652ffb4fb97ab16eaad3feb8bbf5c8df7c4c1cc234f6be684b5b6509e9b38aed959c0a6fa6511392addf48e70d549364ae80399e7ed3fbe19032a768ecd4382bc91c45aab809c9ba8d13907d2adf252c6549af086b1dd5448dbbb9ade2ef65b821483fc1d2b704edbb148278fca95c19ed584c0cccaf489ecfe936f23e2e0e00cd747d1df26d9ed3affee39f35e9373ee87eef96bfc3e8b241f58a77137fe88cdc4755ec1c3009dd469d8ae71a44fc86db1ea0dde7f062e28f0ab682384fd9fbe0cac747a80a9f9caa3cd9ae8f8f12dae11561128c560a2f9bb2bb88fbc7f9a0905e0f2c8b27bc95b0b2fdd23b0bbb021907d2843b60b5b4e7bda4c72ba0409d4eefcc5d540aaa451f2067d8dbe6d6ac1b5a2ba47ffdc70b48e5be2354c19bb369c02d4e015b47cba1493d1792f8cf86a8a9552bb41322b28a2d11b60a28997a27823629164c5479894a4ac8b89ed542b4fd73b391fc33cd01a15bc887e435477de30d943690b0c0fe2c5886bcea362487147be511a6ef573f608edd2dcd6711b4ff1f2bd0ce8c0ee0cbc4103a557197855c5ebe3e6006ac5a8565051c5aa275f6e69b933f3ea550db519bf09dd3d72283be7200f7e500fb57c654810ae769421f028cdcb2d34a793e702206ca20d28cfe5af07e6f533a54cda871f65d3c62a34b6b83c8699b344aef57e840fe8b3b82fd94333af8c6b2c60c472f40eb4779be9e025a64ea9a2e81dae1038d3a50b2fa2df3aa3a21ee5369d702d61770fa8a0803eddc86d12266ed51a3d44af0efcc782bcb2b9e5bd1041cd321d0933ba2cb5c994664b65e7ab49386b5c17417488e382891b53c4f8de3d048551fc0b6c3e89d8711aadebece6d63cf9908cd1a9a1fb21d8b272f9838bfe7667d0f8dd6b949c4ccacf0958066f934c2d47c183cc1dc5cfe3e17637b620779d42bf4c2c9173ddaeed4fe36b17074775325a194d1aaf41196b2fc1c19ac918c261a7ab678c7486160dde6ccba3267e90cd745538aef526d676a35cf5d329e0710d77d8448aea504116b7deaab9e10926cdd9d2b6e8f4a722eb435af652aef26cc2b1993c4b6062e8e6042ea4017dc25b4f766df2a1905eb7f12b19e1d51be05789e4ce448b841fdcdb05cd5871301b5c71ef07b4b5d90cb8ae50d03a7ba1dc9c52e1d536c50ee37a0b333d2ddf166ec463c80fb6c967d3da64c96ed0d1fcee7b194a881714da7c310f888c1c8582c7856c60ab77dc08ad9ac8fd49fd92faf9aae384f7dacc356c818264ee00c3167a0447e5b5b21b292fabd0992f4548eb03572c0996194b3311821e634900a71fc25863366b5ba40d0e23dcee3135f7e4828f5857b75242621b9f6d279ef350505232b346c3888b760893d8e045cbe3f1bd4d6ef27b89e4e0eeb9f83aa3eb50954c2fdb7cc5a1b2fbb3b3384785803c3827a3606fdadbe2d035f7ec7db10ba7a8a5f928637ff8d908c8f374e1d9aa7ec79fb0bd1187358013fc040718425bf0a85cc643053005e85373005dfdd9e4292385fe4abf05395bcf32053269a7e9ee5d494dd1ee447fa66c79779549bda451bac20a7e9745901fb38205442fc42629ec38d7382781f986cbd8fe5f2fd3cab0ea50a884daf91a5a04529f236ca6257d9d7b8e37eefb3590b84586dabd328fcb5f6c225c529991b0094b0fbb3884592efe821b452001a383b9bcaf6652ff29baaa14a56eec828643fcdb0237ebab48ead645bfa6c6e21747ce19c4f0061576c28c038dfb471310b20c4fc3e94a90f8dea066437ab049eceb4d9a1ec3634275e3105383db53f587f22ff484f13afa95f96b032fc31b5f56be66ea46fe05d772d9393d926683c8a1a002bd997a31054497389ffa1f84cb00fe466f74836db5f31b78b7a3265cd17f4aec436d0aaf8628f26dc2230df7a1ee491c4955f2fe36d3d3110ff8b269a994c796db27ae01ace6db88c982c91dfd3c4479574f1671167556f229bc2e5a5e8370308baa6b5bafb5744e230b6f3b4f5f78894114792922760ec6302d57dce306ea2c39816c926eab60ad58d15489c77ecfc9876c81c680dc0dfe16614371e062c7f11534b0aa43f029633fd29cbf920cb5ba03ffdd2017ee30659b5218437c772a50f34c2ba01259dec8c15b9a30cce92e3d5a3b061a8968cf615c1dbaf11d11ff175aa6458ed65b55b05a77c01022e6ca2fb51cfb38753165af6437a3cf0b4399b04ba04ae36126a6d6d6319b19b9d61e1acfd25b99709ebd0bf044982ae256aa909626ef739a4b19808e6d8a72d5c93c337374f0fd3b26516ba8b0f624f0d28e94d2e17a8f3f8a00bcb1d0e2da3b9e05f15095348397525c4c61f4db63b0053f5c610da1d4850367bd10fb466e202635b075673eeabf127e6e3e06395fd6f34c241bacc82cff7ae2e4c39e867501529adda93cf84e3b0c1712ff1bfa53a603c4c7b5899ca6e9a155b74a38879cc7c86204bba00077482f4bf65ef71abaa1cf280b80a879ae793a0c7b437d1108dfb41853fb8d99884946118484e8b34d40012e01a1e9681663de2b3bd98bcb693d0072de59369b2e0b8e87371134f9e3178d43bcaf719844709757a0a4900b5a2fdad8b788da39f572d85c7a80df58e16de5a40c34b8a02fcd360cfee5c08239d0f12d0498156dc62e4a39dcb5e73b7955bd33e9feca79f72a222c5a86440d1e4bf26963de6ccc717d918c6b769566e8cf7368a0c0ce1ac087f31503412aa06cc1b4c84fa7ff61de53cb69a901bb4af0cd29e92e9fa77fd390c4b953d1b2b343d6366ad6f943313f3c1a819c60b99530c1196d6c0b1e617c6816672db40d067441dd4c057d5364ded6b42f04dd7b9ca2dad4708484c5b6b5ce61cc08dc1aab93fa4cd612589b27309fff12640a067ca80980da74271c3565069352acc786e7162d47598fd327c78f835bc180f69757e29fd26208bb3cf8835539c2535ac2d84cd1588d674ebba0bece55feb6f9b139a1d504c88dbbf612ff2e7846d40fa04c282538117c5686f2fd8206981b7fa9821208610014620601be2498ced61c8ee277af0307168da6c3f88703e51706cb0d84938bf4abe162cf38cf0ef92e689fe7447b40abe5162b78d53e90fe1a8bd4d9b41f0382cc2bfe80f7ea868e5b084c59ab0aa52024e4d0d6c90f25d2164fc8318295027c855766d031173d2aaf25eff454f470a8b77f1d6d7d0c90d4bf360bbabfac1a8ee2f92cae02578c22c75afe615e1aa931a125c76ae98b754f81dd2284c891f0ac8bda6e47e25ac6bfd17781357e73716269072e27b1353bc428a15a6399dbfd2adb83f2ec621b943df5d7f255e21fcaee26daaa7d2f9ec4ae8c18fb000c6472245ddaafee9c95d07fed2f2f815ce7232eb4e3701d3e5810d978606315aa0bf4f3a5ee7c2600b83844931c909293cedd8bfc477e6d495f51f4af6a35267abf9f6eb00bd150434714f0b9dc79c3126e2f8a612119f233b3f52240dcaa94722466c54c6480a14bdd87104b46e097bfbae27c99283c15d763f4db5f13eb4d65ffe0273d63fc99191ba0c3c8840a1e14030d8a2f388f3ee4c5380566754fc4d8ff58ea5087b833373096a1cd871f666a2103e41150ef8f88353038a803ee3581ccca45aa7f193dc6025fd9aead026d7745952977bc7c3e7d62ab75d6a5a6f3626bbf87cff8cdff7139e5fa9941563da4c9c9d1a530f250c00afd06422d435e2560c1c9dcc048da5eec0be985b1068f2c3d9534ff8a6d6f046844548157285a98f2951830c5ee1fb37e448beeedcf55fc810a72ae0e765cae275e3b3636bb123e31fde527dffcb7feb67ef7643bbc78d513ff347ee47bbc0d150eb80085d74041dca59ba1fc3abf1cf090f286f0300e3d4f48243490d946b94879befbed5cbddcab357adfdf9adc7062f4089c10b4026c64810d6a02425d36dfddec02cfa25827db0c8bd5da4dfee3b2a738d8396080af58f98b3acf0cf41b6b455897ca0d38388f5bd412427c586d7fa45aeca47bee17e23d584a81ad237361026cad8207e144c026a331fd509ee18e335c403d4eafaed882b69c4c20a7e345e321c44b63f0732c8d90687883677a3c925416bad4f4d684b79dbf3df924d428304f318dea6108c809c18eb98f026b99a8c27df493ea1faec986b897eac25534627e51dcbd1dec5b00fef5c8f83bfebc1368108eb17dd403ec978c15f1d68befcba37d6653703e45ef50a96574cd51771d92c197ceae0e09cedd3cb65575728ac6885d7505e5f26d657f5d659220a6621e6a744cc712baeab3ca18cce37e1b6de23ff13bf427ad1ec6ec451d4e884cccc3a5948578af5fdfccd6f13a7da6f1200efe523b20de3493b1f65e7d94bfdafca0233d25b193246017de38f3e1a35ef35785e0177ea636b42c28cd88619df96aa32697ba008ba763188e0c732b49a826923899d244a4a422bdc3f05453b3dbd163d33e047a7b556609766aca0f99173ff116f8830e14a1f285a858cdd90cad1fbfcfc0d1d55f5f959e1c0c2c23887e4e3019fa88a32a1826421bcc6ba6800c0c32283840de99247e9fe2cf47c1a57bd02ca8a4bdc8c7c51909263e30290c0802034bdb4b6cc9e71d53bc45bcc254a9e08592b5209523c4cb5df99515eb9f85bc9318fec48239bc0ec0079d24369268c1f77eec7fed3c447278d174cb8d12f5d4f4c9da283df8ff34138937f8384e994a6abcafc21ee9a895a090fa41d394433ed67c6fdf844ea6ae22a5d67046f4dcb88e1f9c6c8584eabc44d63decdd33dd445115788b2d0ee628518fd885373cf6101cecfea18ef0b78beaedf9577f68d9f7101ae0ec3fe49cf3664dc3c3a55b70284578fdcf37bb128be94bab391cdf0920ddc3cc3a4ade81f7caefaeedfb435ba66c32f573664e2f51bbf7be94823e8b86e61eafbb0ad5ad07ebd2c5cd759443a911fc7799ffda0ba5b9ac19b97736699b17b52d1c9263a4f75a3fb2753aa00beb0e34af3a95622124fcfa1dee0ae4e6977e58062d6bad7c665489a8f26245260e933affd83813d8f0558a3f29cf47b576ee0f1829bfc8223ce9a088b918837291a2a81eaca21b00f9bdd8f2c8db125690d543150026d11dd0eec04936bbad5e98f98d58d3788bf587a6d74d6af8fa710b0e6d5be8f082553c7e919b87a1cb9df5a3d29aed4abca4a83f612741847b54d50401c6e6bdbc229e49e79f35e91030d7070ece35403d79acb98fc53777e211a9ca72e392818b7a1fd6376296a77a4b6f8bfc5a430c93043083feb15e4c5aab34fb701ea044f150a92804db1af2cbf43e38f7f633709183d43a96cf41eaf34dc25df06885aa9fedbe5fafb02d1cfc0a3fe392b5f66d400be4e72ed24b3fa72daf8dc12bd9f96916996eed27a3b4ab604abdbb6505ec7ed556b6bf22a5e24f5c0343d0a357b0f97259ddef722cfe1df6f9a6ee8fb19883fef541574f8155f52488caab0f69df66d43a0143b4ed7a8629da09cae32db3c6cfeb0a6f116218c328a9fa9b8b32bfe8b86c66ccc5dbbb65cb721bf6d5b5f97e9c981ea9cee227a6058266b5e0999b7993bbe12fcd7d5eaf62aedba9134da3bdade3b1d7eb04ed1ae265513b74499bc4e3e3610b5211948ef8140afc3eb6a8172479c01212c560531f48001525803dcffdee544e1d975ab9cc1ab90f07250f9e2d9144a7e8b73d498fd793d61a52ed733830d8ab53126b0825f48a8c73e39ad6e36529a8eb90d1fc378d160b2d1753070c32a4a2b4ed6be721f18cba422f680b2536564c2f53fc5ce756c8af6827c59b1494dba8b54556a9c7cacb03ce807edd30de500f8326e4041038385a2d7fd7c3746f05260a0677e492c83262161489d13315c33f70e6e84672d520f6a871a07d33661bbf742e5ccb0e8248a8ca1cf2d3dfdf33cd30ca3832cd5dfa6a5e07503d15d97fe152c2d59f91806135190083f5ab74229dc89cfb463b8cf3ec9e54a4d07a8560bf3328d3baa128e6d715430dcee60f4b1f76eed2883165855203f74ae28ffdea5f60596dd13f0301a27099f2c4ca2b5a78ee9e9893da31764aa0803047704cf987037afd3c0fb82df5805b1d74855b8e7ea8ee4d9f10ca872429f9d598588ebb4183fd588b3e816285d47ebfb78786e6af20855cfc32263d12351572ca7e50d2b971809b122c3ccc148d3a415f9e9ef546aa96291d96487a6a369ff359d471b1a39cdfe9dd3cfd44e6fd2a16c5566c4ec8d874ab86a1fe6db0d2f6a65c6a3e25f0260e3eb9c79d358c90ebe152cc3cc23f61599caebeba86606ee75ece022fd6c204a47b2400d89b79eaefd15e33a8578c96295e3b5ba2b8a7cf4c8aa07d9fba3e82057fcde5ee83f7e22e6f8ffd514688c0bc6c056e2c698307e1fa93a4bdf0915b55177ec0a062adc7dee12fb618e788adb475095a552466eaffd81e17e1f058d7e5cf47cc4c41d11cdf0079ed850b7c4f0d4b30fead46cf589c4b16020516c07eb57dbaacc9d1cb27e0a8fc5324f1463ef44fa76f77a831d70d436a5b2e3636e8e77901f849104361e911ed66cb3765c62589397f3b2c7b00a4aacda6b23164037d495ff4426930369b91cad13fb7f36cfa384219df8acac2a397ff56a6d81cc178c68038ee493a1574489578a68f28677a7d9748b02e718f465c83bcd233bf2fabd9c3cc92292cb48e2bdb8b93ebffe7d819895c53f089ea4d4e43c71d04de9271aaf19e6c0898a39787d65ccfa62f664cf7a2d27166d8d8c2317a27172a56a63feff30d9b231ed0dca081f968cf0a7ec98201aea2cb9c267fb7c49debee4a868ae4ba3210af346cbfc1b4390ebaf4418876f19064692f4e7967631624b79e809e7835d4d8f818884736631d8c3a2286f78e724fdb20ecab1e3ce74111c72b00734436d666622c10c6209f1ca5c4ffddff40956c7c60addc8848bfa6aded46920db3847cfc9375cc1c85beb892750326cc285e8a888da6d407a5c98331d3159b23b9099e16e8b0624be6afb569b6427aaf13a2892f025ca89922f0e496629ebad9959a086b2ae5d31077eecac1e8b8ec24db20fa75348ce5ec5125b838b558622f5bcbd0456164db1bc5e9f39047bfd6d5cc35aa2890b989ad72daa72d6a4b7dffe54438762c2cd9981501a498c2b346a8f0672b6e3eb56598132edce89f6b2fd4784b1ff7e7fc66a97cf4ed06ff2f790793c407f8ee379d7cfb9c53412b473772579ee3d43e97f33b7ae4869bf1e601864607b5a0c9c865c36c358ee72759862d539cd53263dbec8409ee7d050cb8db0b67eb01558561bee488b829c09c0ae98705701bbe7b134f8f1ed424aa4856758720f2f1bd8ac662c7c4c702cec0f03ae4d72a814f9929e59d49008747d90afbe34e90be4167846a6ac23c5f79a9a9927b1fa2833916d47f0771370105847da546279edfb5a5f7d48525171019aacb06b07e202545982204ae3b54c2cb5bd38992b170d6b69d64255d7096c3a1869e1a527901068aa95ed7898be63b63ff489449ede6993b43d7b601f52cd44ecc0f89e1314d8fd714512fd5d8c51216be26c65629d7c69e2b68206e1ee99a793316807bc43565f5c3cc458b258a058507aacfa30c40b59b388d10bdbf08042082bb9d5d917e092ec1cc3d5db0987457a4c5a95065ab3fe0b72c04214e00504fc6bfd9776fd947fded28f77fe351b6670698473264d1a6e4e01d203abcf04df639ef970f2380d305d58a2c3a23e6cd87d0a69d46351f690bee21c4f77c4a23695ea0ad4a82e774306b3a6d7c01573dbf038d5b0fe6ba128d3fb8556bac0a9d6f0e6a0a20697ea19457c56b7add05d560741adcc746388f015896ed2fbf4836979523bc87df93b494f2575a6861799cb1b20bdee7164881078419ef0d2a991e09aade8a2c466d13414c9f9bf6f71b9e6d515cd14ddcd1e9e4ea31acfef66fbfa55829917791eb8ada9a6f9e68565e4e04a80adaf2e53d6452e20c46c1a66579fdebe594c8f9a320091ecfac366b2918e1cbebae73f65cd34f3bf08096ea3283f2e317bdaadb486b8182184697502b933d4f11ee17b1a19099cd512b6abe6f273072cfedc1ef7043f705cea836134a6be0a499fc902228d6f8bd275a68b13b14568c93518e228db32b733772882665c087d55bd258ed4a5675daeea19975d25c44669239f6860c5eb847d9ea3c36e3fc8baabb412e2c802dfb5e89edfc35cf76a822c44157a42e5ccce6ba6fba58b05d1a4935aab7c01f631b23343068686b13d8611ec13323791d03509e7641517f5052ec0fa80238860300aafd06f178a2849f5e028356903b82fe36cc47d93ffdc37ea83ab9acfa2e946620512829b92e5dd8cb8670a4ee1e053a21269c5a44e71042957129d3384f19c179a5da8a5946e8055a12fa334162a04214162a111493c8c5e95a60a5d7ed8e51cc5a1122cdc7f9040af1cadfff7272623cd5220f2b511a437a0c308d869f3ee91954c2223f92798e1b3088d5ebb76584e5ed1cc22d9ad40998803b0fc1cf414531a1ecdd2756ad3511d1e2c781f326eabd3733d7005aedf37a6efb893eba9bfbb7a123f94fe9bdc0403a09ed30157667683c2aad5d9b91b4063b9e191a609b91c7516f644f03e30517ab5ebdeb3dac6f009c0720a9676e3566775548d2fb2f373c36b73f45e5c3fffe79dd8956b7501f840c0ec8e095a5c3b76450c51093cc664c2055f50e292cab73814b66fcb49184a2c628178ee64d2327d623dfdcc26fef19e61d7966dae1276c8c62fad2128c01556c730fff3c37d35af4daa095759739dd22d801604e0a7eee3e1b832dd0159b1c343c08d7a9c1c34f4482a3b12c24ddd3ebc62bf524c02703de3a1e2f7dc47e9aaf98dbc8ef14c7e89fceb3121dcb0d05ff575c99e899d149c48b9e323243376781bc56049b57ffce521148a89d53a4f7d9a8583db76fea7275bcab0f66c3856ab9b6f156ef880c665a94b65402718f0f0272560fa3fb92aaa86826ce75588f53b0f0a6ef0076478c5b85cd606f30c9a6583bfc407d8508850192f7d276f77f5021835ca1975f2d9f02f96ce2e7982635748c29927d23ee0e709a968737375b2975c5c8cb0575c52bcdfab094107ff62d8f5e21256ef6c8f14b2235c8de75661a3e3924537614e3c53dd16aa3a0c7b6625aca8b7f9072150a1b6ef3fdff38bb6f4070678f0cff4fd80fd761c76b0ba9ab0add7403d68a4d1517339a46a159eab5983e052fc7c70c981670b53c2cd7767e678e81bc16f94e98ed1e3fb287c0be6e70f778931794f4d0c2eb8557bc0a0d0a1beeb3a500c544a492d3d2e878d88e822ed00ee27f2a5ccfda73fa7e1a42543d4c54882c6cc7802fe9c405f44df4ad5b0da636ffb2708a7e71cf2aa9fa8af17c56e9a87015a1b3a3b4af6d05e9998911993536fdcb5a49487429bb7207ef144c28dcee2ab44a670748fc9a5e1aacd201ed908a50000a68e9cf88f50d1a97f3da12cbc11b7e59970da2c0d27cff37029d74d45b87a606da2bf24aae3144e7e4b53aebcf1ad4f58f881525a192dd7ec06dc2e271e2b21ef36bcd2d0f82d52e77db4871296b9733213a1676bea394623395f520b9108328e0a30c1445e8fb60a53c231e85148c514b45569fb1b59aba87c6ce937bb3471f26e264d5a8ad334c83d754d141ddad4b083043452528c4b7ddb9b5d7a5d824a83e91d8f9689fd74a26d2d8619e4b436157ea83f0b8c849e497a9a82ac4a883cf76bc53ad73c1d95d0d6513bb607b00fa6449a92f9603650906748e1f9eaf3585c5d2055220e5a50cb65f9ab6019d06e8bb8da48d6f1a29864b29cf90f50eebfd0f62b314a49fca52937d57cb2ad3ce501039b0a5b4ea3eae93e902193a86ccfcca55bac16c280d8092e26db06e766274cb1bfb3fa01f4d21c780043c26ef2653ea91cca31405948a76e58ea47006fe3005c8435f3aba9f9d3cb51d75c83b52c02ce38660c2cc093a54f665694ae56907f42d2097fdddbbf6fe79a115721bdf504360e5cf006b79c6c794dfa1bec2587e63912850f61df13f0049733fc7594033ccfa9313dcf12b050f32e784201a29f4ee4ec75b5b0aca6a87385113dd2d5f9f55a4682cd1b33c054952749b831e9bfa5d133fb2b1ae9f2af957dc31827a208a0ec420873191878d58913aa616fdca1115ad26a909b27d8c2acf4371876cfc6232955c28f31fe2bc2c925d2a5e7a0c6f498e5b7e74c93c710330afb332dafbf9799ca4532420399e3fed8d6411d987aed27421f3e609282d0c8d42f7e93741ad584a4bf16c2c014b58c9332c1906bc2e71c30c9384b9ca0813df22392cd33a2d9277992e8de16a97b007a334651dd4db2e055bf21dfedb996527956d2476c1f56576dc1885e384e8e38b1f16877ea8c0c166e848b786cea6d89d952c31b052d2c4f6c37413f15b2f7ff2bbb9ac721dc688dca55b7a8ab26a2922147d9ff94b814e06b42b3516561848a1b0ae3b151478148e96504556553611eaac4efd7bcd50b68f9d2ec487502f42b2843b69aac9ba213ed0fd4374b57ba3c9bdb9ab9bd2a4b492134118c1947c517603c7cd0e2ad1a60b295735a32a8a2bb5296252eb6bd8ecc51c0f6100b747861e0cd040a569901967acaf7e9a1a12b140bd2572b19b9dbd9e16fdd554eacffdfc4dfbed063fa9bba67117d7ed9f9309e4bdc5369ac5f93199c77c544d96fe397fc0b05a14b0570ac1170096dab070c8b7bfef31c84432d4b84078a279bd079c7ba9d116d56b96e0235d9c84444928bfcb09b85f445fc262182ed4f08de98e7e1c174dbfb586ffa4497bf193c41687e7ecb7c04e5a3b85a1c0e9d02fce0256ae4f4ece02bdd0d73ee65d48cc394f457c387410449f74f1d21cfa7d1c388f1f6a5332fe76397e81c124d2a71a87708bcaaec4568c62e7fe7286ef40f3de28e67c95cbd3a7040d2eb1ba9c9c5c1598eeb71eab3e5d26abeb1106976053af5e31655aa811281c50ee9ae752691bfcd5474ce3399f17e68545ea117aa7f7a485916d27e9b78191fedc4f5e5353725d229d88fef2dc34c073447dbc20bb71dbba34dfb04660390092c5bdcdc5254d7e3d68e70cd7b7cd1c8d703b2209f9743bf218d76d13ebf7b90fbdc6b34fab50b1e33efaa351fba0995a3f016a8bc1868537810a6d4cfb27243228471de209c1c4f207f4bb92dfd74611a29692952faa1d5983a5bd6e59d259ba7b89e950626e7bd5e3e1d3c7250221ceb6190b342ae14028de422dba91e68202a4e716b56d2cb542a11bd7af870232114f2ddf2c1ee4fc52800dba9888b4a982392b730e9419812007f21e0909626c114f12c352df9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> div </tag>
            
            <tag> 主机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】01-构建时 secret 处理</title>
      <link href="/cloud/docker-01-docker-build-secret/"/>
      <url>/cloud/docker-01-docker-build-secret/</url>
      
        <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><ul><li><p>最近在通过 <code>Dockerfile</code> 构建一个镜像时，里面涉及到下载一个 git 仓库的文件，由于是私有仓库，所以需要添加 token 才能正常下载，<code>Dockerfile</code> 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> photon:<span class="number">5.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget --<span class="built_in">head</span>=<span class="string">&quot;PRIVATE-TOKEN:<span class="variable">$&#123;TOKEN&#125;</span>&quot;</span> -O a.tar.gz https://git-corp.com/a.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>但是 token 作为隐私信息，不能直接写在 <code>Dockerfile</code> 中，这样风险太高，所以研究了一下，如何安全的将密钥传入</p></li></ul><h1 id="Simple-but-Risk"><a href="#Simple-but-Risk" class="headerlink" title="Simple but Risk"></a>Simple but Risk</h1><p>我们知道 build 过程中，Docker 提供了两种基本的变量，<code>ENV</code> 和 <code>ARG</code>，详细可见 <a href="https://docs.docker.com/build/building/variables/">Build variables</a>，下面是两者主要的差异</p><ul><li><p><a href="https://docs.docker.com/build/building/variables/#env-usage-example">ENV</a> 用于在容器运行时设置环境变量</p></li><li><p><a href="https://docs.docker.com/build/building/variables/#arg-usage-example">ARG</a> 用于在构建时传递参数，运行时不可用，在 <code>Dockerfile</code> 中可以有默认值，可以通过 <code>--build-arg</code> 动态传递参数 </p></li><li><p>两者都能达到传入 token 的目的，但是这两者不能很好的处理 secret，<code>ENV</code> 可以在容器运行时通过环境变量查看，<code>ARG</code> 传递的参数可用通过 <code>docker history</code> 查看真实值，正如官方文档的提示，因此我们采用 docker 提供的 secrets 方式进行处理</p><blockquote><p>Build arguments and environment variables are inappropriate for passing secrets to your build, because they’re exposed in the final image. Instead, use secret mounts or SSH mounts, which expose secrets to your builds securely.</p><p>See <a href="https://docs.docker.com/build/building/secrets/">Build secrets</a> for more information.</p></blockquote></li></ul><p><img src="/cloud/docker-01-docker-build-secret/docker_environment_build_args.png" alt="img"></p><center>An overview of ARG and ENV availability. From <a href="https://vsupalov.com/docker-arg-vs-env/'">Docker ARG vs ENV</a></center><ul><li><font color="red">理论上可以用多阶段构建 + arg 的方式实现 secret，但是构建速度会变慢</font></li></ul><h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h1><p>Docker 为了解决构建时 secret 的安全性，通过 <code>buildkit</code> 提供了 <code>--secret</code> ，官方文档可见 <a href="https://docs.docker.com/build/building/secrets/">Build secrets</a></p><ol><li><p><code>Dockerfile</code> 修改如下，以 docker v20.10.0 为例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> photon:<span class="number">5.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=secret,<span class="built_in">id</span>=mytoken \</span></span><br><span class="line"><span class="language-bash">TOKEN=$(<span class="built_in">cat</span> /run/secrets/mytoken) &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">wget --<span class="built_in">head</span>=<span class="string">&quot;PRIVATE-TOKEN:<span class="variable">$&#123;TOKEN&#125;</span>&quot;</span> -O a.tar.gz https://git-corp.com/a.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>构建命令: <code>DOCKER_BUILDKIT=1 docker build --secret id=mytoken,src=/path/to/mytoken.txt -t sensitive:v1.0 .</code> 。<code>src</code> 可以是文件或者环境变量（docker 20.10 支持环境变量，无须在宿主机用文件存储，在构建过程中实际还会读取文件，具体实现可见 <a href="https://github.com/moby/buildkit/pull/1534#issuecomment-839876421">moby&#x2F;buildkit&#x2F;pull&#x2F;1534</a>），内容需要替换为构建机器的真实路径，文档可见 <a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#secret">docker&#x2F;buildx:secret</a></p><blockquote><p>The source of a secret can be either a <a href="https://docs.docker.com/reference/cli/docker/buildx/build/#file">file</a> or an <a href="https://docs.docker.com/reference/cli/docker/buildx/build/#env">environment variable</a>. When you use the CLI or Bake, the type can be detected automatically. You can also specify it explicitly with <code>type=file</code> or <code>type=env</code>.</p></blockquote></li><li><p>可以看到，secret 通过挂载到 <code>/run/secrets/&lt;id&gt;</code> 下（默认路径，可以在 <code>Dockerfile</code> 中通过 <code>--target</code> 指定），实现了敏感信息的传递</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=secret,<span class="built_in">id</span>=aws,target=/root/.aws/credentials \</span></span><br><span class="line"><span class="language-bash">    aws s3 <span class="built_in">cp</span> ...</span></span><br></pre></td></tr></table></figure></li></ol><p>注意:  docker 23.0.0 将 buildx 作为默认的 build，可见 <a href="https://github.com/moby/moby/releases/tag/v23.0.0">moby&#x2F;moby&#x2F;releases&#x2F;tag&#x2F;v23.0.0</a>，</p><h1 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h1><ol><li><p>buildkit 在 <a href="https://github.com/moby/buildkit/releases/tag/v0.8.0">v0.8.0</a> 正式引入 <code>RUN --mount</code> 用于处理 secret 等挂载（即不作为实验特性，docker-ce-19.03.4 自带的版本 v0.3.1-tp-docker 表示集成了一个预发布版本的 buildx 插件，即 Tech Preview）</p><blockquote><ul><li>Builtin Dockerfile frontend defaults to <code>v1.2.0</code> including support for <code>RUN --mount</code> among other features. <a href="https://github.com/moby/buildkit/releases/tag/dockerfile%2F1.2.0">Dockerfile changelog</a></li><li><code>RUN --mount</code> syntax for creating secret, ssh, bind, and cache mounts have been moved to mainline channel <a href="https://github.com/moby/buildkit/pull/1717">#1717</a></li></ul></blockquote></li><li><p>docker 在 <a href="https://github.com/docker-archive/docker-ce/releases/tag/v18.06.0-ce">v18.06.0-ce</a> 引入 buildkit，作为实验特性，用于增强 builder 能力</p><blockquote><ul><li>New experimental builder backend based on <a href="https://github.com/moby/buildkit">BuildKit</a>. To enable, run daemon in experimental mode and set <code>DOCKER_BUILDKIT=1</code> environment variable on the docker CLI. <a href="https://github.com/moby/moby/pull/37151">moby&#x2F;moby#37151</a> <a href="https://github.com/docker/cli/pull/1111">docker&#x2F;cli#1111</a></li></ul></blockquote></li><li><p>docker 在 <a href="https://github.com/docker-archive/docker-ce/releases/tag/v19.03.0">v19.03.0</a> 默认安装 buildx 作为 plugin，在此之前，需要自行安装，<a href="https://github.com/docker/buildx/issues/132#issuecomment-588044486">ref</a></p><blockquote><ul><li>Docker buildx. <a href="https://github.com/docker/docker-ce-packaging/pull/336">docker&#x2F;docker-ce-packaging#336</a></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos 测试 buildx</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce-19.03.4 docker-ce-cli-19.03.4</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不需要修改 /etc/docker/daemon.json （为空即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不需要修改 ~/.docker/config.json （为空即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下命令即可查看 buildx 版本（DOCKER_CLI_EXPERIMENTAL 需要 <span class="built_in">export</span> 到环境变量，或者以下方式启用）</span></span><br><span class="line">DOCKER_CLI_EXPERIMENTAL=enabled docker buildx version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要启用 buildkit 特性，则还需要加入 DOCKER_BUILDKIT=1，如下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">展示的 commit 可以找到对应的 buildkit 版本 https://github.com/docker/buildx/commit/6db68d029599c6710a32aa7adcba8e5a344795a7</span></span><br><span class="line">DOCKER_BUILDKIT=1 DOCKER_CLI_EXPERIMENTAL=enabled docker buildx --help</span><br></pre></td></tr></table></figure><p><img src="/cloud/docker-01-docker-build-secret/image-20240818114452996.png" alt="image-20240818114452996"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证 --secret</span></span><br><span class="line"><span class="comment">## Dockerfile</span></span><br><span class="line"><span class="comment"># syntax=docker/dockerfile:experimental</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">20240807</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=secret,<span class="built_in">id</span>=mytoken \</span></span><br><span class="line"><span class="language-bash">    TOKEN=$(<span class="built_in">cat</span> /run/secrets/mytoken) &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="variable">$&#123;TOKEN&#125;</span> &gt;&gt; /root/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## build</span></span><br><span class="line"><span class="comment">## 过程中 docker.io/docker/dockerfile:experimental 由于代理问题，可以配置 mirror 提前下载解决</span></span><br><span class="line"><span class="comment">## docker pull docker/dockerfile:experimental</span></span><br><span class="line"><span class="comment">## /root/a.txt 是真实存在的文件</span></span><br><span class="line">DOCKER_BUILDKIT=<span class="number">1</span> docker build --secret id=mytoken,src=/root/a.txt  -t hello:v1 .</span><br></pre></td></tr></table></figure></li><li><p>docker 在 <a href="%5B20.10.0%5D(https://docs.docker.com/engine/release-notes/20.10/#20100)">v20.10.0</a> 支持 <code>--secret</code> 传入 env，并将 <code>--mount</code> 放入稳定版本，不需要开启实验特性即可使用</p><blockquote><ul><li>buildkit,dockerfile: Support for <code>RUN --mount</code> options without needing to specify experimental dockerfile <code>#syntax</code> directive. <a href="https://github.com/moby/buildkit/pull/1717">moby&#x2F;buildkit#1717</a></li><li>buildkit: secrets: allow providing secrets with env <a href="https://github.com/moby/moby/pull/41234">moby&#x2F;moby#41234</a> <a href="https://github.com/docker/cli/pull/2656">docker&#x2F;cli#2656</a> <a href="https://github.com/moby/buildkit/pull/1534">moby&#x2F;buildkit#1534</a></li></ul></blockquote></li><li><p>docker 在 <a href="https://github.com/moby/moby/releases/tag/v23.0.0">v23.0.0</a> 将 buildx 和 buildkit 作为默认的 builder，而 buildx 默认启用了 buildkit，可见 <a href="https://docs.docker.com/build/buildkit/#getting-started">buildx&#x2F;Getting started</a> ，所以 docker23.0 版本及以上不需要添加 <code>DOCKER_BUILDKIT=1</code></p></li></ol><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><p><a href="https://pythonspeed.com/articles/docker-build-secrets/">Don’t leak your Docker image’s build secrets</a></p></li><li><p><a href="https://github.com/moby/moby">moby&#x2F;moby</a></p></li><li><p><a href="https://github.com/moby/buildkit">moby&#x2F;buildkit</a></p></li><li><p><a href="https://github.com/docker/buildx">docker&#x2F;buildx</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kind 使用说明</title>
      <link href="/tools/The-trick-of-kind/"/>
      <url>/tools/The-trick-of-kind/</url>
      
        <content type="html"><![CDATA[<h1 id="kind"><a href="#kind" class="headerlink" title="kind"></a>kind</h1><ul><li><p>新建默认集群：<code>sudo kind create cluster</code>，会创建名为 kind 的集群</p><ul><li><p>需预先安装 <code>docker</code>，否则报错如下</p><p><img src="/tools/The-trick-of-kind/image-20240721151910409.png" alt="image-20240721151910409"></p></li><li><p>镜像通过 mirror 提前下载，否则 kind 会一直卡住</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull kindest/node:v1.30.0</span><br></pre></td></tr></table></figure></li><li><p>成功</p><p><img src="/tools/The-trick-of-kind/image-20240721163019171.png" alt="image-20240721163019171"></p></li><li><p>如果只有默认集群，那么 kubectl get nodes 报错如下</p><p><img src="/tools/The-trick-of-kind/image-20240721181116756.png" alt="image-20240721181116756"></p></li><li><p>有自定义集群（即不止 control-plane 的话） &#x3D;&gt; <font color="red">只能看到 controk-plane 是因为此时默认集群是 kind</font></p><p><img src="/tools/The-trick-of-kind/image-20240727185428330.png" alt="image-20240727185428330"></p></li></ul></li><li><p>新建指定名称集群：kind create cluster –name kind-2</p></li><li><p>查看所有集群：kind get clusters</p><p><img src="/tools/The-trick-of-kind/image-20240721170105554.png" alt="image-20240721170105554"></p></li><li><p>查看活跃的集群：kubectl config get-contexts</p><p><img src="/tools/The-trick-of-kind/image-20240721205120677.png" alt="image-20240721205120677"></p></li><li><p>切换默认集群：kubectl config use-context <cluster-name></cluster-name></p><p><img src="/tools/The-trick-of-kind/image-20240721205148763.png" alt="image-20240721205148763"></p></li><li><p>查看指定集群信息：kubectl cluster-info –context kind-kind</p><p><img src="/tools/The-trick-of-kind/image-20240721165532903.png" alt="image-20240721165532903"></p></li><li><p>删除指定集群：kind delete cluster  –name kind-2</p><p><img src="/tools/The-trick-of-kind/image-20240721170133068.png" alt="image-20240721170133068"></p></li><li><p>查看节点：kind get nodes 默认只有一个 control-plane</p><p><img src="/tools/The-trick-of-kind/image-20240721173140062.png" alt="image-20240721173140062"></p></li></ul><h1 id="kind-error"><a href="#kind-error" class="headerlink" title="kind error"></a>kind error</h1><h2 id="kind-多集群"><a href="#kind-多集群" class="headerlink" title="kind 多集群"></a>kind 多集群</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>使用 kind 创建第三个集群时，报错 <code>ERROR: failed to create cluster: could not find a log line that matches &quot;Reached target .*Multi-User System.*|detected cgroup v1&quot;</code></li></ul><p><img src="/tools/The-trick-of-kind/image-20240721184227233.png" alt="image-20240721184227233"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li><p><a href="https://github.com/kubernetes-sigs/kind/issues/3423#issuecomment-1872074526">ERROR: failed to create cluster: could not find a log line that matches “Reached target .<em>Multi-User System.</em>|detected cgroup v1” #3423</a></p></li><li><p>修改 <code>/etc/sysctl.conf</code>，新增以下内容，生效 <code>sysctl -p</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.inotify.max_user_watches = 524288</span><br><span class="line">fs.inotify.max_user_instances = 512</span><br></pre></td></tr></table></figure></li><li><p>引入新问题 &#x3D;&gt; <font color="red">虚拟机内存分配太小了，从 2 G 到 3 G 情况有所缓解，但还没解决，下次再看 240721</font></p><ul><li>思路 <a href="https://github.com/kubernetes-sigs/kind/issues/1437#issuecomment-614898251">RROR: failed to create cluster: failed to init node with kubeadm #1437</a>, <a href="https://cloud-atlas.readthedocs.io/zh-cn/latest/kubernetes/kind/debug_mobile_cloud_x86_kind_create_fail.html">排查X86移动云Kind创建失败</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">ERROR: failed to create cluster: failed to init node with kubeadm: command &quot;docker exec --privileged example2-control-plane kubeadm init --skip-phases=preflight --config=/kind/kubeadm.conf --skip-token-print --v=6&quot; failed with error: exit status 1</span><br><span class="line">Command Output: I0721 13:23:18.293346     139 initconfiguration.go:260] loading configuration from &quot;/kind/kubeadm.conf&quot;</span><br><span class="line">W0721 13:23:18.321404     139 initconfiguration.go:348] [config] WARNING: Ignored YAML document with GroupVersionKind kubeadm.k8s.io/v1beta3, Kind=JoinConfiguration</span><br><span class="line"></span><br><span class="line">couldn&#x27;t initialize a Kubernetes cluster</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/init.runWaitControlPlanePhase.func1</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/init/waitcontrolplane.go:110</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/init.runWaitControlPlanePhase</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/init/waitcontrolplane.go:125</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow.(*Runner).Run.func1</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow/runner.go:259</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow.(*Runner).visitAll</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow/runner.go:446</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow.(*Runner).Run</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow/runner.go:232</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd.newCmdInit.func1</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:128</span><br><span class="line">github.com/spf13/cobra.(*Command).execute</span><br><span class="line">        github.com/spf13/cobra@v1.7.0/command.go:940</span><br><span class="line">github.com/spf13/cobra.(*Command).ExecuteC</span><br><span class="line">        github.com/spf13/cobra@v1.7.0/command.go:1068</span><br><span class="line">github.com/spf13/cobra.(*Command).Execute</span><br><span class="line">        github.com/spf13/cobra@v1.7.0/command.go:992</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app.Run</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/kubeadm.go:52</span><br><span class="line">main.main</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/kubeadm.go:25</span><br><span class="line">runtime.main</span><br><span class="line">        runtime/proc.go:271</span><br><span class="line">runtime.goexit</span><br><span class="line">        runtime/asm_amd64.s:1695</span><br><span class="line">error execution phase wait-control-plane</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow.(*Runner).Run.func1</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow/runner.go:260</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow.(*Runner).visitAll</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow/runner.go:446</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow.(*Runner).Run</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow/runner.go:232</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app/cmd.newCmdInit.func1</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:128</span><br><span class="line">github.com/spf13/cobra.(*Command).execute</span><br><span class="line">        github.com/spf13/cobra@v1.7.0/command.go:940</span><br><span class="line">github.com/spf13/cobra.(*Command).ExecuteC</span><br><span class="line">        github.com/spf13/cobra@v1.7.0/command.go:1068</span><br><span class="line">github.com/spf13/cobra.(*Command).Execute</span><br><span class="line">        github.com/spf13/cobra@v1.7.0/command.go:992</span><br><span class="line">k8s.io/kubernetes/cmd/kubeadm/app.Run</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/app/kubeadm.go:52</span><br><span class="line">main.main</span><br><span class="line">        k8s.io/kubernetes/cmd/kubeadm/kubeadm.go:25</span><br><span class="line">runtime.main</span><br><span class="line">        runtime/proc.go:271</span><br><span class="line">runtime.goexit</span><br><span class="line">        runtime/asm_amd64.s:1695</span><br></pre></td></tr></table></figure></li></ul><h2 id="Unable-to-connect-to-the-server-net-http-TLS-handshake-timeout"><a href="#Unable-to-connect-to-the-server-net-http-TLS-handshake-timeout" class="headerlink" title="Unable to connect to the server: net&#x2F;http: TLS handshake timeout"></a>Unable to connect to the server: net&#x2F;http: TLS handshake timeout</h2><ul><li><p><a href="https://stackoverflow.com/questions/59958274/unable-to-connect-to-the-server-net-http-tls-handshake-timeout">Unable to connect to the server: net&#x2F;http: TLS handshake timeout</a></p></li><li><p>类似错误: read: connection reset by peer</p></li><li><p>解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> kind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TroubleShooting】Vmware 相关</title>
      <link href="/troubleshoot/vmware/"/>
      <url>/troubleshoot/vmware/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>以下环境无特别说明，均在 VMware® Workstation 17 Pro 17.5.2 build-23775571 虚拟机发生</li></ul><h1 id="centos7-mini"><a href="#centos7-mini" class="headerlink" title="centos7-mini"></a>centos7-mini</h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><ul><li>系统为 CentOS-7-x86_64-Minimal-2009.iso</li></ul><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li><code>ifconfig</code>: <code>yum install net-tools</code></li></ul><h2 id="非-root-每次执行需要输入-sudo"><a href="#非-root-每次执行需要输入-sudo" class="headerlink" title="非 root 每次执行需要输入 sudo"></a>非 root 每次执行需要输入 sudo</h2><ul><li><p>修改 <code>/etc/sudoers</code>，加入以下内容，god 是用户名 &#x3D;&gt; root 用户改了，没生效，但是 god 用户改了，生效？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">god     ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure></li></ul><h2 id="ip-addr-无-ipv4-地址"><a href="#ip-addr-无-ipv4-地址" class="headerlink" title="ip addr 无 ipv4 地址"></a>ip addr 无 ipv4 地址</h2><ul><li>修改 <code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>，将 <code>ONBOOT NO</code> 修改为 <code>NOBOOT YES</code>，重启虚拟机后，即有 ipv4 地址</li><li>具体修改文件，以显示的网卡为准，不一定为 <code>ifcfg-ens33</code></li><li>参考 <a href="https://blog.csdn.net/weixin_75148789/article/details/140223099">centos7的yum命令无法使用解决方法</a></li></ul><h2 id="无法使用-yum-安装"><a href="#无法使用-yum-安装" class="headerlink" title="无法使用 yum 安装"></a>无法使用 yum 安装</h2><ul><li><p>报错如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock error was</span><br><span class="line">14: curl#6 - &quot;Could not resolve host: mirrorlist.centos.org; Unknown error&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> One of the configured repositories failed (Unknown),</span><br><span class="line"> and yum doesn&#x27;t have enough cached data to continue. At this point the only</span><br><span class="line"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="line"></span><br><span class="line">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="line"></span><br><span class="line">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="line">        upstream. This is most often useful if you are using a newer</span><br><span class="line">        distribution release than is supported by the repository (and the</span><br><span class="line">        packages for the previous distribution release still work).</span><br><span class="line"></span><br><span class="line">     3. Run the command with the repository temporarily disabled</span><br><span class="line">            yum --disablerepo=&lt;repoid&gt; ...</span><br><span class="line"></span><br><span class="line">     4. Disable the repository permanently, so yum won&#x27;t use it by default. Yum</span><br><span class="line">        will then just ignore the repository until you permanently enable it</span><br><span class="line">        again or use --enablerepo for temporary usage:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --disable &lt;repoid&gt;</span><br><span class="line">        or</span><br><span class="line">            subscription-manager repos --disable=&lt;repoid&gt;</span><br><span class="line"></span><br><span class="line">     5. Configure the failing repository to be skipped, if it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">        compromise:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --save --setopt=&lt;repoid&gt;.skip_if_unavailable=true</span><br><span class="line"></span><br><span class="line">Cannot find a valid baseurl for repo: base/7/x86_64</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>/etc/yum.repos.d/CentOS-Base.repo</code>，配置为国内源（快捷替换为 aliyun 源: <code>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[base]  </span><br><span class="line">name=CentOS-$releasever - Base  </span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/  </span><br><span class="line">        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/$basearch/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">released updates</span>   </span><br><span class="line">[updates]  </span><br><span class="line">name=CentOS-$releasever - Updates  </span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/  </span><br><span class="line">        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/updates/$basearch/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">additional packages that may be useful</span>  </span><br><span class="line">[extras]  </span><br><span class="line">name=CentOS-$releasever - Extras  </span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/  </span><br><span class="line">        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">additional packages that extend functionality of existing packages</span>  </span><br><span class="line">[centosplus]  </span><br><span class="line">name=CentOS-$releasever - Plus  </span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/  </span><br><span class="line">        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=0  </span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">contrib - packages by Centos Users</span>  </span><br><span class="line">[contrib]  </span><br><span class="line">name=CentOS-$releasever - Contrib  </span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/  </span><br><span class="line">        http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/contrib/$basearch/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=0  </span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用failovermethod指定优先级，这里设置为随机（roundrobin），也可以改为priority并指定每个URL的优先级</span>  </span><br><span class="line">failovermethod=roundrobin</span><br></pre></td></tr></table></figure></li><li><p>配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> troubleshoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> troubleshoot - vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【k8s】02-快速入门</title>
      <link href="/cloud/k8s-02-quickly-start/"/>
      <url>/cloud/k8s-02-quickly-start/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文旨在利用简单的 web-db 服务，串接 k8s 相关知识</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>本文采用 <a href="https://kind.sigs.k8s.io/">kind</a> 搭建测试 k8s 集群</p><blockquote><p>kind 部署 kubernetes 群集相当方便，可以快速部署多个群集。但在群集的配置和更新上有明显弊端，<strong>只能通过重新创建群集来配置和更新群集</strong>。所以在初始化群集的时候需要考虑好配置选项。当然我们只是用于测试环境，也无大碍</p></blockquote></li><li><p>采用 VMware® Workstation 17 Pro 及 <del>CentOS-7-x86_64-Minimal-2009</del> AlmaLinux-9.4-x86_64-minimal （centos7 坑有点多，并且不再维护，所以后续使用 almalinux） 作为基础环境</p></li></ul><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><ol><li><p>采用最简单的方式，下载编译后的二进制包，可见 <a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installing-from-release-binaries">Installing From Release Binaries</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ $(uname -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64</span><br><span class="line">chmod +x ./kind</span><br><span class="line">sudo mv ./kind /usr/bin/kind</span><br></pre></td></tr></table></figure></li><li><p>安装 docker</p><ol><li><p>在 <code>/etc/yum.repo.d</code> 中新增 docker 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -o /etc/yum.repo.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装: <code>sudo yum install docker-ce-24.0.7</code></p></li><li><p>配置 docker mirror，修改 <code>/etc/docker/daemon.json</code>，加入以下，参考 <a href="https://www.bilibili.com/read/cv35624216/?jump_opus=1">零门槛最简单国内访问Docker Hub的替代方案</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://huecker.io&quot;,</span><br><span class="line">        &quot;https://dockerhub.timeweb.cloud&quot;,</span><br><span class="line">        &quot;https://noohub.ru&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li></ol></li><li><p>安装 kubectl，可见 <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/">Install and Set Up kubectl on Linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span><br><span class="line">sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure></li><li><p>搭建测试集群：<code>kind create cluster --config kind-example-config.yaml --name example</code>，如果失败，重试即可（失败可能是虚拟机资源不够）</p><ul><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this config file contains all config fields with comments</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NOTE: this is not a particularly useful config file</span></span><br><span class="line">kind: Cluster</span><br><span class="line">apiVersion: kind.x-k8s.io/v1alpha4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">patch the generated kubeadm config with some extra settings</span></span><br><span class="line">kubeadmConfigPatches:</span><br><span class="line">- |</span><br><span class="line">  apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">  kind: KubeletConfiguration</span><br><span class="line">  evictionHard:</span><br><span class="line">    nodefs.available: &quot;0%&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">patch it further using a JSON 6902 patch</span></span><br><span class="line">kubeadmConfigPatchesJSON6902:</span><br><span class="line">- group: kubeadm.k8s.io</span><br><span class="line">  version: v1beta2</span><br><span class="line">  kind: ClusterConfiguration</span><br><span class="line">  patch: |</span><br><span class="line">    - op: add</span><br><span class="line">      path: /apiServer/certSANs/-</span><br><span class="line">      value: my-hostname</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1 control plane node and 3 workers</span></span><br><span class="line">nodes:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the control plane node config</span></span><br><span class="line">- role: control-plane</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the three workers</span></span><br><span class="line">- role: worker</span><br><span class="line">- role: worker</span><br><span class="line">- role: worker</span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240721181705648.png" alt="image-20240721181705648"></p></li><li><p>切换为该集群，并查看 node 信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info --context kind-example</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240721180936929.png" alt="image-20240721180936929"></p></li></ul></li></ol><h1 id="web-db"><a href="#web-db" class="headerlink" title="web-db"></a>web-db</h1><h2 id="版本1——Pod"><a href="#版本1——Pod" class="headerlink" title="版本1——Pod"></a>版本1——Pod</h2><ul><li><p>由于本文的目的是搭建一个带有 DB 的 web，因此简易版本需要两个镜像 <code>nginx:latest</code> 和 <code>mysql:latest</code></p></li><li><p>由于 kind 不推荐使用 latest 标签（可见 [pod 报错 ErrImagePull 或 ImagePullBackOff](##pod 报错 ErrImagePull 或 ImagePullBackOff)），因此使用以下重命名 tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest nginx:v1.27.0</span><br><span class="line">docker tag mysql:latest mysql:v9.0.1</span><br></pre></td></tr></table></figure></li><li><p>由于 kind 特性，需要将 image 加载到 cluster 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind load docker-image nginx:v1.27.0 mysql:v9.0.1 --name example1</span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240727190751229.png" alt="image-20240727190751229"></p></li><li><p>可以通过 <code>docker exec -it example-worker crictl images</code> 查看某个 node 已加载的 image 信息</p><p><img src="/cloud/k8s-02-quickly-start/image-20240727190342358.png" alt="image-20240727190342358"></p></li><li><p>编辑文件<code>webapp-with-db-pod.yaml</code> 并执行: <code>kubectl apply -f webapp-with-db-pod.yaml</code>，即可生成一个 pod，其中含有两个 container</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240727190833304.png" alt="image-20240727190833304"></p></li><li><p>通过 <code>kubectl get pods</code> 可查看 pod 状态，<code>kubectl get pods -o yaml</code> 查看更详细信息。<font color="red">一段时间后，发现 pod 状态异常</font>，通过以下指令一步步定位问题</p><p><img src="/cloud/k8s-02-quickly-start/image-20240727213828657.png" alt="image-20240727213828657"></p><ol><li><p>通过 <code>kubectl get pods -o yaml</code> 查看更多的信息，没有发现根本原因</p><p><img src="/cloud/k8s-02-quickly-start/image-20240727213903969.png" alt="image-20240727213903969"></p></li><li><p>查看 event: <code>kubectl get events -o yaml</code>，也没有发现更多信息</p><p><img src="/cloud/k8s-02-quickly-start/image-20240727214304441.png" alt="image-20240727214304441"></p></li><li><p>查看 pod 中 database 容器日志：<code>kubectl logs webapp-with-db -c database</code>。</p><ol><li><p><font color="red">可以发现，MySQL 需要以下环境变量才可以正常启动</font></p><p><img src="/cloud/k8s-02-quickly-start/image-20240727214359820.png" alt="image-20240727214359820"></p></li><li><p>临时解决办法是使用以下 yaml 重新 apply，注意 value 需要使用 string（需删除之前的 pod）。<font color="red">后续版本有更安全的方式</font></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>如果不删除之前的 pod，报错如下</p><p><img src="/cloud/k8s-02-quickly-start/image-20240727215051128.png" alt="image-20240727215051128"></p></li></ol></li></ol></li></ul><h2 id="版本2——Service（集群内服务提供）"><a href="#版本2——Service（集群内服务提供）" class="headerlink" title="版本2——Service（集群内服务提供）"></a>版本2——Service（集群内服务提供）</h2><ul><li><p>版本1已经成功生成了一个 pod，但是<strong>外界无法访问该服务</strong>，因此引入 k8s 中 <code>service</code> 概念，将 Pod 提供的服务暴露给集群内部</p><blockquote><p>It allows you to expose your application to other pods within the cluster or to external clients. Services provide load balancing and automatic scaling for the pods behind them, ensuring that the application remains highly available.</p></blockquote></li><li><p>更新 yaml 为以下内容，重新执行 <code>kubectl apply -f webapp-with-db-pod.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240727220711554.png" alt="image-20240727220711554"></p></li><li><p>与上个版本 diff 如下</p></li><li><p><strong>此时服务只在集群中可被访问</strong>，重新起一个 pod 用于测试连通性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">db-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure><ol><li><p>通过 <code> kubectl get services</code> 拿到 webapp-service 的 cluster ip</p><p><img src="/cloud/k8s-02-quickly-start/image-20240727223706053.png" alt="image-20240727223706053"></p></li><li><p>进入新 pod，测试服务连通性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">kubectl exec -it db-test -- bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以通过 curl http://webapp-service 测试</span></span><br><span class="line">curl http://IP:80</span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240727224711219.png" alt="image-20240727224711219"></p></li></ol></li></ul><h2 id="版本3——Service（集群外服务提供）"><a href="#版本3——Service（集群外服务提供）" class="headerlink" title="版本3——Service（集群外服务提供）"></a>版本3——Service（集群外服务提供）</h2><h3 id="nodeport"><a href="#nodeport" class="headerlink" title="nodeport"></a>nodeport</h3><ul><li><p>版本2 已经提供了一个集群内可供访问的服务，但是<strong>集群外无法访问服务</strong>，可以通过 nodeport 的方式对外提供服务</p></li><li><p>更新 yaml 为以下内容，重新执行 <code>kubectl apply -f webapp-with-db-pod.yaml</code>。其中 IP 为 pod 所在 node IP（任意一个即可），可以通过 <code> kubectl get nodes -o wide</code> 查看 nodeip，即 INTERNAL-IP</p><blockquote><p>在 Kubernetes 中，当你使用 <code>NodePort</code> 类型的 Service 时，这个 Service 将会在集群中的每个节点上监听一个相同的端口，并将流量转发到对应的 Pod。这就是为什么你可以通过任意一个节点的 IP 地址和指定的 NodePort 访问到服务，即使 Pod 并不在所有节点上。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240728102216756.png" alt="image-20240728102216756"></p></li><li><p>与上个版本 diff 如下</p></li><li><p>nodeport 和 targetport 区别</p><ul><li><strong>NodePort</strong>：<ul><li>用于在集群外暴露 Service</li><li>在每个节点上打开一个固定的端口，用于接收外部流量</li><li>外部客户端可以通过节点的 IP 地址和 NodePort 访问 Service</li></ul></li><li><strong>targetPort</strong>：<ul><li>用于定义 Service 转发流量到 Pod 的哪个端口</li><li>是 Pod 内容器暴露的端口</li><li>定义了 Service 如何将流量路由到 Pod 内容器</li></ul></li></ul></li></ul><h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><ul><li><p>ingress 是另一种暴露服务的方式，与 nodeport 区别如下</p><ul><li><strong>Ingress</strong> 是一种高级的资源，用于在集群外部暴露服务，支持主机和路径匹配、TLS 终止等功能，需要配合 Ingress Controller 使用。</li><li><strong>NodePort</strong> 是一种简单的方式，将服务暴露到所有节点上的一个固定端口，可以通过节点的 IP 地址和指定的端口访问服务，无需额外的 Ingress Controller</li></ul></li><li><p>具体实现后续再做，可参考</p><ul><li><a href="https://kind.sigs.k8s.io/docs/user/ingress/">Ingress</a></li><li><a href="https://juejin.cn/post/7353543714152087591">KIND安装本地K8S集群并通过Ingress访问Pod</a></li><li><a href="https://www.infoq.cn/article/vl7SZGQc2JUaM6IisAhE">入门级实操教程！从概念到部署，全方位了解 K8S Ingress！</a></li></ul></li></ul><h2 id="版本4——ConfigMap"><a href="#版本4——ConfigMap" class="headerlink" title="版本4——ConfigMap"></a>版本4——ConfigMap</h2><ul><li><p>版本3 已经成功将 Pod 中的服务提供给外部访问，但是如果需要更新 pod 中配置文件或者环境变量，应该怎么做？</p></li><li><p>k8s 提供了 <code>ConfigMap</code> 的概念，<strong>用于存储配置文件信息</strong></p><blockquote><p>A Kubernetes <code>ConfigMap</code> is used to store configuration data that can be consumed by pods as environment variables or mounted as configuration files. It helps separate the configuration from the container image, making it easier to update configurations without rebuilding the container.</p></blockquote></li><li><p>配置如下</p><ul><li><p>新增了 <code>ConfigMap</code> 配置 <code>webapp-config</code></p></li><li><p>webapp 通过 <code>envFrom </code>引用了 <code>webapp-config</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">WEBAPP_ENV:</span> <span class="string">&quot;production&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>直接修改后 apply 报错如下 &#x3D;&gt; 解决：删除现有 pod，重新 apply（如果是 deployment 或者 replicaset 只需要删除，k8s 会自动重建）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">service/webapp-service unchanged</span><br><span class="line">configmap/webapp-config created</span><br><span class="line">The Pod &quot;webapp-with-db&quot; is invalid: spec: Forbidden: pod updates may not change fields other than `spec.containers[*].image`,`spec.initContainers[*].image`,`spec.activeDeadlineSeconds`,`spec.tolerations` (only additions to existing tolerations),`spec.terminationGracePeriodSeconds` (allow it to be set to 1 if it was previously negative)</span><br><span class="line">  core.PodSpec&#123;</span><br><span class="line">        Volumes:        &#123;&#123;Name: &quot;kube-api-access-85btk&quot;, VolumeSource: &#123;Projected: &amp;&#123;Sources: &#123;&#123;ServiceAccountToken: &amp;&#123;ExpirationSeconds: 3607, Path: &quot;token&quot;&#125;&#125;, &#123;ConfigMap: &amp;&#123;LocalObjectReference: &#123;Name: &quot;kube-root-ca.crt&quot;&#125;, Items: &#123;&#123;Key: &quot;ca.crt&quot;, Path: &quot;ca.crt&quot;&#125;&#125;&#125;&#125;, &#123;DownwardAPI: &amp;&#123;Items: &#123;&#123;Path: &quot;namespace&quot;, FieldRef: &amp;&#123;APIVersion: &quot;v1&quot;, FieldPath: &quot;metadata.namespace&quot;&#125;&#125;&#125;&#125;&#125;&#125;, DefaultMode: &amp;420&#125;&#125;&#125;&#125;,</span><br><span class="line">        InitContainers: nil,</span><br><span class="line">        Containers: []core.Container&#123;</span><br><span class="line">                &#123;</span><br><span class="line">                        ... // 4 identical fields</span><br><span class="line">                        WorkingDir: &quot;&quot;,</span><br><span class="line">                        Ports:      &#123;&#123;ContainerPort: 80, Protocol: &quot;TCP&quot;&#125;&#125;,</span><br><span class="line">-                       EnvFrom:    nil,</span><br><span class="line">+                       EnvFrom: []core.EnvFromSource&#123;</span><br><span class="line">+                               &#123;</span><br><span class="line">+                                       ConfigMapRef: &amp;core.ConfigMapEnvSource&#123;LocalObjectReference: core.LocalObjectReference&#123;...&#125;&#125;,</span><br><span class="line">+                               &#125;,</span><br><span class="line">+                       &#125;,</span><br><span class="line">                        Env:       nil,</span><br><span class="line">                        Resources: &#123;&#125;,</span><br><span class="line">                        ... // 15 identical fields</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;Name: &quot;database&quot;, Image: &quot;mysql:v9.0.1&quot;, Env: &#123;&#123;Name: &quot;MYSQL_ROOT_PASSWORD&quot;, Value: &quot;123&quot;&#125;&#125;, VolumeMounts: &#123;&#123;Name: &quot;kube-api-access-85btk&quot;, ReadOnly: true, MountPath: &quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;&#125;&#125;, ...&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        EphemeralContainers: nil,</span><br><span class="line">        RestartPolicy:       &quot;Always&quot;,</span><br><span class="line">        ... // 28 identical fields</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>原因：向已经运行的 Pod 添加 ConfigMap 是不支持的。ConfigMap 是 Kubernetes 中用于存储非敏感数据的对象，用于配置应用程序、存储环境变量等。<strong>当一个 Pod 创建时，它会使用 ConfigMap 中的数据或者环境变量，但是一旦 Pod 已经创建并且在运行中，就不能直接修改它的配置或环境变量</strong></li><li>如果你需要在一个正在运行的 Pod 中更新配置，你有几种选择：<ol><li><strong>重新启动 Pod</strong>：<ul><li>最简单的方法是重新启动 Pod。你可以更新 Pod 配置文件，将新的 ConfigMap 引入到 Pod 的配置中，然后删除现有的 Pod，Kubernetes 会自动创建一个新的 Pod，并使用更新后的配置。</li></ul></li><li><strong>使用 Sidecar 容器</strong>：<ul><li>你可以在需要更新配置的 Pod 中添加一个 Sidecar 容器，这个 Sidecar 容器负责监视 ConfigMap 的变化，并将更新后的配置传递给主要的应用程序容器。</li></ul></li><li><strong>使用 Init 容器</strong>：<ul><li>另一种方法是使用 Init 容器。你可以在 Pod 中添加一个 Init 容器，这个容器可以在主要应用程序容器启动之前获取最新的配置，并将其传递给主要应用程序容器。</li></ul></li><li><strong>使用动态配置</strong>：<ul><li>一些应用程序支持动态地重新加载配置，而不需要重新启动。如果你的应用程序支持动态配置加载，你可以更新 ConfigMap，然后通知应用程序重新加载配置。</li></ul></li></ol></li></ul></li></ul></li><li><p>通过 <code>kubectl exec -it webapp-with-db -c webapp -- bash</code> 查看 env 可以发现多了一个环境变量</p><p><img src="/cloud/k8s-02-quickly-start/image-20240728120149792.png" alt="image-20240728120149792"></p></li><li><p>如果此时修改 WEBAPP_ENV 的值，通过 <code>kubectl describe configmap webapp-config</code> 可以发现值已经变量，<font color="color">但是再次进入容器内，可以发现值没有发生变化</font>，是因为 在 Kubernetes 中，Pod 中使用 ConfigMap 设置的环境变量<strong>通常需要 Pod 重启才能加载新的值</strong>。这是因为当 Pod 启动时，它会获取 ConfigMap 中的值并将其转换为环境变量。<strong>如果在运行时更新了 ConfigMap 中的数据，Pod 中的容器并不会自动获取到这些更新后的值，除非 Pod 重新启动</strong></p></li><li><p>如果希望不重启修改能生效，可以采用以下方案</p><ul><li><strong>使用 Sidecar 容器</strong>：添加一个 Sidecar 容器，这个容器可以监视 ConfigMap 的变化并更新主要应用程序容器的环境变量。</li><li><strong>使用 Init 容器</strong>：引入一个 Init 容器，它可以在主要应用程序容器启动之前获取最新的配置，并将其传递给主要应用程序容器。</li><li><strong>应用程序支持动态更新</strong>：有些应用程序支持动态地重新加载配置，可以在配置发生变化时主动更新环境变量，而不需要重启应用程序</li></ul></li></ul><h2 id="版本5——Secret"><a href="#版本5——Secret" class="headerlink" title="版本5——Secret"></a>版本5——Secret</h2><ul><li><p>版本4 已经能够满足配置文件的存储需要了，但是敏感信息直接使用 ConfigMap 安全性不够</p></li><li><p>k8s 提供了 <code>Secret</code> 的概念，<strong>用于存储敏感信息</strong></p><blockquote><p>Kubernetes <code>Secrets</code> are used to store sensitive information, such as passwords, API keys, or TLS certificates. Secrets are base64-encoded by default and can be mounted as files or used as environment variables in pods.</p></blockquote></li><li><p>将 MYSQL_ROOT_PASSWORD 放入 secret，其中 yaml 中填写的值是 base64 处理后的结果，<code>type: Opaque</code> 表示 Secret 中的数据是一个字典，其中包含了任意类型的键值对数据。这意味着在 Opaque Secret 中，可以存储任何类型的数据，例如密码、证书、Token 等，而这些数据以 base64 编码的形式存储在 Secret 对象中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">WEBAPP_ENV:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIz</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="版本6——Volume"><a href="#版本6——Volume" class="headerlink" title="版本6——Volume"></a>版本6——Volume</h2><ul><li><p>以上版本，实现了配置文件和敏感信息的写入，但是对于 DB <strong>数据的持久化还没有实现</strong>，并且<strong>Pod 中不同容器间也无法共享数据</strong></p></li><li><p>k8s 提供了 <code>Volume</code> 的概念，<strong>用于存储数据持久化和数据共享</strong></p><blockquote><p>A Kubernetes <code>Volume</code> is a directory that is accessible to all containers in a pod. It decouples the storage from the containers, ensuring that data persists even if a container is restarted or rescheduled.</p></blockquote></li><li><p>以下使用 <code>PersistentVolumeClaim</code> 用于请求持久存储资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-with-db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-data</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">database-pvc</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">WEBAPP_ENV:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIz</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">database-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Mi</span></span><br></pre></td></tr></table></figure></li><li><p>可以通过 <code>kubectl get pvc</code> 查看 PVC 的状态</p><p><img src="/cloud/k8s-02-quickly-start/image-20240728145240123.png" alt="image-20240728145240123"></p></li><li><p>可以通过以下方式验证 PVC 的有效性</p><ol><li><p>生成 pod，进入 database，创建数据库和数据表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f webapp-with-db-pod.yaml</span><br><span class="line"></span><br><span class="line">create database hello;</span><br><span class="line">use hello;</span><br><span class="line">CREATE TABLE students (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    age INT,</span><br><span class="line">    gender ENUM(&#x27;Male&#x27;, &#x27;Female&#x27;, &#x27;Other&#x27;),</span><br><span class="line">    grade FLOAT</span><br><span class="line">);</span><br><span class="line">INSERT INTO students (name, age, gender, grade) VALUES</span><br><span class="line">(&#x27;Alice&#x27;, 20, &#x27;Female&#x27;, 85.5),</span><br><span class="line">(&#x27;Bob&#x27;, 22, &#x27;Male&#x27;, 78.3),</span><br><span class="line">(&#x27;Charlie&#x27;, 21, &#x27;Male&#x27;, 92.0);</span><br></pre></td></tr></table></figure></li><li><p>销毁 pod: <code>kubectl delete po webapp-with-db</code></p></li><li><p>重新生成 pod，进入 database，查看数据是否存在</p></li></ol></li></ul><h2 id="版本7——deployment"><a href="#版本7——deployment" class="headerlink" title="版本7——deployment"></a>版本7——deployment</h2><ul><li><p>上述版本已经较好的实现了一个服务从启动、对外提供服务、配置信息和敏感信息存储，已经数据持久化工作。但是<strong>当 pod 异常退出时，目前没有自愈能力，包括流量变化时，也没有扩缩容能力</strong></p></li><li><p>k8s 提供了 <code>Deployment</code> 的概念，<strong>用于无状态应用的生命周期管理</strong></p><blockquote><p>A Kubernetes <code>Deployment</code> is a higher-level abstraction that manages a set of identical pods. It’s ideal for stateless applications where individual pods are interchangeable. Deployments provide features like rolling updates, rollback, and scaling, making them suitable for web servers, APIs, and microservices.</p></blockquote></li><li><p>配置如下</p><ul><li><strong>replicas: 3</strong>：指定了部署的 Pod 副本数量为 3</li><li><strong>selector</strong>:  定义了用于选择哪些 Pod 属于这个 Deployment 的标签选择器</li><li><strong>template labels: app: my-webapp</strong>：为新创建的 Pod 添加了标签，用于匹配选择器</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">envFrom:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">secretKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">database-pvc</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">WEBAPP_ENV:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIz</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">database-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Mi</span></span><br></pre></td></tr></table></figure></li><li><p>apiVersion: apps&#x2F;v1 和 apiVersion: v1 区别</p><ul><li><strong>apiVersion: apps&#x2F;v1</strong>：<ul><li><code>apps/v1</code> 是 Kubernetes 中用于管理应用程序工作负载的 API 版本。</li><li>在 <code>apps/v1</code> 版本中，包含了 <code>Deployment</code>、<code>DaemonSet</code>、<code>StatefulSet</code> 等控制器对象的定义。</li><li>通常用于创建部署、守护进程集、有状态集等应用程序控制器</li></ul></li><li><strong>apiVersion: v1</strong>：<ul><li><code>v1</code> 是 Kubernetes 中核心 API 对象的稳定版本。</li><li>在 <code>v1</code> 版本中，包含了核心对象如 <code>Pod</code>、<code>Service</code>、<code>Namespace</code>、<code>ConfigMap</code>、<code>Secret</code> 等的定义。</li><li>用于创建核心资源对象，如 Pod、Service、ConfigMap 等</li></ul></li></ul></li><li><p>此时删除 pod，deployment 会自动再次生成 pod</p><p><img src="/cloud/k8s-02-quickly-start/image-20240728153759439.png" alt="image-20240728153759439"></p></li><li><p>如果需要彻底删除</p><ol><li>使用 <code>kubectl get deployments</code> 拿到 <code>&lt;deployment-name&gt;</code></li><li>彻底删除 <code>kubectl delete deployment &lt;deployment-name&gt;</code>，将触发 Kubernetes 控制器删除该 Deployment 中的所有 Pod，删除有时间间隔，可以通过 <code>kubectl get events</code> 查看</li></ol></li></ul><h2 id="版本8——StatefulSet"><a href="#版本8——StatefulSet" class="headerlink" title="版本8——StatefulSet"></a>版本8——StatefulSet</h2><ul><li><p>既然无状态应用有 deployment，那么像 DB 这样的有状态应用，也有对应的处理方式</p></li><li><p>k8s 提供了 <code>StatefulSet</code> 的概念，<strong>用于有状态应用的生命周期管理</strong></p><blockquote><p>On the other hand, a Kubernetes <code>StatefulSet</code> is used for stateful applications where each pod has a unique identity and persistent storage. StatefulSets provide stable network identities and are suitable for databases, key-value stores, and other applications that require unique persistent storage and ordered scaling.</p></blockquote></li><li><p>配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:v1.27.0</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">envFrom:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">database-statefulset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">database</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">database</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">database</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mysql:v9.0.1</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">secretKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">database-pvc</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">database-data</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">storage:</span> <span class="string">10Mi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">WEBAPP_ENV:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-credentials</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIz</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">database-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Mi</span></span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240728162254921.png" alt="image-20240728162254921"></p></li></ul><h1 id="k8s-error"><a href="#k8s-error" class="headerlink" title="k8s error"></a>k8s error</h1><h2 id="pod-报错-ErrImagePull-或-ImagePullBackOff"><a href="#pod-报错-ErrImagePull-或-ImagePullBackOff" class="headerlink" title="pod 报错 ErrImagePull 或 ImagePullBackOff"></a>pod 报错 ErrImagePull 或 ImagePullBackOff</h2><ul><li><p>通过 <code>kubectl describe pods [pod name]</code> 可查看详细信息，从 Events 可看到报错信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning  Failed     11m                   kubelet            Failed to pull image &quot;nginx:latest&quot;: failed to pull and unpack image &quot;docker.io/library/nginx:latest&quot;: failed to copy: httpReadSeeker: failed open: failed to do request: Get &quot;https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/a7/a72860cb95fd59e9c696c66441c64f18e66915fa26b249911e83c3854477ed9a/data?verify=1722076145-hCjnrHPwpwV1nad%2F30IHJ5M0EIE%3D&quot;: dial tcp 173.231.12.107:443: connect: connection refused</span><br></pre></td></tr></table></figure></li><li><p>可以看到 k8s 无法拉取镜像，是因为 kind 需要将 image 加载到 cluster 中（否则会去官网 pull 镜像），并且 kind 不建议使用 latest，因此使用指定 tag 加载进 cluster，可见 <a href="https://kind.sigs.k8s.io/docs/user/known-issues/#unable-to-pull-images">Unable to pull images</a></p><blockquote><p><strong>NOTE</strong>: The Kubernetes default pull policy is <code>IfNotPresent</code> unless the image tag is <code>:latest</code> or omitted (and implicitly <code>:latest</code>) in which case the default policy is <code>Always</code>. <code>IfNotPresent</code> causes the Kubelet to skip pulling an image if it already exists. If you want those images loaded into node to work as expected, please:</p><ul><li>don’t use a <code>:latest</code> tag</li></ul><p>and &#x2F; or:</p><ul><li>specify <code>imagePullPolicy: IfNotPresent</code> or <code>imagePullPolicy: Never</code> on your container(s).</li></ul><p>See <a href="https://kubernetes.io/docs/concepts/containers/images/#updating-images">Kubernetes imagePullPolicy</a> for more information.</p></blockquote></li><li><p>将镜像加载到 cluster: <code>kind load docker-image nginx:v1.27.0 mongo:v7.0.12 --name example1</code></p></li><li><p>查看指定 node 已有的 image: <code>docker exec -it my-node-name crictl images</code></p><blockquote><p>Where <code>my-node-name</code> is the name of the Docker container (e.g. <code>kind-control-plane</code>).</p></blockquote></li></ul><h1 id="k8s-常用操作"><a href="#k8s-常用操作" class="headerlink" title="k8s 常用操作"></a>k8s 常用操作</h1><ul><li>查看特定 node 上的 pod: <code>kubectl get pods --field-selector spec.nodeName=&lt;node-name&gt;</code></li></ul><h1 id="附-centos-安装错误"><a href="#附-centos-安装错误" class="headerlink" title="附 centos 安装错误"></a>附 centos 安装错误</h1><ol><li><p>kind create cluster 运行报错: <code>docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: cgroup namespaces aren&#39;t enabled in the kernel: unknown.</code></p><p><img src="/cloud/k8s-02-quickly-start/image-20240721155039042.png" alt="image-20240721155039042"></p><ul><li><p>尝试解决，无果，相关问题 <a href="https://github.com/kubernetes-sigs/kind/issues/3311">kind: v0.20.0 cannot create clusters on RHEL 7</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 检查内核配置, 如果输出中显示CONFIG_CGROUPS=n，则表示cgroup未启用</span></span><br><span class="line">sudo cat /boot/config-$(uname -r) | grep CONFIG_CGROUPS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改参数</span></span><br><span class="line">sudo vi /etc/default/grub</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果存在 在最后附加</span></span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 生效</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看引导方式</span></span><br><span class="line">grub-install --version</span><br><span class="line">grub2-install --version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于GRUB引导</span></span><br><span class="line">sudo update-grub</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于GRUB2引导</span></span><br><span class="line">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于Systemd-boot引导</span></span><br><span class="line">sudo bootctl update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 重启系统</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p><img src="/cloud/k8s-02-quickly-start/image-20240721155842722.png" alt="image-20240721155842722"></p></li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://kind.sigs.k8s.io/docs/user/quick-start/">https://kind.sigs.k8s.io/docs/user/quick-start/</a></li><li><a href="https://praveendandu24.medium.com/kubernetes-tutorial-for-beginners-mastering-the-basics-in-1-hour-332db7b5916b">Kubernetes Tutorial for Beginners: Mastering the Basics in 1 Hour</a></li><li><a href="https://www.bilibili.com/video/BV1uF411Q7hD/">Bilibili: kubernetes（k8s）教程</a></li><li><a href="https://cloud.theodo.com/en/blog/minikube-kubeadm-kind-k3s">Kubernetes technologies: Kubeadm vs MiniKube, Kind and K3S</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go】05-goroutine</title>
      <link href="/codeLang/Go-05-goroutine/"/>
      <url>/codeLang/Go-05-goroutine/</url>
      
        <content type="html"><![CDATA[<h1 id="goroutine-是什么"><a href="#goroutine-是什么" class="headerlink" title="goroutine 是什么"></a>goroutine 是什么</h1><ul><li>goroutine 是 Go 中并发执行逻辑的一种方式</li></ul><h1 id="goroutine-怎么用"><a href="#goroutine-怎么用" class="headerlink" title="goroutine 怎么用"></a>goroutine 怎么用</h1><h2 id="场景一-主进程中，并发执行两段逻辑"><a href="#场景一-主进程中，并发执行两段逻辑" class="headerlink" title="场景一: 主进程中，并发执行两段逻辑"></a>场景一: 主进程中，并发执行两段逻辑</h2><ul><li><p>使用 <code>go</code> 关键字，可以并发执行两个函数</p></li><li><p>需要使用 <code>sync.WaitGroup</code>，使主进程等待 goroutine 执行完毕</p></li><li><p>如下代码展示了，主进程中执行两个 goroutine 的情形，其中第一个 goroutine 使用 chan 捕获退出信号（优雅退出）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Println(<span class="string">&quot;first function start...&quot;</span>)</span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(quit, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)</span><br><span class="line">sig := &lt;-quit</span><br><span class="line">fmt.Println(sig)</span><br><span class="line">    <span class="comment">// ctxWeb := web.Shutdown()</span></span><br><span class="line"><span class="comment">// &lt;-ctxWeb.Done()</span></span><br><span class="line">fmt.Println(<span class="string">&quot;first function end...&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Println(<span class="string">&quot;second function start...&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;second function end...&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> goroutine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json Web Token (JWT)</title>
      <link href="/network/JWT-Json-Web-Token/"/>
      <url>/network/JWT-Json-Web-Token/</url>
      
        <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><ul><li><p>传统<strong>单体架构服务</strong>，比如 C&#x2F;S 架构，使用 cookie-session 的方式进行<strong>身份验证</strong>，流程如下所示</p><p><img src="/network/JWT-Json-Web-Token/image-20240502222446929.png" alt="image-20240502222446929"></p><center><a href="https://www.youtube.com/watch?v=7Q17ubqLfaM">（图片来源）</a></center><blockquote><p>HTTP&#x2F;HTTPS 协议本身是一种<strong>无状态的协议</strong>，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 HTTP&#x2F;HTTPS 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的<strong>基于session认证</strong></p><p>HTTPS（Hypertext Transfer Protocol Secure）是一种通过加密和认证保护数据传输的安全协议，它确保了客户端和服务器之间的通信的机密性和完整性。虽然HTTPS提供了<strong>数据传输的安全性</strong>，但它并不直接解决身份验证和授权的问题。</p><p>HTTPS主要解决的是以下两个问题：</p><ol><li>保证通信的机密性：HTTPS使用加密技术对通信进行加密，以防止第三方窃听和篡改数据。这确保了数据在传输过程中的安全性。</li><li>服务器身份认证：HTTPS使用SSL&#x2F;TLS证书来验证服务器的身份。客户端会检查服务器的证书，确保其合法性和可信度。这样客户端就能确保它正在与预期的服务器建立安全连接，而不是受到中间人攻击。</li></ol><p>虽然HTTPS提供了通信的安全性和服务器身份认证，但它并没有提供一种机制来进行用户身份验证和授权。用户身份验证通常需要在用户登录时验证其凭据（如用户名和密码），而授权涉及确定用户是否具有执行特定操作或访问特定资源的权限。</p></blockquote></li></ul><ul><li>这样做存在的问题是<ul><li>Server 端需要记录 session，当 Client 增多后，Server 端需要记录的信息变多，内存开销增多</li><li>不利于 Server 横向扩展，用户认证之后，服务端使用 session 保存认证信息，那么要取到认证信息，只能访问同一台服务器，才能拿到授权的资源。这样<strong>在分布式应用上，就需要实现session共享机制，不方便集群应用</strong></li><li>因为 session 是基于 cookie 来进行用户识别的，cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击</li></ul></li></ul><h1 id="Json-Web-Token"><a href="#Json-Web-Token" class="headerlink" title="Json Web Token"></a>Json Web Token</h1><h2 id="What-is"><a href="#What-is" class="headerlink" title="What is ?"></a>What is ?</h2><blockquote><p>JWT（JSON Web Token）是一种用于<strong>身份验证和授权</strong>的开放标准。它被设计用于在网络应用、移动应用和服务之间安全地传输声明。JWT 提供了一种紧凑且自包含的方式来传输信息，这些信息被称为声明（claims）。JWT 通常由三个部分组成：<strong>头部（Header）、载荷（Payload）和签名（Signature）</strong>。</p><p>JWT 的主要目的是解决身份验证和授权的问题。在传统的身份验证方式中，服务器需要在每个请求中验证用户的身份，这通常需要查询数据库或其他存储系统。这种方式会增加服务器的负载和响应时间，并且不适合分布式系统。JWT 的出现解决了这些问题，它将用户的身份信息编码为一个安全的令牌，并在每个请求中将该令牌传递给服务器。服务器只需验证令牌的有效性，而无需查询数据库，从而提高了系统的性能和可扩展性。</p></blockquote><p><img src="/network/JWT-Json-Web-Token/jwt-arch.webp" alt="image-20240505152255437"></p><center><a href="https://arielweinberger.medium.com/json-web-token-jwt-the-only-explanation-youll-ever-need-cf53f0822f50">（图片来源）</a></center><h2 id="How-works"><a href="#How-works" class="headerlink" title="How works"></a>How works</h2><p>JWT 的工作原理如下：</p><ol><li>用户登录时，服务器验证用户的身份信息，并生成一个 JWT。</li><li>服务器将 JWT 发送给客户端，客户端通常将其存储在本地，如浏览器的 localStorage 或移动应用的本地存储。</li><li>客户端在后续的请求中将 JWT 包含在请求的头部或其他位置中发送给服务器。</li><li>服务器在接收到请求时，解析 JWT 并验证其签名，以确保令牌的完整性和真实性。</li><li>服务器可以使用 JWT 中的声明信息来验证用户的身份和权限，并根据需要进行授权操作。</li></ol><p><img src="/network/JWT-Json-Web-Token/image-20240505152255437.png" alt="image-20240505152255437"></p><center><a href="https://www.youtube.com/watch?v=7Q17ubqLfaM">（图片来源）</a></center><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul><li><a href="https://jwt.io/introduction">https://jwt.io/introduction</a></li><li><a href="https://www.youtube.com/watch?v=7Q17ubqLfaM">yt: What Is JWT and Why Should You Use JWT</a></li><li><a href="https://blog.csdn.net/as15282235592/article/details/126694874">什么是JWT？？</a></li><li><a href="https://blog.angular-university.io/angular-jwt/">JWT: The Complete Guide to JSON Web Tokens</a></li><li><a href="https://www.youtube.com/watch?v=Y2H3DXDeS3Q">JWT Explained In Under 10 Minutes (JSON Web Tokens)</a>, <a href="https://arielweinberger.medium.com/json-web-token-jwt-the-only-explanation-youll-ever-need-cf53f0822f50">JSON Web Tokens (JWT) — the only explanation you will ever need</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT - Json Web Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象存储工具</title>
      <link href="/tools/The-tools-of-object-storage/"/>
      <url>/tools/The-tools-of-object-storage/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><p>目前使用过的 对象存储 有: <a href="https://aws.amazon.com/cn/s3/">Amazon S3</a>, <a href="https://www.aliyun.com/product/oss">阿里云对象存储 OSS</a> 及 <a href="https://docs.ceph.com/en/reef/">ceph</a>，其中 ceph 支持 S3- and Swift-compliant APIs</p></li><li><p>S3 使用 s3cmd</p></li><li><p>oss 使用 ossutil</p></li><li><p>ceph 使用 s3cmd, swift</p></li><li><p>下面介绍操作对象存储的工具</p></li></ul><h1 id="s3cmd"><a href="#s3cmd" class="headerlink" title="s3cmd"></a>s3cmd</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>下载，可见 <a href="https://github.com/s3tools/s3cmd">s3cmd</a></li><li>Mac: <code>brew install s3cmd</code></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>默认配置文件为 <code>~/.s3cfg</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>default<span class="punctuation">]</span></span><br><span class="line">access_key = AK</span><br><span class="line">secret_key = SK</span><br><span class="line">host_base = http<span class="punctuation">:</span><span class="comment">//ceph.abc.com</span></span><br><span class="line">host_bucket = abc</span><br><span class="line">use_https = False</span><br><span class="line">signature_v2 = True</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>查看 bucket 内容: <code>s3cmd ls s3://abc</code></li><li>查看 bucket 存储占用: <code>s3cmd du -H s3://abc</code></li><li>指定配置文件，并查看内容: <code>s3cmd -c ~/.s3cfg-hello ls s3://def</code></li></ul><h1 id="ossutil"><a href="#ossutil" class="headerlink" title="ossutil"></a>ossutil</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><ul><li>下载，可见 <a href="https://help.aliyun.com/zh/oss/developer-reference/overview-59">ossutil概述</a></li><li>Mac: <code>wget https://gosspublic.alicdn.com/ossutil/1.7.19/ossutil-v1.7.19-mac-arm64.zip</code>。下载特定版本，解压即可</li><li>Linux: <code>curl https://gosspublic.alicdn.com/ossutil/install.sh | sudo bash</code>，安装完成后，ossutil会安装到 <code>/usr/bin/</code> 目录下</li></ul><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><ul><li><code>ossutil config</code> 或在 <code>~/.ossutilconfig</code> 中手动配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span>Credentials<span class="punctuation">]</span></span><br><span class="line">language=CH</span><br><span class="line">accessKeyID = AK</span><br><span class="line">accessKeySecret = SK</span><br><span class="line">endpoint = https<span class="punctuation">:</span><span class="comment">//oss-cn-shanghai.aliyuncs.com</span></span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><ul><li>查看 bucket 内容: <code>ossutil ls oss://abc</code></li></ul><h1 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><ul><li><code>pip install python-swiftclient</code></li></ul><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><ul><li><p>查看所有容器: <code>swift list</code></p></li><li><p>查看容器 abc 下的对象: <code>swift list abc</code></p></li><li><p>查看容器 abc 下的对象 hello.zip 信息: <code>swift stat abc hello.zip</code>，如果不存在，会返回 404 错误</p></li><li><p>删除容器 abc 下的对象 hello.zip: <code>swift delete abc hello.zip</code></p></li><li><p>在 Python 中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> swiftclient</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_swift</span>(<span class="params">container_name</span>):</span><br><span class="line">    auth_url = os.environ[<span class="string">&#x27;ST_AUTH&#x27;</span>]</span><br><span class="line">    auth_user = os.environ[<span class="string">&#x27;ST_USER&#x27;</span>]</span><br><span class="line">    auth_key = os.environ[<span class="string">&#x27;ST_KEY&#x27;</span>]</span><br><span class="line">    conn = swiftclient.Connection(authurl=auth_url, user=auth_user, key=auth_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_object_stat</span>(<span class="params">conn, container_name, object_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.head_object(container_name, object_name)</span><br><span class="line">        logging.info(<span class="string">&#x27;&#123;&#125; exists&#x27;</span>.<span class="built_in">format</span>(object_name))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&#x27;&#123;&#125; not exists, err: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(object_name, e))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_object</span>(<span class="params">conn, container_name, object_name</span>):</span><br><span class="line">    conn.delete_object(container_name, object_name)</span><br><span class="line">    logging.info(<span class="string">&#x27;&#123;&#125; deleted&#x27;</span>.<span class="built_in">format</span>(object_name))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> object storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Chrome 中使用 vim</title>
      <link href="/tools/The-trick-of-vimium/"/>
      <url>/tools/The-trick-of-vimium/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>基本使用与 vim 相同，可见 <a href="/tools/The-trick-of-vim/" title="vim使用说明">vim使用说明</a></li><li>安装后，快捷键优先级比网站自带命令高，比如 Github 全局搜索 <code>/</code>会被 vimium 占用</li><li>小写字母表示当前页面操作，大写字母表示打开新页面操作</li><li>官方文档可见 <a href="https://github.com/philc/vimium/blob/master/README.md">Vimium - The Hacker’s Browser</a></li></ul><h2 id="当前页面导航"><a href="#当前页面导航" class="headerlink" title="当前页面导航"></a>当前页面导航</h2><ul><li><code>?</code>: 显示命令</li><li><code>i</code>: 插入模式，使所有命令<strong>失效</strong>，<code>esc</code>后退出</li><li><code>/</code>: 页面内搜索</li><li><code>r</code>: 刷新页面</li><li><code>yy</code>: 粘贴当前页面 URL</li><li><code>p</code>: 在当前页面打开剪贴板 URL</li><li><code>P</code>：在新页面打开剪贴板 URL</li><li><code>gs</code>: 查看网页源代码</li><li><code>f</code>: 显示页面内链接快捷键，并在当前页面打开</li><li><code>F</code>: 显示页面内链接快捷键，并在新页面打开</li><li><code>t</code>: 创建新 tab</li></ul><h2 id="新页面导航"><a href="#新页面导航" class="headerlink" title="新页面导航"></a>新页面导航</h2><ul><li><code>o</code>:  当前页面打开 标签，书签及历史记录</li><li><code>O</code>: 新页面打开 标签，书签及历史记录</li><li><code>b</code>: 当前页面打开 书签</li><li><code>B</code>: 新页面打开 书签</li></ul><h2 id="标签页间操作"><a href="#标签页间操作" class="headerlink" title="标签页间操作"></a>标签页间操作</h2><ul><li><code>J</code>: 上一个 tab</li><li><code>K</code>: 下一个 tab</li><li><code>t</code>: 创建新 tab</li><li><code>x</code>: 关闭当前 tab</li><li><code>X</code>: 打开关闭的 tab</li><li><code>yt</code>: 复制当前 tab</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://github.com/philc/vimium/blob/master/README.md">https://github.com/philc/vimium/blob/master/README.md</a></p></li><li><p><a href="https://sspai.com/post/27723">让你用 Chrome 上网快到想哭：Vimium</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vimium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium 使用说明</title>
      <link href="/tools/The-trick-of-selenium/"/>
      <url>/tools/The-trick-of-selenium/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium-安装及使用"><a href="#selenium-安装及使用" class="headerlink" title="selenium 安装及使用"></a>selenium 安装及使用</h1><ol><li><p>Python 安装: <code>pip install selenium</code></p></li><li><p>Mac 安装 chromedrive: <code>brew install chromedriver</code>，此时本机 Chrome 版本为 <code>123.0.6312.107（正式版本） (arm64)</code></p><p><img src="/tools/The-trick-of-selenium/image-20240407171451713.png" alt="image-20240407171451713"></p></li><li><p>测试可用性，如果能打开浏览器并进入对应网页即为可用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line">dirver = webdriver.Chrome()</span><br><span class="line">dirver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        dirver.title</span><br><span class="line"><span class="keyword">except</span> WebDriverException:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows】docker 安装</title>
      <link href="/tutorial/Windows-install-docker-in-Windows/"/>
      <url>/tutorial/Windows-install-docker-in-Windows/</url>
      
        <content type="html"><![CDATA[<h1 id="指定路径安装"><a href="#指定路径安装" class="headerlink" title="指定路径安装"></a>指定路径安装</h1><ul><li><p>下载可执行文件后，cmd 执行以下命令，即可安装到<code>D:\Docker</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /w &quot;&quot; &quot;Docker Desktop Installer.exe&quot; install --installation-dir=D:\Docker\desktop --windows-containers-default-data-root=D:\Docker\container-root --wsl-default-data-root=D:\Docker\data-root</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.docker.com/desktop/install/windows-install/">Install Docker Desktop on Windows</a></li><li><a href="https://zhuanlan.zhihu.com/p/686882945">Windows平台安装docker指定安装路径</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 安装 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible 使用说明</title>
      <link href="/tools/The-trick-of-ansible/"/>
      <url>/tools/The-trick-of-ansible/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><p>Ansible 主要通过 ssh 来控制多台机器配置管理，部署应用等，工作流如下</p><p><img src="/tools/The-trick-of-ansible/image-20240406152402368.png" alt="image-20240406152402368"></p></li><li><p>Ansible 与 k8s 可见 <a href="https://www.simplilearn.com/ansible-vs-kubernetes-article">Ansible Vs. Kubernetes</a></p><ul><li>Ansible 没有状态的概念，只会根据设定的命令进行执行，直到完成或遇到错误退出</li><li>k8s 维护了不同 pod 的状态，有一整套管理机制</li></ul><blockquote><p>The differences between these two products are profound. Ansible is an IT automation tool that deploys software, configures systems, and organizes more complex IT functions such as <strong>rolling updates or continuous deployments</strong>. On the other hand, <strong>Kubernetes is a system designed to orchestrate Docker containers</strong>. It manages workloads and uses nodes to handle scheduling to make sure that their condition matches the users’ expectations.</p><p>In other words, Ansible deploys changes to hosts, while Kubernetes manages containers and keeps them working properly.</p><p>Ansible is an excellent useful tool for front-end developers, particularly in situations where some programming is required. Kubernetes is best suited to developing larger apps.</p><p>Based on the properties of both tools, it’s like comparing apples to oranges. Granted, they’re both DevOps tools that handle configuration management, but the purposes for which they’re used have minimal overlap.</p></blockquote></li><li><p>Ansible 与 salt 可见 <a href="https://www.redhat.com/en/topics/automation/ansible-vs-salt">Ansible vs. Salt: What you need to know</a> 及 <a href="https://cloudinfrastructureservices.co.uk/ansible-vs-salt-whats-the-difference/">Ansible vs Salt – What’s the Difference? (Pros and Cons)</a></p><ul><li>Ansible 是 agentless，只需要在 master 安装相应的工具即可。salt 是 agent-based</li><li>Ansible 只有一个 master。salt 可有多个，故障后自动换 master</li></ul></li><li><p>Ansible 基础概念可见 <a href="https://docs.ansible.com/ansible/latest/getting_started/basic_concepts.html">Ansible concepts</a></p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ol><li>master 与 slave 都需要安装 <code>openssh-server</code></li><li>master 与 slave 间配置了免密登录，可以设置两个 key，一个用于用户平常登录（可设置 passphrase），一个用户 Ansible 发布（不设置 passphrase），免密登录操作可见 <a href="/tools/The-trick-of-ssh/" title="ssh使用说明">ssh使用说明</a></li><li>测试容器可见: <a href="https://github.com/cv-programmer/ansible-learn">https://github.com/cv-programmer/ansible-learn</a></li></ol><h2 id="Ansible-安装"><a href="#Ansible-安装" class="headerlink" title="Ansible 安装"></a>Ansible 安装</h2><ul><li>master 机器: <code>pip install ansible</code>，或者使用包管理工具安装，如 Ubuntu 下可使用 <code>apt install ansible</code></li><li>slave 机器不需要操作</li></ul><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><ul><li><p>假设 master IP 为 172.28.0.2，并有两台 slave 机器，IP 分别为 172.28.0.3 和 172.28.0.4</p></li><li><p>设置的私钥为 <code>~/.ssh/ansible</code></p></li><li><p>编写 ansible inventory 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/ansible-example</span></span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></li><li><p>在 master 机器执行以下命令，即可<strong>测试连通性</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all --key-file ~/.ssh/ansible -i ~/ansible-example -m ping </span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240413161935052.png" alt="image-20240413161935052"></p></li><li><p>配置文件简化操作，通过在默认配置文件中设置，可以减少命令行输入，此时只需要输入 <code>ansible all -m ping</code> 即可，可以加上 <code>interpreter_python = /usr/bin/python3.11</code> 解决告警</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible.cfg</span></span><br><span class="line">[defaults]</span><br><span class="line">inventory = ansible-example</span><br><span class="line">private_key_file = ~/.ssh/ansible</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240413162950807.png" alt="image-20240413162950807"></p></li><li><p>安装 git，<code>ansible all -m tdnf name=git</code></p><p><img src="/tools/The-trick-of-ansible/image-20240413202639884.png" alt="image-20240413202639884"></p></li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>检查连通性: <code>ansible all -m ping</code></li><li>查看配置文件中的 slave: <code>ansible all --list-hosts</code></li><li>查看连接 slave信息: <code>ansible all -m gather_facts</code>，如果查看特定 host，后跟 <code>--limit [ip]</code></li><li>安装软件: <code>ansible all -m [package-manager] name=[software]</code>。其中<code>package-manager</code>是目标 Host 包管理工具，如果是 Ubuntu，则使用 <code>apt</code>，<code>Centos</code>使用 <code>yum</code>，<code>photon</code>使用<code>tdnf</code><ul><li>如果权限不足，需要加上<code>--become --ask-become-pass</code></li></ul></li></ul><h1 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h1><ul><li>使用 <code>yaml</code> 来定义一系列行为，简化操作成本</li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>如以下用来安装 <code>git</code>: <code>ansible-playbook playbook.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240413213323748.png" alt="image-20240413213323748"></p><ul><li><p>多次执行时，<font color="red">按理会变成 ignored &#x3D; 1</font>，但仍会出现 <code>changed = 1</code>，可通过以下方式来解决，即预先判断，再执行安装操作。可能原因如下，但暂未找到官方文档</p><blockquote><p>GPT: 当使用 Ansible 执行 tdnf 安装软件时，即使软件已经安装过，<code>changed</code> 值仍然可能显示为1。这是因为 tdnf 模块在每次运行时检查软件包的状态，并记录状态更改，而不考虑软件是否已经安装</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例运行，单软件包</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">if</span> <span class="string">package</span> <span class="string">is</span> <span class="string">installed</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">tdnf</span> <span class="string">info</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">package_check</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">failed_when:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">package_check.rc</span> <span class="type">!=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240414112450696.png" alt="image-20240414112450696"></p></li></ul></li><li><p>安装多个软件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">tmux</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">git</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br></pre></td></tr></table></figure><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">&#x27;VMware Photon OS&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>当 slave 存在多种架构的机器时，使用同一个模块安装软件不可行，此时使用 <code>when</code>来区分不同的 task &#x3D;&gt; <del><code>tdnf</code>不支持 <code>when</code></del>&#x3D;&gt; 缩进错了</p><p><img src="/tools/The-trick-of-ansible/image-20240414165032177.png" alt="image-20240414165032177"></p></li><li><p>缩进错误时，如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">git</span></span><br><span class="line">        <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">&#x27;VMware Photon OS&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240414153839631.png" alt="image-20240414153839631"></p></li><li><p>比如，slave 机器存在  centos 和 Ubuntu 时，<code>apt</code>只适用于 Ubuntu，Centos 则需要使用 yum。可参见 <a href="https://raymii.org/s/tutorials/Ansible_-_Only_if_on_specific_distribution_or_distribution_version.html">Ansible - Only do action if on specific distribution (Debian, Ubuntu, CentOS or RHEL) or distribution version (ubuntu precise, ubuntu trusty)</a></p><ul><li>系统版本可通过 <code>/etc/os-release</code>中 ID 确定</li><li>ansible_distribution 可通过 <code>ansible all -m gather_facts --limit 172.28.0.3 | grep ansible_distribution </code></li></ul></li></ul><h3 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h3><ul><li>将不同系统的安装都汇总到一个 task 中，简化操作（name 使用变量是因为不同系统的叫法不同，比如 apache2 和 httpd）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="comment"># package 根据系统自动选择, python3 好像需要指定管理工具，否则出现以下报错</span></span><br><span class="line"><span class="comment"># The Python 2 bindings for rpm are needed for this module. If you require Python 3 support use the `dnf` Ansible module instead.. The Python 2 yum module is needed for this module. If you require Python 3 support use the `dnf` Ansible module instead.&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; git_package &#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; tmux_package &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory 即 之前的 ansible-example</span></span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span> <span class="string">git_package=git</span> <span class="string">tmux_package=tmux</span></span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span> <span class="string">git_package=git</span> <span class="string">tmux_package=tmux</span></span><br></pre></td></tr></table></figure><h3 id="分组-inventory"><a href="#分组-inventory" class="headerlink" title="分组 inventory"></a>分组 inventory</h3><ul><li>根据不同的作用，可以将 slave 机器进行分组，便于后续的管理，比如 webserver, db 等</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="comment"># package 根据系统自动选择</span></span><br><span class="line"><span class="comment"># 如果需要前置任务，可用 pre_tasks</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">tmux</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">tmux</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory 即 之前的 ansible-example</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span>                  </span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240414195721790.png" alt="image-20240414195721790"></p><h3 id="标签化-tags"><a href="#标签化-tags" class="headerlink" title="标签化 tags"></a>标签化 tags</h3><ul><li>给 task 添加 tag，然后配合 <code>ansible-playbook --tags [tag]</code>，即可执行对于 tag 的任务，多个 tag 使用 <code>--tags &quot;aa,bb&quot;</code></li><li><code>ansible-playbook --list-tags</code> 可查看已配置的 tag</li><li><code>always</code> 为保留字，不指定时，也会执行</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">tmux</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">tmux</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span>                  </span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-ansible/image-20240414201753872.png" alt="image-20240414201753872"></p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="本地文件-copy"><a href="#本地文件-copy" class="headerlink" title="本地文件 copy"></a>本地文件 copy</h3><ul><li>通过 ansible 向 slave 下发文件，文件需要位于 <code>playbook.yml</code> 同级目录 <code>files</code>中（相对路径默认）&#x3D;&gt; <font color="red">实际是与 task 同级</font></li><li><code>dest</code> 末尾不带 <code>/</code>，即为复制过去后的名字，否则为路径</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">file</span> </span><br><span class="line">      <span class="attr">tags:</span> <span class="string">sometag</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">a.txt</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/root/hello</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">tmux</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">tmux</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span>                  </span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h3 id="网络文件-解压-unarchive"><a href="#网络文件-解压-unarchive" class="headerlink" title="网络文件 + 解压 unarchive"></a>网络文件 + 解压 unarchive</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">terraform</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">unarchive:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">https://releases.hashicorp.com/terraform/0.12.28/terraform_0.12.28_linux_amd64.zip</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/usr/local/bin</span></span><br><span class="line">        <span class="attr">remote_src:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span>                  </span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h3 id="服务管理-service"><a href="#服务管理-service" class="headerlink" title="服务管理 service"></a>服务管理 service</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span>                  </span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h3 id="文件内容修改-lineinfile"><a href="#文件内容修改-lineinfile" class="headerlink" title="文件内容修改 lineinfile"></a>文件内容修改 lineinfile</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">change</span> <span class="string">email</span> <span class="string">address</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/httpd/conf/httpd.conf</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">&#x27;^ServerAdmin&#x27;</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">ServerAdmin</span> <span class="string">abc@123.com</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">httpdsth</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">httpdsth.changed</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span>                  </span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="新增用户-user"><a href="#新增用户-user" class="headerlink" title="新增用户 user"></a>新增用户 user</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">foo</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">root</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h3 id="用户权限-authorized-key"><a href="#用户权限-authorized-key" class="headerlink" title="用户权限 authorized_key"></a>用户权限 authorized_key</h3><ul><li>photon 需手动安装 sudo: <code>tdnf install sudo</code></li><li>使用前需安装: <code>ansible-galaxy collection install ansible.posix</code>。见 <a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/authorized_key_module.html">ansible.posix.authorized_key module – Adds or removes an SSH authorized key</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">foo</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">ssh</span> <span class="string">key</span> <span class="string">for</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">authorized_key:</span></span><br><span class="line">        <span class="attr">user:</span> <span class="string">foo</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;[replace by public key]&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">sudoers</span> <span class="string">file</span> <span class="string">for</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">sudoer_foo</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/sudoers.d/foo</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0440</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">      <span class="attr">tdnf:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># files/sudoer_foo</span></span><br><span class="line"><span class="string">foo</span> <span class="string">ALL=(ALL)</span> <span class="attr">NOPASSWD:</span> <span class="string">ALL</span></span><br></pre></td></tr></table></figure><h2 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h2><ul><li><p>与 <code>files</code> 同级创建 <code>roles</code>文件夹</p></li><li><p><code>roles</code> 每个文件夹代表一个 role，里面定义每个 role 的 tasks，如 <code>roles/web_servers/tasks/*.yml</code> 代表 web_servers 所需要执行的任务</p></li><li><p>tree</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── inventory</span><br><span class="line">├── playbook.yml</span><br><span class="line">└── roles</span><br><span class="line">    ├── base</span><br><span class="line">    │   └── tasks</span><br><span class="line">    │       └── main.yml</span><br><span class="line">    ├── db_servers</span><br><span class="line">    │   └── tasks</span><br><span class="line">    │       └── main.yml</span><br><span class="line">    └── web_servers</span><br><span class="line">        ├── files</span><br><span class="line">        │   └── a.txt</span><br><span class="line">        └── tasks</span><br><span class="line">            └── main.yml</span><br></pre></td></tr></table></figure></li><li><p>配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># playbook.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">base</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web_servers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web_servers</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">db_servers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">db_servers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roles/base/tasks/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">tdnf:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roles/web_servers/tasks</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">core</span></span><br><span class="line">  <span class="attr">tdnf:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">file</span> </span><br><span class="line">  <span class="attr">tags:</span> <span class="string">sometag</span></span><br><span class="line">  <span class="attr">copy:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">a.txt</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/root/hello</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roles/db_servers/tasks</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">asdf</span></span><br><span class="line">  <span class="attr">tdnf:</span></span><br><span class="line">    <span class="attr">name:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inventory</span></span><br><span class="line">[<span class="string">web_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line">[<span class="string">db_servers</span>]</span><br><span class="line"><span class="number">172.28</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h2 id="host-variables-and-handlers"><a href="#host-variables-and-handlers" class="headerlink" title="host variables and handlers"></a>host variables and handlers</h2><h3 id="host-vars"><a href="#host-vars" class="headerlink" title="host_vars"></a>host_vars</h3><ul><li><p>用来存放 slave host 配置信息的文件，即 <code>inventory</code> 中 IP 中对应机器的特殊配置，如安装的包名等，本质就是 <a href="###%E5%8F%82%E6%95%B0%E5%8C%96">参数化</a></p></li><li><p>tree</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── host_vars</span><br><span class="line">│   ├── 172.28.0.3.yml</span><br><span class="line">│   └── 172.28.0.4.yml</span><br><span class="line">├── inventory</span><br><span class="line">├── playbook.yml</span><br><span class="line">└── roles</span><br><span class="line">    ├── base</span><br><span class="line">    │   └── tasks</span><br><span class="line">    │       └── main.yml</span><br><span class="line">    ├── db_servers</span><br><span class="line">    │   └── tasks</span><br><span class="line">    │       └── main.yml</span><br><span class="line">    └── web_servers</span><br><span class="line">        ├── files</span><br><span class="line">        │   └── a.txt</span><br><span class="line">        └── tasks</span><br><span class="line">            └── main.yml</span><br></pre></td></tr></table></figure></li></ul><h3 id="handlers"><a href="#handlers" class="headerlink" title="handlers"></a>handlers</h3><ul><li>register 配合 when 的优化，register 当有多个但是某个未变化时，when 中的 task 不会触发，而 handlers 是有变化即会触发任务</li></ul><p><img src="/tools/The-trick-of-ansible/image-20240421115559993.png" alt="image-20240421115559993"></p><p><img src="/tools/The-trick-of-ansible/image-20240421115625124.png" alt="image-20240421115625124"></p><p><img src="/tools/The-trick-of-ansible/image-20240421115737848.png" alt="image-20240421115737848"></p><ul><li><p>tree</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── host_vars</span><br><span class="line">│   ├── 172.28.0.3.yml</span><br><span class="line">│   └── 172.28.0.4.yml</span><br><span class="line">├── inventory</span><br><span class="line">├── playbook.yml</span><br><span class="line">└── roles</span><br><span class="line">    ├── base</span><br><span class="line">    │   └── tasks</span><br><span class="line">    │       └── main.yml</span><br><span class="line">    ├── db_servers</span><br><span class="line">    │   └── tasks</span><br><span class="line">    │       └── main.yml</span><br><span class="line">    └── web_servers</span><br><span class="line">        ├── files</span><br><span class="line">        │   └── a.txt</span><br><span class="line">        └── tasks</span><br><span class="line">            └── main.yml</span><br></pre></td></tr></table></figure></li></ul><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><ul><li><p>与 <code>roles/[role]/tasks</code> 同级别创建 templates 文件夹，用于存放模板文件。即 <code>*.j2</code> 文件</p></li><li><p>如下表示将 <code>sshd_config</code> 作为模板，保证在相同分发版本的不同 Linux 机器上配置保持一致。具体文件可见 <a href="https://github.com/cv-programmer/ansible-learn">ansible-learn&#x2F;ansible-template</a></p><ol><li><p>配置模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># roles/base/templates/sshd_config_photon.j2</span><br><span class="line">AllowUsers &#123;&#123; ssh_user &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># host_vars/172.28.0.3.yml</span></span><br><span class="line"><span class="attr">ssh_user:</span> <span class="string">&quot;foo bar&quot;</span></span><br><span class="line"><span class="attr">ssh_template_file:</span> <span class="string">&quot;sshd_config_photon.j2&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>添加 task，即指定从 template 生成文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># roles/base/tasks/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">sshd_config</span> <span class="string">file</span> <span class="string">from</span> <span class="string">template</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">ssh</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ssh_template_file &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/etc/ssh/sshd_config</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="string">restart_sshd</span></span><br></pre></td></tr></table></figure></li><li><p>添加 handlers</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># roles/base/handlers/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart_sshd</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sshd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="未解决"><a href="#未解决" class="headerlink" title="未解决"></a>未解决</h1><ul><li>目前 tdnf 安装软件时，不论是否已经安装过，都会返回 changed &#x3D; 1，看着是与 ansible 还没有兼容好，毕竟官网教程都搜不到 tdnf。相关回答如下<ul><li><a href="https://github.com/ansible/ansible/issues/64963">dnf&#x2F;yum module not idempotent and reports changed for an installed package</a></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.youtube.com/watch?v=3RiVKs8GHYQ&list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70">Getting started with Ansible</a></li><li><a href="https://docs.ansible.com/ansible/latest/index.html">Ansible community documentation</a></li><li><a href="https://vmware.github.io/photon/assets/files/html/3.0/">photon:3.0 doc</a></li><li><a href="https://vmware.github.io/photon/docs-v5/">photon:5.0 doc</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go】04-context</title>
      <link href="/codeLang/Go-04-context/"/>
      <url>/codeLang/Go-04-context/</url>
      
        <content type="html"><![CDATA[<h1 id="Context-是什么？"><a href="#Context-是什么？" class="headerlink" title="Context 是什么？"></a>Context 是什么？</h1><ul><li>Context 是 Go 中用来<strong>传递上下文信息的一种方式</strong>，要用来在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、k-v 等</li><li>常见场景：当作为 server 处理 client 信息时，client 异常关闭之后，server 应该同步终止 client 之前的请求资源，即 <code>gracefully terminate</code>（这样server能够节省资源，不处理 client 多余的请求，毕竟 client 已经异常关闭）</li></ul><h1 id="Context-如何使用？"><a href="#Context-如何使用？" class="headerlink" title="Context 如何使用？"></a>Context 如何使用？</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Doing something!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.TODO()</span><br><span class="line">doSomething(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过调用 <code>context</code> 包来创建一个 context，用来传递信息</li><li>也可以使用 <code>ctx := context.Background()</code>，两者的差异可见[<a href="https://stackoverflow.com/questions/74239074/context-todo-or-context-background-which-one-should-i-prefer">context.TODO() or context.Background(), which one should I prefer?</a>。两者本质一致，差异在于使用 <code>TODO</code>用来表示不确定性，后续要变更。<code>Background()</code>则更为明确</li></ul><h2 id="传递变量"><a href="#传递变量" class="headerlink" title="传递变量"></a>传递变量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;doSomething: myKey&#x27;s value is %s\n&quot;</span>, ctx.Value(<span class="string">&quot;myKey&quot;</span>))</span><br><span class="line"></span><br><span class="line">anotherCtx := context.WithValue(ctx, <span class="string">&quot;myKey&quot;</span>, <span class="string">&quot;anotherValue&quot;</span>)</span><br><span class="line">doAnother(anotherCtx)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;doSomething: myKey&#x27;s value is %s\n&quot;</span>, ctx.Value(<span class="string">&quot;myKey&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doAnother</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;doAnother: myKey&#x27;s value is %s\n&quot;</span>, ctx.Value(<span class="string">&quot;myKey&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">ctx = context.WithValue(ctx, <span class="string">&quot;myKey&quot;</span>, <span class="string">&quot;myValue&quot;</span>)</span><br><span class="line"></span><br><span class="line">doSomething(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// doSomething: myKey&#x27;s value is myValue</span></span><br><span class="line"><span class="comment">// doAnother: myKey&#x27;s value is anotherValue</span></span><br><span class="line"><span class="comment">// doSomething: myKey&#x27;s value is myValue</span></span><br></pre></td></tr></table></figure><ul><li><p>通过 <code>context</code>可以用来传递参数，此时可在调用链中继续使用，注意使用场景，简而言之，<strong>就是不要滥用，下面给出了一个注意点</strong></p><blockquote><p> Contexts can be a powerful tool with all the values they can hold, but a balance needs to be struck between data being stored in a context and data being passed to a function as parameters. It may seem tempting to put all of your data in a context and use that data in your functions instead of parameters, but that can lead to code that is hard to read and maintain. A good rule of thumb is that any data required for a function to run should be passed as parameters. Sometimes, for example, it can be useful to keep values such as usernames in context values for use when logging information for later. However, if the username is used to determine if a function should display some specific information, you’d want to include it as a function parameter even if it’s already available from the context. This way when you, or someone else, looks at the function in the future, it’s easier to see which data is actually being used.</p></blockquote></li><li><p>context 传递变量时，同一个函数中，值不会被改变</p></li></ul><h2 id="通过-语义-终止运行-同步信号（context-WithCancel）"><a href="#通过-语义-终止运行-同步信号（context-WithCancel）" class="headerlink" title="通过 语义 终止运行&#x2F;同步信号（context.WithCancel）"></a>通过 语义 终止运行&#x2F;同步信号（context.WithCancel）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancelCtx := context.WithCancel(ctx)</span><br><span class="line"></span><br><span class="line">printCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> doAnother(ctx, printCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num := <span class="number">1</span>; num &lt;= <span class="number">3</span>; num++ &#123;</span><br><span class="line">printCh &lt;- num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cancelCtx()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;doSomething: finished\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doAnother</span><span class="params">(ctx context.Context, printCh &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">if</span> err := ctx.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;doAnother err: %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;doAnother: finished\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> num := &lt;-printCh:</span><br><span class="line">fmt.Printf(<span class="string">&quot;doAnother: %d\n&quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// doAnother: 1</span></span><br><span class="line"><span class="comment">// doAnother: 2</span></span><br><span class="line"><span class="comment">// doAnother: 3</span></span><br><span class="line"><span class="comment">// doAnother err: context canceled</span></span><br><span class="line"><span class="comment">// doAnother: finished</span></span><br><span class="line"><span class="comment">// doSomething: finished</span></span><br></pre></td></tr></table></figure><ul><li>通过向 channel 传递消息，来决定是否终止后续运行。逐步传递，保证上层 Goroutine 执行出现错误时，将信号及时同步给下层</li><li><code>ctx.Done()</code>被执行，说明已到达设定的终止语义</li></ul><h2 id="通过-终止时间-终止运行"><a href="#通过-终止时间-终止运行" class="headerlink" title="通过 终止时间 终止运行"></a>通过 终止时间 终止运行</h2><h3 id="context-WithDeadline"><a href="#context-WithDeadline" class="headerlink" title="context.WithDeadline"></a>context.WithDeadline</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">deadline := time.Now().Add(<span class="number">1500</span> * time.Millisecond)</span><br><span class="line">ctx, cancelCtx := context.WithDeadline(ctx, deadline)</span><br><span class="line"><span class="keyword">defer</span> cancelCtx()</span><br><span class="line"></span><br><span class="line">printCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> doAnother(ctx, printCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num := <span class="number">1</span>; num &lt;= <span class="number">3</span>; num++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> printCh &lt;- num:</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cancelCtx()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;doSomething: finished\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><p>通过指定超时时间，来决定是否终止后续运行。如果超时，则会自动终止调用</p></li><li><p>同时使用 <code>defer cancelCtx()</code> 和 <code>cancelCtx()</code>原因: 后者是主动调用，没有回收一些资源（因为写的是 break），前者是更加安全的方式</p><blockquote><p>The <code>defer cancelCtx()</code> isn’t necessarily required because the other call will always be run, but it can be useful to keep it in case there are any <code>return</code> statements in the future that cause it to be missed. When a context is canceled from a deadline, the cancel function is still required to be called in order to clean up any resources that were used, so this is more of a safety measure.</p></blockquote></li></ul><h3 id="context-WithTimeout"><a href="#context-WithTimeout" class="headerlink" title="context.WithTimeout"></a>context.WithTimeout</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx, cancelCtx := context.WithTimeout(ctx, <span class="number">1500</span>*time.Millisecond)</span><br><span class="line"><span class="keyword">defer</span> cancelCtx()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>简化使用</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go">How To Use Contexts in Go</a></li><li><a href="https://medium.com/@jamal.kaksouri/the-complete-guide-to-context-in-golang-efficient-concurrency-management-43d722f6eaea">The Complete Guide to Context in Golang: Efficient Concurrency Management</a></li><li><a href="https://zhuanlan.zhihu.com/p/68792989">深度解密Go语言之context</a></li><li><a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-context/#61-%e4%b8%8a%e4%b8%8b%e6%96%87-context">Go 语言设计与实现 6.1 上下文 Context</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Harbor】04-registry</title>
      <link href="/cloud/harbor-04-registry/"/>
      <url>/cloud/harbor-04-registry/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="98315c221ff6532e3f87bc9198c270d09d7016f1f302a7b18735ea4aa97d9a84">ec3afd5a5ab7d2bf73c7cebb244d392e82b265fed6f9980371f06a49507f528161471620313c01a6b48843bde283258567b97d888317730ee13fbdb3dff3ab0cc5da6ad98053ea9a78f2dce8062f8bc8731e8ec52fc0b13dc714fa0281102f149f2fb7b76776c824b1b224495935917b02aa3cf93b2e6953b5aec6822580e5ef45dc328e3e19f62a2a217cc9f9ed82abc93f038636ce613a5fa9f465c9749aade85719b5a479411dcb8ab1379fdd2bad66a5b7c4d5dec356878bbeee88c23ef7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> harbor - registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Harbor】03-core</title>
      <link href="/cloud/harbor-03-core/"/>
      <url>/cloud/harbor-03-core/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="90788029884b04e2fa765a051ed0608a02462c89fed0f63eb15bee0fe1dfb1b3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> harbor - core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【terraform】02-快速开始</title>
      <link href="/cloud/terraform-02-quick-start/"/>
      <url>/cloud/terraform-02-quick-start/</url>
      
        <content type="html"><![CDATA[<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><ul><li><p><a href="https://developer.hashicorp.com/terraform/install">Install Doc</a></p></li><li><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip</span><br><span class="line">unzip terraform_1.7.5_linux_amd64.zip</span><br><span class="line">mv terraform /usr/local/bin/</span><br><span class="line">terraform version</span><br></pre></td></tr></table></figure></li></ul><h1 id="HashiCorp-Configuration-Language-HCL"><a href="#HashiCorp-Configuration-Language-HCL" class="headerlink" title="HashiCorp Configuration Language (HCL)"></a>HashiCorp Configuration Language (HCL)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block&gt; &lt;parameters&gt; &#123;</span><br><span class="line">  key1 = value1</span><br><span class="line">  key2 = value2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cloud/terraform-02-quick-start/image-20240324111828041.png" alt="image-20240324111828041"></p><ul><li>Local Provider 文档可见 <a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs">Local Provider</a></li></ul><h1 id="Simple-Case"><a href="#Simple-Case" class="headerlink" title="Simple Case"></a>Simple Case</h1><ul><li><p><code>local.tf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;local_file&quot; &quot;hello&quot; &#123;</span><br><span class="line">    filename = &quot;../hello-terrafrom/hello.txt&quot;</span><br><span class="line">    content = &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>terraform init</code></p><p><img src="/cloud/terraform-02-quick-start/image-20240324174137663.png" alt="image-20240324174137663"></p></li><li><p><code>terraform plan</code></p><p><img src="/cloud/terraform-02-quick-start/image-20240324174239152.png" alt="image-20240324174239152"></p></li><li><p><code>tefform apply</code></p><p><img src="/cloud/terraform-02-quick-start/image-20240324174311669.png" alt="image-20240324174311669"></p></li><li><p><code>terraform show</code></p><p><img src="/cloud/terraform-02-quick-start/image-20240324175612805.png" alt="image-20240324175612805"></p></li><li><p><code>terraform destroy</code></p><p><img src="/cloud/terraform-02-quick-start/image-20240324200600716.png" alt="image-20240324200600716"></p></li></ul><h1 id="Terraform-Concepts"><a href="#Terraform-Concepts" class="headerlink" title="Terraform Concepts"></a>Terraform Concepts</h1><p><img src="/cloud/terraform-02-quick-start/image-20240324200904227.png" alt="image-20240324200904227"></p><h2 id="input-variables"><a href="#input-variables" class="headerlink" title="input variables"></a>input variables</h2><h3 id="variables-tf"><a href="#variables-tf" class="headerlink" title="variables.tf"></a>variables.tf</h3><p><img src="/cloud/terraform-02-quick-start/image-20240324201120735.png" alt="image-20240324201120735"></p><h3 id="variables-empty-in-variables-tf"><a href="#variables-empty-in-variables-tf" class="headerlink" title="variables empty in  variables.tf"></a>variables empty in  variables.tf</h3><p><img src="/cloud/terraform-02-quick-start/image-20240324202128085.png" alt="image-20240324202128085"></p><ul><li><p>interactive mode</p><p><img src="/cloud/terraform-02-quick-start/image-20240324202200917.png" alt="image-20240324202200917"></p></li><li><p>command line flags</p><p><img src="/cloud/terraform-02-quick-start/image-20240324202221246.png" alt="image-20240324202221246"></p></li><li><p>environment variables</p><p><img src="/cloud/terraform-02-quick-start/image-20240324202249183.png" alt="image-20240324202249183"></p></li><li><p>variable defination file</p><p><img src="/cloud/terraform-02-quick-start/image-20240324202406524.png" alt="image-20240324202406524"></p></li></ul><h3 id="Varivable-definition-precedence"><a href="#Varivable-definition-precedence" class="headerlink" title="Varivable definition precedence"></a>Varivable definition precedence</h3><p><img src="/cloud/terraform-02-quick-start/image-20240324202604670.png" alt="image-20240324202604670"></p><p><img src="/cloud/terraform-02-quick-start/image-20240324202617482.png" alt="image-20240324202617482"></p><h2 id="Resource-Attribute-Reference"><a href="#Resource-Attribute-Reference" class="headerlink" title="Resource Attribute Reference"></a>Resource Attribute Reference</h2><p><img src="/cloud/terraform-02-quick-start/image-20240324203209622.png" alt="image-20240324203209622"></p><h2 id="Resource-Dependencies"><a href="#Resource-Dependencies" class="headerlink" title="Resource Dependencies"></a>Resource Dependencies</h2><p><img src="/cloud/terraform-02-quick-start/image-20240324203419226.png" alt="image-20240324203419226"></p><p><img src="/cloud/terraform-02-quick-start/image-20240324203507611.png" alt="image-20240324203507611"></p><h2 id="output-variables"><a href="#output-variables" class="headerlink" title="output variables"></a>output variables</h2><p><img src="/cloud/terraform-02-quick-start/image-20240324203800353.png" alt="image-20240324203800353"></p><p><img src="/cloud/terraform-02-quick-start/image-20240324203909320.png" alt="image-20240324203909320"></p><h2 id="lifecycle"><a href="#lifecycle" class="headerlink" title="lifecycle"></a>lifecycle</h2><p><img src="/cloud/terraform-02-quick-start/image-20240324205704571.png" alt="image-20240324205704571"></p><h3 id="create-before-destroy"><a href="#create-before-destroy" class="headerlink" title="create_before_destroy"></a>create_before_destroy</h3><ul><li><p>before</p><p><img src="/cloud/terraform-02-quick-start/image-20240324205030729.png" alt="image-20240324205030729"></p></li><li><p>after</p><p><img src="/cloud/terraform-02-quick-start/image-20240324205109096.png" alt="image-20240324205109096"></p></li></ul><h3 id="prevent-destroy"><a href="#prevent-destroy" class="headerlink" title="prevent_destroy"></a>prevent_destroy</h3><p><img src="/cloud/terraform-02-quick-start/image-20240324205255055.png" alt="image-20240324205255055"></p><h3 id="ignore-changes"><a href="#ignore-changes" class="headerlink" title="ignore_changes"></a>ignore_changes</h3><p><img src="/cloud/terraform-02-quick-start/image-20240324205645392.png" alt="image-20240324205645392"></p><h2 id="Data-source"><a href="#Data-source" class="headerlink" title="Data source"></a>Data source</h2><p><img src="/cloud/terraform-02-quick-start/image-20240324210150157.png" alt="image-20240324210150157"></p><h2 id="Resource-and-Data-source"><a href="#Resource-and-Data-source" class="headerlink" title="Resource and Data source"></a>Resource and Data source</h2><p><img src="/cloud/terraform-02-quick-start/image-20240324210253805.png" alt="image-20240324210253805"></p><h2 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h2><ul><li><p>loop in terraform</p><p><img src="/cloud/terraform-02-quick-start/image-20240324210652566.png" alt="image-20240324210652566"></p></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://registry.terraform.io/">Terraform Registry</a></li><li><a href="https://kodekloud.com/courses/lab-terraform-for-beginners/?utm_source=YouTube&utm_medium=Video&utm_campaign=TerraformLabs">Lab – Terraform for Beginners</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> terraform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【terraform】01-概述</title>
      <link href="/cloud/terraform-01-overview/"/>
      <url>/cloud/terraform-01-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="Why-need"><a href="#Why-need" class="headerlink" title="Why need?"></a>Why need?</h1><h2 id="Traditional-IT-and-Challenges"><a href="#Traditional-IT-and-Challenges" class="headerlink" title="Traditional IT and Challenges"></a>Traditional IT and Challenges</h2><ul><li><p>传统的业务模式: 根据业务增长及下降 &#x3D;&gt; 制定架构 &#x3D;&gt; 按需采购 &#x3D;&gt; <strong>不同基础设施（系统，网络，存储等）自行部署</strong> &#x3D;&gt; 应用部署</p><p><img src="/cloud/terraform-01-overview/image-20240324095249773.png" alt="image-20240324095249773"></p></li><li><p>云时代解决方案: 根据业务增长及下降 &#x3D;&gt; 制定架构 &#x3D;&gt; 按需采购 &#x3D;&gt; <strong>使用 云厂商（AWS, Aliyun, Azure）提供的基础设施</strong> &#x3D;&gt; 应用部署</p><p><img src="/cloud/terraform-01-overview/image-20240324101628208.png" alt="image-20240324101628208"></p></li><li><p>尽管使用 云厂商 提供的服务，能够解决 传统业务模式的大部分问题（部署慢，运维价格高等），但是由于需要<strong>手工操作资源</strong>（通过界面或脚本等方式），仍然存在人为错误及非一致性的问题</p></li></ul><h1 id="What-is"><a href="#What-is" class="headerlink" title="What is?"></a>What is?</h1><h2 id="IaC"><a href="#IaC" class="headerlink" title="IaC"></a>IaC</h2><ul><li><p>通过代码的方式（shell，terraform等）操作云厂商提供的资源</p></li><li><p>常用 IaC 工具</p><p><img src="/cloud/terraform-01-overview/image-20240324102653913.png" alt="image-20240324102653913"></p></li></ul><h2 id="terraform"><a href="#terraform" class="headerlink" title="terraform"></a>terraform</h2><ul><li>封装了各云厂商的 API，通过 HCL 管理资源</li><li>执行幂等：相同内容多次执行最终结果一致</li></ul><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h1><p><img src="/cloud/terraform-01-overview/image-20240324211004542.png" alt="image-20240324211004542"></p><ul><li>使用可见 <a href="/cloud/terraform-02-quick-start/" title="【terraform】02-快速开始">【terraform】02-快速开始</a></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://developer.hashicorp.com/terraform">https://developer.hashicorp.com/terraform</a></li><li><a href="https://registry.terraform.io/">https://registry.terraform.io/</a></li><li><a href="https://www.youtube.com/watch?v=YcJ9IeukJL8">Terraform Tutorial for Beginners + Labs: Complete Step by Step Guide!</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> terraform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Harbor】02-日志</title>
      <link href="/cloud/harbor-02-log/"/>
      <url>/cloud/harbor-02-log/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5d2f5e84087d06be72e6a43143f8086b084357a71b9ee0deb92de16ca376a2cb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> harbor - log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Harbor】01-概述</title>
      <link href="/cloud/harbor-01-overview/"/>
      <url>/cloud/harbor-01-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="/cloud/harbor-01-overview/architecture.png" alt="arch"></p><p>核心概念详见<a href="https://github.com/goharbor/harbor/wiki/Architecture-Overview-of-Harbor">Architecture Overview of Harbor</a></p><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><ul><li>提交版本截止: 7c2158bdf93fc6de8fed8f9ee44ab466b97253c8</li><li>为了组件分离和易于分发，harbor 将核心组件拆分成不同的镜像，最上层的 base 镜像是 <a href="https://hub.docker.com/_/photon">photon:5.0</a>，核心组件镜像构建文件位于 <code>make/photon</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br></pre></td><td class="code"><pre><span class="line">├─.github</span><br><span class="line">│  ├─ISSUE_TEMPLATE</span><br><span class="line">│  └─workflows</span><br><span class="line">├─api</span><br><span class="line">│  └─v2.0</span><br><span class="line">├─contrib</span><br><span class="line">│  ├─grafana-dashboard</span><br><span class="line">│  └─registryapi</span><br><span class="line">├─docs</span><br><span class="line">│  └─img</span><br><span class="line">├─icons</span><br><span class="line">├─make</span><br><span class="line">│  ├─migrations</span><br><span class="line">│  │  └─postgresql</span><br><span class="line">│  └─photon</span><br><span class="line">│      ├─common</span><br><span class="line">│      ├─core</span><br><span class="line">│      ├─db</span><br><span class="line">│      ├─exporter</span><br><span class="line">│      ├─jobservice</span><br><span class="line">│      ├─log</span><br><span class="line">│      ├─nginx</span><br><span class="line">│      ├─portal</span><br><span class="line">│      ├─prepare</span><br><span class="line">│      │  ├─commands</span><br><span class="line">│      │  ├─migrations</span><br><span class="line">│      │  │  ├─version_1_10_0</span><br><span class="line">│      │  │  ├─version_1_9_0</span><br><span class="line">│      │  │  ├─version_2_0_0</span><br><span class="line">│      │  │  ├─version_2_10_0</span><br><span class="line">│      │  │  ├─version_2_1_0</span><br><span class="line">│      │  │  ├─version_2_2_0</span><br><span class="line">│      │  │  ├─version_2_3_0</span><br><span class="line">│      │  │  ├─version_2_4_0</span><br><span class="line">│      │  │  ├─version_2_5_0</span><br><span class="line">│      │  │  ├─version_2_6_0</span><br><span class="line">│      │  │  ├─version_2_7_0</span><br><span class="line">│      │  │  ├─version_2_8_0</span><br><span class="line">│      │  │  └─version_2_9_0</span><br><span class="line">│      │  ├─scripts</span><br><span class="line">│      │  ├─templates</span><br><span class="line">│      │  │  ├─core</span><br><span class="line">│      │  │  ├─db</span><br><span class="line">│      │  │  ├─docker_compose</span><br><span class="line">│      │  │  ├─exporter</span><br><span class="line">│      │  │  ├─jobservice</span><br><span class="line">│      │  │  ├─log</span><br><span class="line">│      │  │  ├─nginx</span><br><span class="line">│      │  │  ├─portal</span><br><span class="line">│      │  │  ├─registry</span><br><span class="line">│      │  │  ├─registryctl</span><br><span class="line">│      │  │  └─trivy-adapter</span><br><span class="line">│      │  ├─tests</span><br><span class="line">│      │  │  └─migrations</span><br><span class="line">│      │  └─utils</span><br><span class="line">│      ├─redis</span><br><span class="line">│      ├─registry</span><br><span class="line">│      ├─registryctl</span><br><span class="line">│      ├─standalone-db-migrator</span><br><span class="line">│      └─trivy-adapter</span><br><span class="line">├─src</span><br><span class="line">│  ├─cmd</span><br><span class="line">│  │  ├─exporter</span><br><span class="line">│  │  ├─migrate-patch</span><br><span class="line">│  │  ├─standalone-db-migrator</span><br><span class="line">│  │  └─swagger</span><br><span class="line">│  ├─common</span><br><span class="line">│  │  ├─api</span><br><span class="line">│  │  ├─dao</span><br><span class="line">│  │  ├─http</span><br><span class="line">│  │  │  └─modifier</span><br><span class="line">│  │  │      └─auth</span><br><span class="line">│  │  ├─job</span><br><span class="line">│  │  │  ├─models</span><br><span class="line">│  │  │  └─test</span><br><span class="line">│  │  ├─models</span><br><span class="line">│  │  ├─rbac</span><br><span class="line">│  │  │  ├─project</span><br><span class="line">│  │  │  └─system</span><br><span class="line">│  │  ├─registryctl</span><br><span class="line">│  │  ├─secret</span><br><span class="line">│  │  ├─security</span><br><span class="line">│  │  │  ├─local</span><br><span class="line">│  │  │  ├─proxycachesecret</span><br><span class="line">│  │  │  ├─robot</span><br><span class="line">│  │  │  ├─secret</span><br><span class="line">│  │  │  └─v2token</span><br><span class="line">│  │  └─utils</span><br><span class="line">│  │      ├─email</span><br><span class="line">│  │      ├─test</span><br><span class="line">│  │      └─uaa</span><br><span class="line">│  │          └─test</span><br><span class="line">│  ├─controller</span><br><span class="line">│  │  ├─artifact</span><br><span class="line">│  │  │  ├─annotation</span><br><span class="line">│  │  │  └─processor</span><br><span class="line">│  │  │      ├─base</span><br><span class="line">│  │  │      ├─chart</span><br><span class="line">│  │  │      ├─cnab</span><br><span class="line">│  │  │      ├─image</span><br><span class="line">│  │  │      └─wasm</span><br><span class="line">│  │  ├─blob</span><br><span class="line">│  │  ├─config</span><br><span class="line">│  │  │  └─test</span><br><span class="line">│  │  ├─event</span><br><span class="line">│  │  │  ├─handler</span><br><span class="line">│  │  │  │  ├─auditlog</span><br><span class="line">│  │  │  │  ├─internal</span><br><span class="line">│  │  │  │  ├─p2p</span><br><span class="line">│  │  │  │  ├─replication</span><br><span class="line">│  │  │  │  │  └─event</span><br><span class="line">│  │  │  │  ├─util</span><br><span class="line">│  │  │  │  └─webhook</span><br><span class="line">│  │  │  │      ├─artifact</span><br><span class="line">│  │  │  │      ├─quota</span><br><span class="line">│  │  │  │      └─scan</span><br><span class="line">│  │  │  ├─metadata</span><br><span class="line">│  │  │  ├─model</span><br><span class="line">│  │  │  └─operator</span><br><span class="line">│  │  ├─gc</span><br><span class="line">│  │  ├─health</span><br><span class="line">│  │  ├─icon</span><br><span class="line">│  │  ├─immutable</span><br><span class="line">│  │  ├─jobmonitor</span><br><span class="line">│  │  ├─jobservice</span><br><span class="line">│  │  ├─ldap</span><br><span class="line">│  │  ├─member</span><br><span class="line">│  │  ├─p2p</span><br><span class="line">│  │  │  └─preheat</span><br><span class="line">│  │  ├─project</span><br><span class="line">│  │  │  └─metadata</span><br><span class="line">│  │  ├─proxy</span><br><span class="line">│  │  ├─purge</span><br><span class="line">│  │  ├─quota</span><br><span class="line">│  │  │  └─driver</span><br><span class="line">│  │  │      └─project</span><br><span class="line">│  │  ├─registry</span><br><span class="line">│  │  ├─replication</span><br><span class="line">│  │  │  ├─flow</span><br><span class="line">│  │  │  ├─model</span><br><span class="line">│  │  │  └─transfer</span><br><span class="line">│  │  │      └─image</span><br><span class="line">│  │  ├─repository</span><br><span class="line">│  │  ├─retention</span><br><span class="line">│  │  ├─robot</span><br><span class="line">│  │  ├─scan</span><br><span class="line">│  │  ├─scandataexport</span><br><span class="line">│  │  ├─scanner</span><br><span class="line">│  │  ├─securityhub</span><br><span class="line">│  │  ├─systemartifact</span><br><span class="line">│  │  ├─systeminfo</span><br><span class="line">│  │  ├─tag</span><br><span class="line">│  │  ├─task</span><br><span class="line">│  │  ├─user</span><br><span class="line">│  │  ├─usergroup</span><br><span class="line">│  │  │  └─test</span><br><span class="line">│  │  └─webhook</span><br><span class="line">│  ├─core</span><br><span class="line">│  │  ├─api</span><br><span class="line">│  │  ├─auth</span><br><span class="line">│  │  │  ├─authproxy</span><br><span class="line">│  │  │  │  └─test</span><br><span class="line">│  │  │  ├─db</span><br><span class="line">│  │  │  ├─ldap</span><br><span class="line">│  │  │  ├─oidc</span><br><span class="line">│  │  │  └─uaa</span><br><span class="line">│  │  ├─controllers</span><br><span class="line">│  │  ├─middlewares</span><br><span class="line">│  │  ├─service</span><br><span class="line">│  │  │  └─token</span><br><span class="line">│  │  │      └─test</span><br><span class="line">│  │  ├─session</span><br><span class="line">│  │  ├─utils</span><br><span class="line">│  │  └─views</span><br><span class="line">│  ├─jobservice</span><br><span class="line">│  │  ├─api</span><br><span class="line">│  │  ├─common</span><br><span class="line">│  │  │  ├─list</span><br><span class="line">│  │  │  ├─query</span><br><span class="line">│  │  │  ├─rds</span><br><span class="line">│  │  │  └─utils</span><br><span class="line">│  │  ├─config</span><br><span class="line">│  │  ├─core</span><br><span class="line">│  │  ├─env</span><br><span class="line">│  │  ├─errs</span><br><span class="line">│  │  ├─hook</span><br><span class="line">│  │  ├─job</span><br><span class="line">│  │  │  └─impl</span><br><span class="line">│  │  │      ├─gc</span><br><span class="line">│  │  │      ├─gdpr</span><br><span class="line">│  │  │      ├─legacy</span><br><span class="line">│  │  │      ├─notification</span><br><span class="line">│  │  │      ├─purge</span><br><span class="line">│  │  │      ├─replication</span><br><span class="line">│  │  │      ├─sample</span><br><span class="line">│  │  │      ├─scandataexport</span><br><span class="line">│  │  │      └─systemartifact</span><br><span class="line">│  │  ├─lcm</span><br><span class="line">│  │  ├─logger</span><br><span class="line">│  │  │  ├─backend</span><br><span class="line">│  │  │  ├─getter</span><br><span class="line">│  │  │  │  └─testdata</span><br><span class="line">│  │  │  └─sweeper</span><br><span class="line">│  │  ├─mgt</span><br><span class="line">│  │  ├─migration</span><br><span class="line">│  │  ├─period</span><br><span class="line">│  │  ├─runner</span><br><span class="line">│  │  ├─runtime</span><br><span class="line">│  │  ├─sync</span><br><span class="line">│  │  ├─tests</span><br><span class="line">│  │  └─worker</span><br><span class="line">│  │      └─cworker</span><br><span class="line">│  ├─lib</span><br><span class="line">│  │  ├─cache</span><br><span class="line">│  │  │  ├─memory</span><br><span class="line">│  │  │  └─redis</span><br><span class="line">│  │  ├─config</span><br><span class="line">│  │  │  ├─metadata</span><br><span class="line">│  │  │  ├─models</span><br><span class="line">│  │  │  └─test</span><br><span class="line">│  │  ├─encode</span><br><span class="line">│  │  │  └─repository</span><br><span class="line">│  │  ├─encrypt</span><br><span class="line">│  │  ├─errors</span><br><span class="line">│  │  ├─gtask</span><br><span class="line">│  │  ├─http</span><br><span class="line">│  │  ├─icon</span><br><span class="line">│  │  ├─log</span><br><span class="line">│  │  ├─metric</span><br><span class="line">│  │  ├─orm</span><br><span class="line">│  │  │  └─test</span><br><span class="line">│  │  ├─q</span><br><span class="line">│  │  ├─redis</span><br><span class="line">│  │  ├─retry</span><br><span class="line">│  │  ├─selector</span><br><span class="line">│  │  │  └─selectors</span><br><span class="line">│  │  │      ├─doublestar</span><br><span class="line">│  │  │      ├─index</span><br><span class="line">│  │  │      ├─label</span><br><span class="line">│  │  │      ├─severity</span><br><span class="line">│  │  │      └─signature</span><br><span class="line">│  │  └─trace</span><br><span class="line">│  ├─migration</span><br><span class="line">│  ├─pkg</span><br><span class="line">│  │  ├─accessory</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  │      ├─base</span><br><span class="line">│  │  │      ├─cosign</span><br><span class="line">│  │  │      ├─notation</span><br><span class="line">│  │  │      ├─nydus</span><br><span class="line">│  │  │      └─subject</span><br><span class="line">│  │  ├─allowlist</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─models</span><br><span class="line">│  │  ├─artifact</span><br><span class="line">│  │  │  └─dao</span><br><span class="line">│  │  ├─artifactrash</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─audit</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─authproxy</span><br><span class="line">│  │  ├─blob</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─models</span><br><span class="line">│  │  ├─cached</span><br><span class="line">│  │  │  ├─artifact</span><br><span class="line">│  │  │  │  └─redis</span><br><span class="line">│  │  │  ├─manifest</span><br><span class="line">│  │  │  │  └─redis</span><br><span class="line">│  │  │  ├─project</span><br><span class="line">│  │  │  │  └─redis</span><br><span class="line">│  │  │  ├─project_metadata</span><br><span class="line">│  │  │  │  └─redis</span><br><span class="line">│  │  │  └─repository</span><br><span class="line">│  │  │      └─redis</span><br><span class="line">│  │  ├─chart</span><br><span class="line">│  │  ├─clients</span><br><span class="line">│  │  │  └─core</span><br><span class="line">│  │  ├─config</span><br><span class="line">│  │  │  ├─db</span><br><span class="line">│  │  │  │  └─dao</span><br><span class="line">│  │  │  ├─inmemory</span><br><span class="line">│  │  │  ├─rest</span><br><span class="line">│  │  │  ├─store</span><br><span class="line">│  │  │  └─validate</span><br><span class="line">│  │  │      └─test</span><br><span class="line">│  │  ├─distribution</span><br><span class="line">│  │  ├─exporter</span><br><span class="line">│  │  ├─immutable</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  │  └─model</span><br><span class="line">│  │  │  ├─match</span><br><span class="line">│  │  │  │  └─rule</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─joblog</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─models</span><br><span class="line">│  │  ├─jobmonitor</span><br><span class="line">│  │  ├─label</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─ldap</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─member</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─models</span><br><span class="line">│  │  ├─notification</span><br><span class="line">│  │  │  ├─hook</span><br><span class="line">│  │  │  └─policy</span><br><span class="line">│  │  │      ├─dao</span><br><span class="line">│  │  │      └─model</span><br><span class="line">│  │  ├─notifier</span><br><span class="line">│  │  │  ├─event</span><br><span class="line">│  │  │  ├─formats</span><br><span class="line">│  │  │  ├─handler</span><br><span class="line">│  │  │  │  └─notification</span><br><span class="line">│  │  │  ├─model</span><br><span class="line">│  │  │  └─topic</span><br><span class="line">│  │  ├─oidc</span><br><span class="line">│  │  │  └─dao</span><br><span class="line">│  │  ├─p2p</span><br><span class="line">│  │  │  └─preheat</span><br><span class="line">│  │  │      ├─dao</span><br><span class="line">│  │  │      │  ├─instance</span><br><span class="line">│  │  │      │  └─policy</span><br><span class="line">│  │  │      ├─helper</span><br><span class="line">│  │  │      ├─instance</span><br><span class="line">│  │  │      ├─models</span><br><span class="line">│  │  │      │  ├─notification</span><br><span class="line">│  │  │      │  ├─policy</span><br><span class="line">│  │  │      │  └─provider</span><br><span class="line">│  │  │      ├─policy</span><br><span class="line">│  │  │      └─provider</span><br><span class="line">│  │  │          ├─auth</span><br><span class="line">│  │  │          └─client</span><br><span class="line">│  │  ├─permission</span><br><span class="line">│  │  │  ├─evaluator</span><br><span class="line">│  │  │  │  ├─admin</span><br><span class="line">│  │  │  │  ├─lazy</span><br><span class="line">│  │  │  │  ├─namespace</span><br><span class="line">│  │  │  │  └─rbac</span><br><span class="line">│  │  │  └─types</span><br><span class="line">│  │  ├─project</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  ├─metadata</span><br><span class="line">│  │  │  │  ├─dao</span><br><span class="line">│  │  │  │  └─models</span><br><span class="line">│  │  │  └─models</span><br><span class="line">│  │  ├─proxy</span><br><span class="line">│  │  │  └─secret</span><br><span class="line">│  │  ├─queuestatus</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─quota</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  ├─driver</span><br><span class="line">│  │  │  ├─models</span><br><span class="line">│  │  │  └─types</span><br><span class="line">│  │  ├─rbac</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─reg</span><br><span class="line">│  │  │  ├─adapter</span><br><span class="line">│  │  │  │  ├─aliacr</span><br><span class="line">│  │  │  │  ├─awsecr</span><br><span class="line">│  │  │  │  ├─azurecr</span><br><span class="line">│  │  │  │  ├─dockerhub</span><br><span class="line">│  │  │  │  ├─dtr</span><br><span class="line">│  │  │  │  ├─githubcr</span><br><span class="line">│  │  │  │  ├─gitlab</span><br><span class="line">│  │  │  │  │  └─testdata</span><br><span class="line">│  │  │  │  │      ├─projects</span><br><span class="line">│  │  │  │  │      ├─repositories</span><br><span class="line">│  │  │  │  │      └─tags</span><br><span class="line">│  │  │  │  ├─googlegcr</span><br><span class="line">│  │  │  │  ├─harbor</span><br><span class="line">│  │  │  │  │  ├─base</span><br><span class="line">│  │  │  │  │  ├─v1</span><br><span class="line">│  │  │  │  │  └─v2</span><br><span class="line">│  │  │  │  ├─huawei</span><br><span class="line">│  │  │  │  ├─jfrog</span><br><span class="line">│  │  │  │  ├─native</span><br><span class="line">│  │  │  │  ├─quay</span><br><span class="line">│  │  │  │  │  └─auth</span><br><span class="line">│  │  │  │  ├─tencentcr</span><br><span class="line">│  │  │  │  └─volcenginecr</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  ├─filter</span><br><span class="line">│  │  │  ├─model</span><br><span class="line">│  │  │  └─util</span><br><span class="line">│  │  ├─registry</span><br><span class="line">│  │  │  ├─auth</span><br><span class="line">│  │  │  │  ├─basic</span><br><span class="line">│  │  │  │  ├─bearer</span><br><span class="line">│  │  │  │  └─null</span><br><span class="line">│  │  │  └─interceptor</span><br><span class="line">│  │  │      └─readonly</span><br><span class="line">│  │  ├─replication</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─repository</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─retention</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  │  └─models</span><br><span class="line">│  │  │  ├─dep</span><br><span class="line">│  │  │  ├─mocks</span><br><span class="line">│  │  │  ├─policy</span><br><span class="line">│  │  │  │  ├─action</span><br><span class="line">│  │  │  │  │  └─index</span><br><span class="line">│  │  │  │  ├─alg</span><br><span class="line">│  │  │  │  │  ├─index</span><br><span class="line">│  │  │  │  │  └─or</span><br><span class="line">│  │  │  │  ├─lwp</span><br><span class="line">│  │  │  │  └─rule</span><br><span class="line">│  │  │  │      ├─always</span><br><span class="line">│  │  │  │      ├─dayspl</span><br><span class="line">│  │  │  │      ├─daysps</span><br><span class="line">│  │  │  │      ├─index</span><br><span class="line">│  │  │  │      ├─lastx</span><br><span class="line">│  │  │  │      ├─latestk</span><br><span class="line">│  │  │  │      ├─latestpl</span><br><span class="line">│  │  │  │      ├─latestps</span><br><span class="line">│  │  │  │      └─nothing</span><br><span class="line">│  │  │  └─q</span><br><span class="line">│  │  ├─robot</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─scan</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  │  ├─scan</span><br><span class="line">│  │  │  │  └─scanner</span><br><span class="line">│  │  │  ├─export</span><br><span class="line">│  │  │  ├─postprocessors</span><br><span class="line">│  │  │  ├─report</span><br><span class="line">│  │  │  ├─rest</span><br><span class="line">│  │  │  │  ├─auth</span><br><span class="line">│  │  │  │  └─v1</span><br><span class="line">│  │  │  ├─scanner</span><br><span class="line">│  │  │  └─vuln</span><br><span class="line">│  │  ├─scheduler</span><br><span class="line">│  │  ├─securityhub</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─systemartifact</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  ├─systeminfo</span><br><span class="line">│  │  │  └─imagestorage</span><br><span class="line">│  │  │      └─filesystem</span><br><span class="line">│  │  ├─tag</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  │      └─tag</span><br><span class="line">│  │  ├─task</span><br><span class="line">│  │  │  └─dao</span><br><span class="line">│  │  ├─token</span><br><span class="line">│  │  │  └─claims</span><br><span class="line">│  │  │      ├─robot</span><br><span class="line">│  │  │      └─v2</span><br><span class="line">│  │  ├─user</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─models</span><br><span class="line">│  │  ├─usergroup</span><br><span class="line">│  │  │  ├─dao</span><br><span class="line">│  │  │  └─model</span><br><span class="line">│  │  └─version</span><br><span class="line">│  ├─portal</span><br><span class="line">│  │  ├─app-swagger-ui</span><br><span class="line">│  │  │  └─src</span><br><span class="line">│  │  ├─cypress</span><br><span class="line">│  │  │  ├─e2e</span><br><span class="line">│  │  │  ├─fixtures</span><br><span class="line">│  │  │  └─support</span><br><span class="line">│  │  ├─docker-build</span><br><span class="line">│  │  ├─scripts</span><br><span class="line">│  │  ├─server</span><br><span class="line">│  │  │  ├─controllers</span><br><span class="line">│  │  │  └─src</span><br><span class="line">│  │  └─src</span><br><span class="line">│  │      ├─app</span><br><span class="line">│  │      │  ├─account</span><br><span class="line">│  │      │  │  ├─sign-in</span><br><span class="line">│  │      │  │  │  └─top-repo</span><br><span class="line">│  │      │  │  └─sign-up</span><br><span class="line">│  │      │  ├─base</span><br><span class="line">│  │      │  │  ├─account-settings</span><br><span class="line">│  │      │  │  ├─global-confirmation-dialog</span><br><span class="line">│  │      │  │  ├─harbor-shell</span><br><span class="line">│  │      │  │  ├─left-side-nav</span><br><span class="line">│  │      │  │  │  ├─clearing-job</span><br><span class="line">│  │      │  │  │  │  ├─audit-log-purge</span><br><span class="line">│  │      │  │  │  │  │  ├─history</span><br><span class="line">│  │      │  │  │  │  │  └─set-job</span><br><span class="line">│  │      │  │  │  │  └─gc-page</span><br><span class="line">│  │      │  │  │  │      └─gc</span><br><span class="line">│  │      │  │  │  │          └─gc-history</span><br><span class="line">│  │      │  │  │  ├─config</span><br><span class="line">│  │      │  │  │  │  ├─auth</span><br><span class="line">│  │      │  │  │  │  ├─security</span><br><span class="line">│  │      │  │  │  │  └─system</span><br><span class="line">│  │      │  │  │  ├─distribution</span><br><span class="line">│  │      │  │  │  │  ├─distribution-instances</span><br><span class="line">│  │      │  │  │  │  └─distribution-setup-modal</span><br><span class="line">│  │      │  │  │  ├─group</span><br><span class="line">│  │      │  │  │  │  └─add-group-modal</span><br><span class="line">│  │      │  │  │  ├─interrogation-services</span><br><span class="line">│  │      │  │  │  │  ├─scanner</span><br><span class="line">│  │      │  │  │  │  │  ├─new-scanner-form</span><br><span class="line">│  │      │  │  │  │  │  ├─new-scanner-modal</span><br><span class="line">│  │      │  │  │  │  │  └─scanner-metadata</span><br><span class="line">│  │      │  │  │  │  ├─vulnerability</span><br><span class="line">│  │      │  │  │  │  └─vulnerability-database</span><br><span class="line">│  │      │  │  │  │      ├─single-bar</span><br><span class="line">│  │      │  │  │  │      ├─vulnerability-filter</span><br><span class="line">│  │      │  │  │  │      └─vulnerability-summary</span><br><span class="line">│  │      │  │  │  ├─job-service-dashboard</span><br><span class="line">│  │      │  │  │  │  ├─pending-job-card</span><br><span class="line">│  │      │  │  │  │  ├─pending-job-list</span><br><span class="line">│  │      │  │  │  │  ├─schedule-card</span><br><span class="line">│  │      │  │  │  │  ├─schedule-list</span><br><span class="line">│  │      │  │  │  │  ├─worker-card</span><br><span class="line">│  │      │  │  │  │  │  └─donut-chart</span><br><span class="line">│  │      │  │  │  │  └─worker-list</span><br><span class="line">│  │      │  │  │  ├─labels</span><br><span class="line">│  │      │  │  │  ├─log</span><br><span class="line">│  │      │  │  │  ├─project-quotas</span><br><span class="line">│  │      │  │  │  │  └─project-quotas</span><br><span class="line">│  │      │  │  │  │      └─edit-project-quotas</span><br><span class="line">│  │      │  │  │  ├─projects</span><br><span class="line">│  │      │  │  │  │  ├─create-project</span><br><span class="line">│  │      │  │  │  │  ├─list-project</span><br><span class="line">│  │      │  │  │  │  │  └─export-cve</span><br><span class="line">│  │      │  │  │  │  └─statictics</span><br><span class="line">│  │      │  │  │  ├─registries</span><br><span class="line">│  │      │  │  │  │  └─create-edit-endpoint</span><br><span class="line">│  │      │  │  │  ├─replication</span><br><span class="line">│  │      │  │  │  │  └─replication</span><br><span class="line">│  │      │  │  │  │      ├─create-edit-rule</span><br><span class="line">│  │      │  │  │  │      ├─list-replication-rule</span><br><span class="line">│  │      │  │  │  │      └─replication-tasks</span><br><span class="line">│  │      │  │  │  ├─system-robot-accounts</span><br><span class="line">│  │      │  │  │  │  ├─list-all-projects</span><br><span class="line">│  │      │  │  │  │  ├─new-robot</span><br><span class="line">│  │      │  │  │  │  └─projects-modal</span><br><span class="line">│  │      │  │  │  └─user</span><br><span class="line">│  │      │  │  │      └─change-password</span><br><span class="line">│  │      │  │  ├─password-setting</span><br><span class="line">│  │      │  │  │  └─forgot-password</span><br><span class="line">│  │      │  │  └─project</span><br><span class="line">│  │      │  │      ├─member</span><br><span class="line">│  │      │  │      │  ├─add-group</span><br><span class="line">│  │      │  │      │  └─add-member</span><br><span class="line">│  │      │  │      ├─p2p-provider</span><br><span class="line">│  │      │  │      │  ├─add-p2p-policy</span><br><span class="line">│  │      │  │      │  ├─policy</span><br><span class="line">│  │      │  │      │  └─task-list</span><br><span class="line">│  │      │  │      ├─project-config</span><br><span class="line">│  │      │  │      │  └─project-policy-config</span><br><span class="line">│  │      │  │      ├─project-detail</span><br><span class="line">│  │      │  │      ├─project-label</span><br><span class="line">│  │      │  │      ├─project-log</span><br><span class="line">│  │      │  │      ├─repository</span><br><span class="line">│  │      │  │      │  ├─artifact</span><br><span class="line">│  │      │  │      │  │  ├─artifact-additions</span><br><span class="line">│  │      │  │      │  │  │  ├─artifact-vulnerabilities</span><br><span class="line">│  │      │  │      │  │  │  ├─build-history</span><br><span class="line">│  │      │  │      │  │  │  ├─dependencies</span><br><span class="line">│  │      │  │      │  │  │  ├─summary</span><br><span class="line">│  │      │  │      │  │  │  └─values</span><br><span class="line">│  │      │  │      │  │  ├─artifact-common-properties</span><br><span class="line">│  │      │  │      │  │  ├─artifact-list-page</span><br><span class="line">│  │      │  │      │  │  │  └─artifact-list</span><br><span class="line">│  │      │  │      │  │  │      ├─artifact-info</span><br><span class="line">│  │      │  │      │  │  │      └─artifact-list-tab</span><br><span class="line">│  │      │  │      │  │  │          ├─artifact-filter</span><br><span class="line">│  │      │  │      │  │  │          ├─copy-artifact</span><br><span class="line">│  │      │  │      │  │  │          ├─copy-digest</span><br><span class="line">│  │      │  │      │  │  │          ├─pull-command</span><br><span class="line">│  │      │  │      │  │  │          └─sub-accessories</span><br><span class="line">│  │      │  │      │  │  ├─artifact-tag</span><br><span class="line">│  │      │  │      │  │  └─vulnerability-scanning</span><br><span class="line">│  │      │  │      │  │      ├─histogram-chart</span><br><span class="line">│  │      │  │      │  │      └─result-tip-histogram</span><br><span class="line">│  │      │  │      │  └─gridview</span><br><span class="line">│  │      │  │      ├─robot-account</span><br><span class="line">│  │      │  │      │  └─add-robot</span><br><span class="line">│  │      │  │      ├─scanner</span><br><span class="line">│  │      │  │      ├─summary</span><br><span class="line">│  │      │  │      ├─tag-feature-integration</span><br><span class="line">│  │      │  │      │  ├─immutable-tag</span><br><span class="line">│  │      │  │      │  │  └─add-rule</span><br><span class="line">│  │      │  │      │  └─tag-retention</span><br><span class="line">│  │      │  │      │      ├─add-rule</span><br><span class="line">│  │      │  │      │      └─tag-retention-tasks</span><br><span class="line">│  │      │  │      │          └─tag-retention-tasks</span><br><span class="line">│  │      │  │      └─webhook</span><br><span class="line">│  │      │  │          ├─add-webhook</span><br><span class="line">│  │      │  │          ├─add-webhook-form</span><br><span class="line">│  │      │  │          ├─excutions</span><br><span class="line">│  │      │  │          └─tasks</span><br><span class="line">│  │      │  ├─license</span><br><span class="line">│  │      │  ├─not-found</span><br><span class="line">│  │      │  ├─oidc-onboard</span><br><span class="line">│  │      │  ├─route-reuse-strategy</span><br><span class="line">│  │      │  ├─services</span><br><span class="line">│  │      │  │  ├─event-service</span><br><span class="line">│  │      │  │  └─routing-resolvers</span><br><span class="line">│  │      │  └─shared</span><br><span class="line">│  │      │      ├─components</span><br><span class="line">│  │      │      │  ├─about-dialog</span><br><span class="line">│  │      │      │  ├─app-level-alerts</span><br><span class="line">│  │      │      │  ├─confirmation-dialog</span><br><span class="line">│  │      │      │  ├─cron-schedule</span><br><span class="line">│  │      │      │  │  └─cron-tooltip</span><br><span class="line">│  │      │      │  ├─datetime-picker</span><br><span class="line">│  │      │      │  ├─filter</span><br><span class="line">│  │      │      │  ├─gauge</span><br><span class="line">│  │      │      │  ├─global-message</span><br><span class="line">│  │      │      │  ├─global-search</span><br><span class="line">│  │      │      │  ├─image-name-input</span><br><span class="line">│  │      │      │  ├─inline-alert</span><br><span class="line">│  │      │      │  ├─label</span><br><span class="line">│  │      │      │  │  ├─create-edit-label</span><br><span class="line">│  │      │      │  │  ├─label-piece</span><br><span class="line">│  │      │      │  │  └─label-signpost</span><br><span class="line">│  │      │      │  ├─label-selector</span><br><span class="line">│  │      │      │  ├─list-project-ro</span><br><span class="line">│  │      │      │  ├─list-repository-ro</span><br><span class="line">│  │      │      │  ├─navigator</span><br><span class="line">│  │      │      │  ├─new-user-form</span><br><span class="line">│  │      │      │  ├─operation</span><br><span class="line">│  │      │      │  ├─push-image</span><br><span class="line">│  │      │      │  ├─remaining-time</span><br><span class="line">│  │      │      │  ├─robot-permissions-panel</span><br><span class="line">│  │      │      │  ├─third-party</span><br><span class="line">│  │      │      │  │  ├─ngx-clipboard</span><br><span class="line">│  │      │      │  │  └─ngx-window-token</span><br><span class="line">│  │      │      │  └─view-token</span><br><span class="line">│  │      │      ├─directives</span><br><span class="line">│  │      │      │  └─scroll</span><br><span class="line">│  │      │      ├─entities</span><br><span class="line">│  │      │      ├─pipes</span><br><span class="line">│  │      │      ├─router-guard</span><br><span class="line">│  │      │      ├─services</span><br><span class="line">│  │      │      ├─units</span><br><span class="line">│  │      │      │  └─error-handler</span><br><span class="line">│  │      │      └─_animations</span><br><span class="line">│  │      ├─css</span><br><span class="line">│  │      ├─environments</span><br><span class="line">│  │      ├─i18n</span><br><span class="line">│  │      │  └─lang</span><br><span class="line">│  │      └─images</span><br><span class="line">│  ├─registryctl</span><br><span class="line">│  │  ├─api</span><br><span class="line">│  │  │  └─registry</span><br><span class="line">│  │  │      ├─blob</span><br><span class="line">│  │  │      ├─manifest</span><br><span class="line">│  │  │      └─test</span><br><span class="line">│  │  ├─auth</span><br><span class="line">│  │  ├─client</span><br><span class="line">│  │  ├─config</span><br><span class="line">│  │  └─handlers</span><br><span class="line">│  ├─server</span><br><span class="line">│  │  ├─handler</span><br><span class="line">│  │  ├─middleware</span><br><span class="line">│  │  │  ├─apiversion</span><br><span class="line">│  │  │  ├─artifactinfo</span><br><span class="line">│  │  │  ├─blob</span><br><span class="line">│  │  │  ├─contenttrust</span><br><span class="line">│  │  │  ├─cosign</span><br><span class="line">│  │  │  ├─csrf</span><br><span class="line">│  │  │  ├─immutable</span><br><span class="line">│  │  │  ├─log</span><br><span class="line">│  │  │  ├─mergeslash</span><br><span class="line">│  │  │  ├─metric</span><br><span class="line">│  │  │  ├─notification</span><br><span class="line">│  │  │  ├─orm</span><br><span class="line">│  │  │  ├─quota</span><br><span class="line">│  │  │  ├─readonly</span><br><span class="line">│  │  │  ├─repoproxy</span><br><span class="line">│  │  │  ├─requestid</span><br><span class="line">│  │  │  ├─security</span><br><span class="line">│  │  │  ├─session</span><br><span class="line">│  │  │  ├─subject</span><br><span class="line">│  │  │  ├─trace</span><br><span class="line">│  │  │  ├─transaction</span><br><span class="line">│  │  │  ├─url</span><br><span class="line">│  │  │  ├─util</span><br><span class="line">│  │  │  ├─v2auth</span><br><span class="line">│  │  │  └─vulnerable</span><br><span class="line">│  │  ├─registry</span><br><span class="line">│  │  │  └─util</span><br><span class="line">│  │  ├─router</span><br><span class="line">│  │  └─v2.0</span><br><span class="line">│  │      ├─handler</span><br><span class="line">│  │      │  ├─assembler</span><br><span class="line">│  │      │  └─model</span><br><span class="line">│  │      └─route</span><br><span class="line">│  └─testing</span><br><span class="line">│      ├─clients</span><br><span class="line">│      ├─common</span><br><span class="line">│      │  └─security</span><br><span class="line">│      ├─controller</span><br><span class="line">│      │  ├─artifact</span><br><span class="line">│      │  ├─blob</span><br><span class="line">│      │  ├─config</span><br><span class="line">│      │  ├─jobservice</span><br><span class="line">│      │  ├─p2p</span><br><span class="line">│      │  │  └─preheat</span><br><span class="line">│      │  ├─project</span><br><span class="line">│      │  ├─proxy</span><br><span class="line">│      │  ├─purge</span><br><span class="line">│      │  ├─quota</span><br><span class="line">│      │  ├─replication</span><br><span class="line">│      │  ├─repository</span><br><span class="line">│      │  ├─retention</span><br><span class="line">│      │  ├─robot</span><br><span class="line">│      │  ├─scan</span><br><span class="line">│      │  ├─scandataexport</span><br><span class="line">│      │  ├─scanner</span><br><span class="line">│      │  ├─securityhub</span><br><span class="line">│      │  ├─systemartifact</span><br><span class="line">│      │  ├─tag</span><br><span class="line">│      │  ├─task</span><br><span class="line">│      │  ├─user</span><br><span class="line">│      │  └─webhook</span><br><span class="line">│      ├─job</span><br><span class="line">│      ├─jobservice</span><br><span class="line">│      ├─lib</span><br><span class="line">│      │  ├─cache</span><br><span class="line">│      │  ├─config</span><br><span class="line">│      │  ├─libcache</span><br><span class="line">│      │  └─orm</span><br><span class="line">│      ├─mock</span><br><span class="line">│      ├─pkg</span><br><span class="line">│      │  ├─accessory</span><br><span class="line">│      │  │  ├─dao</span><br><span class="line">│      │  │  └─model</span><br><span class="line">│      │  ├─allowlist</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─artifact</span><br><span class="line">│      │  ├─artifactrash</span><br><span class="line">│      │  ├─audit</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─blob</span><br><span class="line">│      │  ├─cached</span><br><span class="line">│      │  │  └─manifest</span><br><span class="line">│      │  │      └─redis</span><br><span class="line">│      │  ├─chart</span><br><span class="line">│      │  ├─distribution</span><br><span class="line">│      │  ├─immutable</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─joblog</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─jobmonitor</span><br><span class="line">│      │  ├─label</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─ldap</span><br><span class="line">│      │  ├─member</span><br><span class="line">│      │  ├─notification</span><br><span class="line">│      │  │  └─policy</span><br><span class="line">│      │  │      └─dao</span><br><span class="line">│      │  ├─oidc</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─p2p</span><br><span class="line">│      │  │  └─preheat</span><br><span class="line">│      │  │      ├─instance</span><br><span class="line">│      │  │      └─policy</span><br><span class="line">│      │  ├─parser</span><br><span class="line">│      │  ├─processor</span><br><span class="line">│      │  ├─project</span><br><span class="line">│      │  │  └─metadata</span><br><span class="line">│      │  ├─queuestatus</span><br><span class="line">│      │  ├─quota</span><br><span class="line">│      │  │  └─driver</span><br><span class="line">│      │  ├─rbac</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─reg</span><br><span class="line">│      │  │  ├─adapter</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─registry</span><br><span class="line">│      │  ├─replication</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─repository</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─robot</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─scan</span><br><span class="line">│      │  │  ├─dao</span><br><span class="line">│      │  │  │  └─scan</span><br><span class="line">│      │  │  ├─export</span><br><span class="line">│      │  │  ├─postprocessors</span><br><span class="line">│      │  │  ├─report</span><br><span class="line">│      │  │  ├─rest</span><br><span class="line">│      │  │  │  └─v1</span><br><span class="line">│      │  │  └─scanner</span><br><span class="line">│      │  ├─scheduler</span><br><span class="line">│      │  ├─securityhub</span><br><span class="line">│      │  ├─systemartifact</span><br><span class="line">│      │  │  ├─cleanup</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  ├─tag</span><br><span class="line">│      │  ├─task</span><br><span class="line">│      │  ├─user</span><br><span class="line">│      │  │  └─dao</span><br><span class="line">│      │  └─usergroup</span><br><span class="line">│      ├─registryctl</span><br><span class="line">│      └─server</span><br><span class="line">│          └─v2.0</span><br><span class="line">│              └─handler</span><br><span class="line">├─tests</span><br><span class="line">│  ├─apitests</span><br><span class="line">│  │  └─python</span><br><span class="line">│  │      ├─bundle_data</span><br><span class="line">│  │      └─library</span><br><span class="line">│  ├─ci</span><br><span class="line">│  ├─files</span><br><span class="line">│  ├─resources</span><br><span class="line">│  │  ├─Harbor-Pages</span><br><span class="line">│  │  └─Test-Example</span><br><span class="line">│  ├─robot-cases</span><br><span class="line">│  │  ├─Group0-BAT</span><br><span class="line">│  │  ├─Group0-Distro-Harbor</span><br><span class="line">│  │  ├─Group0-Util</span><br><span class="line">│  │  ├─Group1-Nightly</span><br><span class="line">│  │  ├─Group2-Longevity</span><br><span class="line">│  │  └─Group3-Upgrade</span><br><span class="line">│  ├─robot-indices</span><br><span class="line">│  ├─test-engine-image</span><br><span class="line">│  └─testcases</span><br><span class="line">│      ├─Group1-user-management</span><br><span class="line">│      ├─Group10-Vulnerability</span><br><span class="line">│      ├─Group11-Label</span><br><span class="line">│      ├─Group12-group-management</span><br><span class="line">│      ├─Group2-image-management</span><br><span class="line">│      ├─Group3-RBAC</span><br><span class="line">│      ├─Group4-logging</span><br><span class="line">│      ├─Group5-OVA-install-config</span><br><span class="line">│      ├─Group6-OVA-operation-upgrade-patching</span><br><span class="line">│      ├─Group7-Replication</span><br><span class="line">│      ├─Group8-Configuration</span><br><span class="line">│      └─Group9-Content-trust</span><br><span class="line">└─tools</span><br><span class="line">    ├─copyright</span><br><span class="line">    ├─migrate_chart</span><br><span class="line">    ├─mockery</span><br><span class="line">    ├─release</span><br><span class="line">    ├─spectral</span><br><span class="line">    │  └─functions</span><br><span class="line">    ├─swagger</span><br><span class="line">    │  └─templates</span><br><span class="line">    │      ├─client</span><br><span class="line">    │      └─server</span><br><span class="line">    └─systemd</span><br></pre></td></tr></table></figure><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ul><li><input disabled type="checkbox"> portal</li><li><input disabled type="checkbox"> core</li><li><input disabled type="checkbox"> jobservice</li><li><input disabled type="checkbox"> log</li><li><input disabled type="checkbox"> db</li><li><input disabled type="checkbox"> postgresql</li><li><input disabled type="checkbox"> trivy-adapter</li><li><input disabled type="checkbox"> nginx</li><li><input disabled type="checkbox"> registry</li><li><input disabled type="checkbox"> registryctl</li><li><input disabled type="checkbox"> redis</li><li><input disabled type="checkbox"> exporter</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行哲学</title>
      <link href="/other/The-command-is-all-you-need/"/>
      <url>/other/The-command-is-all-you-need/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行打开软件"><a href="#命令行打开软件" class="headerlink" title="命令行打开软件"></a>命令行打开软件</h1><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><ol><li>定位软件可执行文件的位置，如 <code>sublime text</code>的可执行文件在<code>Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl</code></li><li>在环境变量中加入该值: <code>rubymine</code>使用改方法打开时，命令行会有输出<ul><li>在<code>~/.zshrc</code>使用 alias 的方式，即<code>alias subl=&quot;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&quot;</code></li><li>或者在 <code>/usr/local/bin</code>中做一个软链，链接到可执行文件</li></ul></li></ol><h2 id="Mac-结合-open"><a href="#Mac-结合-open" class="headerlink" title="Mac 结合 open"></a>Mac 结合 open</h2><ol><li>使用 Mac 自带的 open，结合使用软链或者alias的方式，如 rubymine 使用 <code>open -na RubyMine --args &quot;$@&quot;</code></li></ol><h2 id="Windows-结合-powershell"><a href="#Windows-结合-powershell" class="headerlink" title="Windows 结合 powershell"></a>Windows 结合 powershell</h2><ul><li><p>在 powershell 配置文件 <code>$PROFILE</code> 中使用以下两种方式即可实现 <code>alias</code> 效果，可通过 <code>notepad $PROFILE</code> 打开配置文件</p><ol><li><p><code>$PROFILE</code> 添加以下内容，即可实现 aaa 进入文件夹 C:\a\b\c</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span></span> &#123;</span><br><span class="line">    <span class="built_in">Set-Location</span> <span class="literal">-Path</span> <span class="string">&quot;C:\a\b\c&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个叫 <code>aaa.ps1</code> 的文件，添加 <code>Set-Location -Path &#39;C:\a\b\c&#39;</code>。然后在 <code>$PROFILE</code> 添加以下内容，即可实现 aaa 进入文件夹 C:\a\b\c</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-Alias</span> <span class="literal">-Name</span> aaa <span class="literal">-Value</span> <span class="string">&#x27;C:\path\to\aaa.ps1&#x27;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="确定当前可执行文件的位置"><a href="#确定当前可执行文件的位置" class="headerlink" title="确定当前可执行文件的位置"></a>确定当前可执行文件的位置</h1><ol><li>以<code>vscode</code>为例，使用<code>which code</code>得到可执行文件的位置，发现位于<code>/usr/local/bin/code</code></li><li>使用<code>ll /usr/local/bin/code</code>发现是一个软链，链接到了<code>vscode</code>的可执行文件<code>/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code</code></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://stackoverflow.com/questions/29971053/how-to-open-visual-studio-code-from-the-command-line-on-osx">How to open Visual Studio Code from the command line on OSX?</a></p></li><li><p><a href="https://stackoverflow.com/questions/16199581/open-sublime-text-from-terminal-in-macos">Open Sublime Text from Terminal in macOS</a></p></li><li><p><a href="https://stackoverflow.com/questions/29399420/can-i-open-the-ruby-app-from-rubymine-terminal">Can I open the ruby app from Rubymine terminal</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】02-事务</title>
      <link href="/database/mysql-02-transaction/"/>
      <url>/database/mysql-02-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>是一种机制、一个操作序列，包含了一组数据库操作命令，并且把所有的命令作为一个整体一起向系统提交或撤销操作请求，即<strong>这一组数据库命令要么都执行，要么都不执行</strong></li><li>是一个不可分割的工作逻辑单元，在数据库系统.上执行并发操作时，事务是最小的控制单元</li><li>适用于多用户同时操作的数据库系统的场景，如银行、保险公司及证券交易系统等等</li><li>通过事务的整体性以保证数据的一致性</li></ul><h2 id="特点ACID"><a href="#特点ACID" class="headerlink" title="特点ACID"></a>特点ACID</h2><ul><li>原子性（Atomicity）<ul><li>事务是一个完整的操作，事务的各元素是不可分的</li><li>事务中的所有元素必须作为一个整体提交或回滚</li><li>如果事务中的任何元素失败，则整个事务将失败</li></ul></li><li>一致性（Consistency）<ul><li>在事务开始前，数据库中存储的数据处于一致状态</li><li>当事务完成时，数据必须处于一致状态</li><li>在正在进行的事务中，数据可能处于不一致的状态，当事务成功完成时，数据必须再次回到已知的一致状态</li></ul></li><li>隔离性（Isolation）<ul><li>对数据进行修改的所有并发事务是彼此隔离的，表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务</li><li>修改数据的事务可在另一个使用相同数据的事务开始之前访问这些数据，或者在另一个使用相同数据的事务结束之后访问这些数据</li></ul></li><li>持久性（Durability）<ul><li>指不管系统是否发生故障，事务处理的结果都是永久的</li><li>一旦事务被提交，事务的效果会被永久地保留在数据库中</li></ul></li><li>小节<ul><li>原子性：指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生</li><li>一致性：指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏</li><li>隔离性：指在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间</li><li>持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚</li><li>在事务管理中，原子性是基础，隔离性是手段，一致性是目的，持久性是结果</li></ul></li><li><strong>InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？</strong><ul><li>持久性是通过 redo log （重做日志）来保证的</li><li>原子性是通过 undo log（撤销日志） 来保证的</li><li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的</li><li>一致性则是通过持久性+原子性+隔离性来保证</li></ul></li></ul><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><ul><li>在事务的实现机制上，MySQL 采用的是 <code>WAL：Write-ahead logging</code>，预写式日志，机制来实现的</li><li>在使用 WAL 的系统中，<strong>所有的修改都先被写入到日志中，然后再被应用到系统中</strong>。通常包含 redo 和 undo 两部分信息</li><li>为什么需要使用 WAL，然后包含 redo 和 undo 信息呢？<ul><li>举个例子，如果一个系统直接将变更应用到系统状态中，那么在机器掉电重启之后系统需要知道操作是成功了，还是只有部分成功或者是失败了。如果使用了 WAL，那么在重启之后系统可以通过比较日志和系统状态来决定是继续完成操作还是撤销操作</li><li><code>redo log</code> 称为重做日志，每当有操作时，在数据变更之前将操作写入 redo log，这样当发生掉电之类的情况时系统可以在重启后继续操作</li><li><code>undo log</code> 称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态</li></ul></li><li>MySQL 中用 redo log 来在系统 Crash 重启之类的情况时修复数据，而 undo log 来保证事务的原子性</li></ul><h2 id="事务id"><a href="#事务id" class="headerlink" title="事务id"></a>事务id</h2><ul><li><p>一个事务可以是一个<strong>只读事务</strong>，或者是一个<strong>读写事务</strong></p></li><li><p>可以通过 <code>START TRANSACTION READ ONLY</code> 语句开启一个只读事务，在只读事务中<strong>不可以</strong>对普通的表进行增、删、改操作，但<strong>可以</strong>对用户临时表做增、删、改操作</p></li><li><p>可以通过 <code>START TRANSACTION READ WRITE</code> 语句开启一个读写事务，或者使用 BEGIN、START TRANSACTION 语句开启的事务默认也算是读写事务，在读写事务中<strong>可以</strong>对表执行增删改查操作</p></li><li><p><strong>如果某个事务执行过程中对某个表执行了增、删、改操作，那么 InnoDB 存储引擎就会给它分配一个独一无二的事务 id，针对 MySQL 5.7 分配方式如下</strong></p><ul><li>对于只读事务来说，只有在它<strong>第一次</strong>对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务 id，否则的话是不分配事务 id 的</li><li>对于读写事务来说，只有在它<strong>第一次</strong>对某个表执行增、删、改操作时才会为这个事务分配一个事务 id，否则的话也是不分配事务 id 的</li><li>有的时候虽然开启了一个读写事务，但是在这个事务中<strong>全是查询语句</strong>，并没有执行增、删、改的语句，那也就意味着这个事务并不会被分配一个事务 id</li></ul></li><li><p><strong>这个事务 id 本质上就是一个数字，它的分配策略和隐藏列 row_id 的分配策略大抵相同，具体策略如下</strong></p><ul><li>服务器会<strong>在内存中维护一个全局变量</strong>，每当需要为某个事务分配一个事务 id 时，就会把该变量的值当作事务 id 分配给该事务，并且把该变量自增 1</li><li>每当这个变量的值为 256 的倍数时，就会将该变量的值刷新到系统表空间的页号为 5 的页面中一个称之为 Max Trx ID 的属性处，这个属性占用 8 个字节的存储空间</li><li>当系统下一次重新启动时，会将上边提到的 Max Trx ID 属性加载到内存中，<strong>将该值加上 256 之后赋值给全局变量</strong>，因为在上次关机时该全局变量的值可能大于Max Trx ID 属性值</li><li>这样就可以保证整个系统中分配的事务 id 值是一个递增的数字。先被分配 id 的事务得到的是较小的事务 id，后被分配 id 的事务得到的是较大的事务 id</li></ul></li></ul><h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li><p>全称 Multi-Version Concurrency Control，即多版本并发控制，主要是为了<strong>提高数据库的并发性能</strong></p></li><li><p><strong>同一行数据</strong>平时发生读写请求时，会上锁阻塞住。但 MVCC 用更好的方式去处理读写请求，做到在发生读写请求冲突时不用加锁</p></li><li><p>这个读是指的<strong>快照读</strong>，而不是当前读，当前读是一种加锁操作，是悲观锁</p></li><li><p><strong>在事务并发执行遇到的问题如下</strong></p><ul><li><strong>脏读</strong>：如果一个事务读到了另一个未提交事务修改过的数据，那就意味着发生了脏读</li><li><strong>不可重复读</strong>：如果一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那就意味着发生了不可重复读</li><li><strong>幻读</strong>：如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来，那就意味着发生了幻读，幻读强调的是一个事务按照某个相同条件多次读取记录时，后读取时读到了之前没有读到的记录，幻读只是<strong>重点强调了读取到了之前读取没有获取到的记录</strong></li></ul></li><li><p><strong>MySQL 在 REPEATABLE READ 隔离级别下，是可以很大程度避免幻读问题的发生的</strong></p></li></ul><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li><p><strong>读未提交（read uncommitted）</strong>，指一个事务还没提交时，它做的变更就能被其他事务看到；</p></li><li><p><strong>读提交（read committed）</strong>，指一个事务提交之后，它做的变更才能被其他事务看到；</p></li><li><p><strong>可重复读（repeatable read）</strong>，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，<strong>MySQL InnoDB 引擎的默认隔离级别</strong>；</p></li><li><p><strong>串行化（serializable）</strong>；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行</p></li><li><p>按隔离水平高低排序如下</p><p><img src="/database/mysql-02-transaction/image-20231119215208666.png" alt="image-20231119215208666"></p></li><li><p>针对不同的隔离级别，并发事务时可能发生的现象也会不同</p><p><img src="/database/mysql-02-transaction/image-20231119215230394.png" alt="image-20231119215230394"></p></li></ul><h2 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h2><ul><li><p>对于使用 InnoDB 存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列</p></li><li><p><strong>trx_id</strong>：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的事务 id 赋值给 trx_id 隐藏列</p></li><li><p><strong>roll_pointer</strong>：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到 undo 日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修 改前的信息</p></li><li><p>演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE mvcc_test (</span><br><span class="line">id INT,</span><br><span class="line">name VARCHAR(100),</span><br><span class="line">domain varchar(100),</span><br><span class="line">PRIMARY KEY (id)</span><br><span class="line">) Engine=InnoDB CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO mvcc_test VALUES(1, &#x27;habit&#x27;, &#x27;演示mvcc&#x27;);</span><br></pre></td></tr></table></figure><ul><li><p>假设插入该记录的事务 id&#x3D;50，那么该条记录的展示如图</p><p><img src="/database/mysql-02-transaction/image-20231119213332106.png" alt="image-20231119213332106"></p></li><li><p>﻿﻿假设之后两个事务 id 分别为 70、90 的事务对这条记录进行 UPDATE 操作</p><p><img src="/database/mysql-02-transaction/image-20231119213344807.png" alt="image-20231119213344807"></p></li><li><p>每次对记录进行改动，都会记录一条 <strong>undo 日志</strong>，每条 undo 日志也都有一个 roll_pointer 属性，可以将这些 undo 日志都连起来，串成一个链表</p><p><img src="/database/mysql-02-transaction/image-20231119213411995.png" alt="image-20231119213411995"></p></li><li><p>对该记录每次更新后，都会将旧值放到一条 undo 日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被 roll_pointer 属性连接成一个链表，把这个链表称之为版本链，版本链的头节点就是当前记录最新的值。另外，每个版本中还包含生成该版本时对应的事务 id。于是可以利用这个记录的版本链来控制并发事务访问相同记录的行为，那么这种机制就被称之为：<strong>多版本并发控制，即 MVCC</strong></p></li></ul></li></ul><h2 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h2><ul><li><p>对于使用 READ UNCOMMITTED 隔离级别的事务来说，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了</p></li><li><p>对于使用 SERIALIZABLE 隔离级别的事务来说，InnoDB 使用加锁的方式来访问记录</p></li><li><p>对于使用 READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，都必须保证读到已经提交了的事务修改过的记录，也就是说假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是：READ COMMITTED 和 REPEATABLE READ 隔离级别在不可重复读和幻读上的区别是从哪里来的，其实结合前面的知识，这两种隔离级别关键是需要判断一下版本链中的哪个版本是当前事务可见的</p></li><li><p><strong>为此，InnoDB 提出了一个 ReadView 的概念，这个 ReadView 中主要包含 4 个比较重要的内容</strong></p><ul><li><p><strong>m_ids</strong>：表示在生成 ReadView 时当前系统中<strong>活跃的读写事务</strong>的事务id 列表</p></li><li><p><strong>min_trx_id</strong>：表示在生成 ReadView 时当前系统中活跃的读写事务中最小的事务 id，也就是 m_ids 中的最小值</p></li><li><p><strong>max_trx_id</strong>：表示在生成 ReadView 时系统中应该分配给下一个事务的 id 值，注：max_trx_id 并不是 m_ids 中的最大值，事务 id 是递增分配的。比方说现在有 id 为 1，2，3 这三个事务，之后 id 为 3 的事务提交了。那么一个新的读事务在生成 ReadView 时，m_ids 就包括 1 和 2，min_trx_id 的值就是 1，max_trx_id 的值就是 4</p></li><li><p><strong>creator_trx_id</strong>：表示生成该 ReadView 的事务的事务 id</p><p><img src="/database/mysql-02-transaction/ReadView.drawio.png" alt="img"></p></li></ul></li><li><p>有了这个 ReadView，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见</p><ol><li>如果被访问版本的 trx_id 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问</li><li>如果被访问版本的 trx_id 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 前已经提交，所以该版本可以被当前事务访问</li><li>如果被访问版本的 trx_id 属性值大于或等于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 后才开启，所以该版本不可以被当前事务访问</li><li>如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id之间 min_trx_id &lt; trx_id &lt; max_trx_id，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问</li><li>如果某个版本的数据对当前事务不可见的话，那就<strong>顺着版本链找到下一个版本的数据</strong>，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录</li></ol></li><li><p>在 MySQL 中，READ COMMITTED 和 REPEATABLE READ 隔离级别的一个非常大的区别就是它们生成 ReadView 的时机不同</p><ul><li><strong>READ COMMITTED</strong>：每次读取数据前都生成一个 ReadView</li><li><strong>REPEATABLE READ：</strong>在第一次读取数据时生成一个 ReadView</li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>还是以表 mvcc_test 为例，假设现在表 mvcc_test 中只有一条由事务 id 为 50 的事务插入的一条记录，接下来看一下 READ COMMITTED 和 REPEATABLE READ 所谓的生成 ReadView 的时机不同到底不同在哪里</li></ul><h3 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ COMMITTED"></a>READ COMMITTED</h3><ul><li><p>每次读取数据前都生成一个 ReadView</p></li><li><p>比方说现在系统里有两个事务id 分别为 70、90 的事务在执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- T 70</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_70_01&#x27; WHERE id = 1;</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_70_02&#x27; WHERE id = 1;</span><br></pre></td></tr></table></figure></li><li><p>此时表 mvcc_test 中 id 为 1 的记录得到的版本链表如下所示</p><p><img src="/database/mysql-02-transaction/image-20231119214123863.png" alt="image-20231119214123863"></p></li><li><p>﻿﻿假设现在有一个使用 READ COMMITTED 隔离级别的事务开始执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 READ COMMITTED 隔离级别的事务</span><br><span class="line">BEGIN;</span><br><span class="line">-- SELECE1：Transaction 70、90 未提交</span><br><span class="line">SELECT * FROM mvcc_test  WHERE id = 1; </span><br><span class="line">-- 得到的列 name 的值为&#x27;habit&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>这个 SELECE1 的执行过程如下</strong></p><ul><li>在执行 SELECT 语句时会先生成一个 ReadView，ReadView 的 m_ids 列表的内容就是[70, 90]，min_trx_id 为 70，max_trx_id 为 91，creator_trx_id 为 0</li><li>然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列 name 的内容是 habit_trx_id_70_02，该版本的 trx_id 值为 70，在 m_ids 列表内，所以不符合可见性要求第 4 条：<strong>如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id之间 min_trx_id &lt; trx_id &lt; max_trx_id，那就需要判断一下trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问</strong>。根据 roll_pointer 跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit_trx_id_70_01，该版本的 trx_id 值也为 70，也在 m_ids 列表内，所以也不符合要求，继续跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit，该版本的 trx_id 值为 50，小于 ReadView 中的 min_trx_id 值，所以这个版本是符合要求的第 2 条：<strong>如果被访问版本的 trx_id 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 前已经提交，所以该版本可以被当前事务访问。</strong>最后返回的版本就是这条列 name 为 habit 的记录</li></ul></li><li><p>之后，把事务 id 为 70 的事务提交一下，然后再到事务 id 为 90 的事务中更新一下表 mvcc_test 中 id 为 1 的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- T 90</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_90_01&#x27; WHERE id = 1;</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_90_02&#x27; WHERE id = 1;</span><br></pre></td></tr></table></figure></li><li><p>此时表 mvcc 中 id 为 1 的记录的版本链就长这样</p><p><img src="/database/mysql-02-transaction/image-20231119214250488.png" alt="image-20231119214250488"></p></li><li><p>然后再到刚才使用 READ COMMITTED 隔离级别的事务中继续查找这个 id 为 1 的记录，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 READ COMMITTED 隔离级别的事务</span><br><span class="line">BEGIN;</span><br><span class="line">-- SELECE1：Transaction 70、90 均未提交</span><br><span class="line">SELECT * FROM mvcc_test WHERE id = 1; -- 得到的列 name 的值为&#x27;habit&#x27;</span><br><span class="line">-- SELECE2：Transaction 70 提交，Transaction 90 未提交</span><br><span class="line">SELECT * FROM mvcc_test WHERE id = 1; -- 得到的列 name 的值为&#x27;habit_trx_id_70_02&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>这个SELECE2 的执行过程如下</strong></p><ul><li>在执行 SELECT 语句时又会单独生成一个 ReadView，该 ReadView 的 m_ids 列表的内容就是[90]，min_trx_id 为90，max_trx_id 为 91，creator_trx_id 为 0</li><li>然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列 name 的内容是 habit_trx_id_90_02，该版本的 trx_id 值为 90，在 m_ids 列表内，所以不符合可见性要求，根据 roll_pointer 跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit_trx_id_90_01，该版本的 trx_id 值为 90，也在 m_ids 列表内，所以也不符合要求，继续跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit_trx_id_70_02，该版本的 trx_id 值为 70，小于 ReadView 中的 min_trx_id 值 90，所以这个版本是符合要求的，最后返回这个版本中列 name 为 habit_trx_id_70_02 的记录</li><li>以此类推，如果之后事务 id 为 90 的记录也提交了，再次在使用 READ COMMITTED 隔离级别的事务中查询表 mvcc_test 中 id 值为 1 的记录时，得到的结果就是 habit_trx_id_90_02 了</li></ul></li><li><p><strong>总结：</strong>使用 READ COMMITTED 隔离级别的事务在每次查询开始时都会生成一个独立的 ReadView</p></li></ul><h3 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE READ"></a>REPEATABLE READ</h3><ul><li><p>在第一次读取数据时生成一个 ReadView</p></li><li><p>对于使用 REPEATABLE READ 隔离级别的事务来说，只会在第一次执行查询语句时生成一个 ReadView，之后的查询就不会重复生成了</p></li><li><p>比方说现在系统里有两个事务id 分别为 70、90 的事务在执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- T 70</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_70_01&#x27; WHERE id = 1;</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_70_02&#x27; WHERE id = 1;</span><br></pre></td></tr></table></figure></li><li><p>此时表 mvcc_test 中 id 为 1 的记录得到的版本链表如下所示</p><p><img src="/database/mysql-02-transaction/image-20231119214533045.png" alt="image-20231119214533045"></p></li><li><p>﻿﻿假设现在有一个使用 REPEATABLE READ 隔离级别的事务开始执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 REPEATABLE READ 隔离级别的事务</span><br><span class="line">BEGIN;</span><br><span class="line">-- SELECE1：Transaction 70、90 未提交</span><br><span class="line">SELECT * FROM mvcc_test WHERE id = 1; -- 得到的列name 的值为&#x27;habit&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>这个 SELECE1 的执行过程如下</strong></p><ul><li>在执行 SELECT 语句时会先生成一个 ReadView，ReadView 的 m_ids 列表的内容就是[70, 90]，min_trx_id 为 70，max_trx_id 为 91，creator_trx_id 为 0</li><li>然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列 name 的内容是 habit_trx_id_70_02，该版本的 trx_id 值为 70，在 m_ids 列表内，所以不符合可见性要求，根据 roll_pointer 跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit_trx_id_70_01，该版本的 trx_id 值也为 70，也在 m_ids 列表内，所以也不符合要求，继续跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit，该版本的 trx_id 值为 50，小于 ReadView 中的 min_trx_id 值，所以这个版本是符合要求的，最后返回的就是这条列name 为 habit 的记录</li></ul></li><li><p>之后，把事务 id 为 70 的事务提交一下，然后再到事务 id 为 90 的事务中更新一下表 mvcc_test 中 id 为 1 的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 REPEATABLE READ 隔离级别的事务</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_90_01&#x27; WHERE id = 1;</span><br><span class="line">UPDATE mvcc_test  SET name = &#x27;habit_trx_id_90_02&#x27; WHERE id = 1;</span><br></pre></td></tr></table></figure></li><li><p>此刻，表 mvcc_test 中 id 为 1 的记录的版本链就长这样</p><p><img src="/database/mysql-02-transaction/image-20231119214653258.png" alt="image-20231119214653258"></p></li><li><p>然后再到刚才使用 REPEATABLE READ 隔离级别的事务中继续查找这个 id 为 1 的记录，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 REPEATABLE READ 隔离级别的事务</span><br><span class="line">BEGIN;</span><br><span class="line">-- SELECE1：Transaction 70、90 均未提交</span><br><span class="line">SELECT * FROM mvcc_test WHERE id = 1; -- 得到的列 name 的值为&#x27;habit&#x27;</span><br><span class="line">-- SELECE2：Transaction 70 提交，Transaction 90 未提交</span><br><span class="line">SELECT * FROM mvcc_test WHERE id = 1;  -- 得到的列 name 的值为&#x27;habit&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>这个 SELECE2 的执行过程如下</strong></p><ul><li>因为当前事务的隔离级别为 REPEATABLE READ，而之前在执行 SELECE1 时已经生成过 ReadView 了，所以此时直接复用之前的 ReadView，之前的 ReadView的 m_ids 列表的内容就是[70, 90]，min_trx_id 为 70，max_trx_id 为 91， creator_trx_id 为 0</li><li>然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列 name 的内容是 habit_trx_id_90_02，该版本的 trx_id 值为 90，在 m_ids 列表内，所以不符合可见性要求，根据 roll_pointer 跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit_trx_id_90_01，该版本的 trx_id 值为 90，也在 m_ids 列表内，所以也不符合要求，继续跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit_trx_id_70_02，该版本的 trx_id 值为 70，而 m_ids 列表中是包含值为 70 的事务 id 的，所以该版本也不符合要求，同理下一个列 name 的内容是 habit_trx_id_70_01 的版本也不符合要求。继续跳到下一个版本</li><li>下一个版本的列 name 的内容是 habit，该版本的 trx_id 值为 50，小于 ReadView 中的 min_trx_id 值 70，所以这个版本是符合要求的，最后返回给用户的版本就是这条列 name 为 habit 的记录</li><li>也就是说两次 SELECT 查询得到的结果是重复的，记录的列 name 值都是 habit，这就是可重复读的含义。如果之后再把事务 id 为 90 的记录提交了，然后再到刚才使用 REPEATABLE READ 隔离级别的事务中继续查找这个 id 为 1 的记录，得到的结果还是 habit</li></ul></li></ul><h2 id="MVCC-下的幻读解决和幻读现象"><a href="#MVCC-下的幻读解决和幻读现象" class="headerlink" title="MVCC 下的幻读解决和幻读现象"></a>MVCC 下的幻读解决和幻读现象</h2><ul><li><p>REPEATABLE READ 隔离级别下 MVCC 可以解决不可重复读问题，那么幻读呢？MVCC 是怎么解决的？幻读是一个事务按照某个相同条件多次读取记录时，后读取时读到了之前没有读到的记录，而这个记录来自另一个事务添加的新记录</p></li><li><p>可以想想，在 REPEATABLE READ 隔离级别下的事务 T1 先根据某个搜索条件读取到多条记录，然后事务 T2 插入一条符合相应搜索条件的记录并提交，然后事务 T1 再根据相同搜索条件执行查询。结果会是什么？按照 ReadView 中的比较规则中的第 3 条和第 4 条不管事务 T2 比事务 T1 是否先开启，事务 T1 都是看不到 T2 的提交的</p></li><li><p>但是，在 REPEATABLE READ 隔离级别下 InnoDB 中的 MVCC 可以很大程度地避免幻读现象，而不是完全禁止幻读。怎么回事呢？来看下面的情况</p><p><img src="/database/mysql-02-transaction/image-20231119215659030.png" alt="image-20231119215659030"></p></li><li><p>﻿﻿首先在事务 T1 中执行：<code>select * from mvcc_test where id = 30</code>; 这个时候是找不到 id &#x3D; 30 的记录的</p></li><li><p>在事务 T2 中，执行插入语句：<code>insert into mvcc_test values(30,&#39;luxi&#39;,&#39;luxi&#39;);</code></p></li><li><p>此时回到事务 T1，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update mvcc_test set domain=&#x27;luxi_t1&#x27; where id=30;</span><br><span class="line">select * from mvcc_test where id = 30;</span><br></pre></td></tr></table></figure></li><li><p>事务T1 很明显出现了幻读现象</p></li><li><p>在 REPEATABLE READ 隔离级别下，T1 第一次执行普通的 SELECT 语句时生成了一个 ReadView，之后 T2 向 mvcc_test 表中新插入一条记录并提交</p></li><li><p>ReadView 并不能阻止 T1 执行 UPDATE 或者 DELETE 语句来改动这个新插入的记录，由于 T2 已经提交，因此改动该记录并不会造成阻塞，但是这样一来，这条新记录的 trx_id 隐藏列的值就变成了 T1 的事务 id。之后 T1 再使用普通的 SELECT 语句去查询这条记录时就可以看到这条记录了，也就可以把这条记录返回给客户端。因为这个特殊现象的存在，可以认为 MVCC 并不能完全禁止幻读</p></li></ul><h2 id="mvcc-总结"><a href="#mvcc-总结" class="headerlink" title="mvcc 总结"></a>mvcc 总结</h2><ul><li>从上边的描述中可以看出来，所谓的 MVCC（Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用 READ COMMITTD、REPEATABLE READ 这两种隔离级别的事务在执行普通的 SELECT 操作时访问记录的版本链的过程，这样子可以使不同事务的读写、写读操作并发执行，从而提升系统性能</li><li>READ COMMITTD、REPEATABLE READ 这两个隔离级别的一个很大不同就是：生成 ReadView 的时机不同，READ COMMITTD 在每一次进行普通 SELECT 操作前都会生成一个 ReadView，而 REPEATABLE READ 只在第一次进行普通 SELECT 操作前生成一个 ReadView，之后的查询操作都重复使用这个 ReadView 就好了，从而基本上可以避免幻读现象</li></ul><h1 id="InnoDB-的-Buffer-Pool"><a href="#InnoDB-的-Buffer-Pool" class="headerlink" title="InnoDB 的 Buffer Pool"></a>InnoDB 的 Buffer Pool</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>对于使用 InnoDB 作为存储引擎的表来说，不管是用于存储用户数据的索引，包括：聚簇索引和二级索引，还是各种系统数据，都是<strong>以页的形式存放在表空间中的</strong>，而所谓的表空间只不过是 InnoDB 对文件系统上一个或几个实际文件的抽象，也就是说数据还是存储在磁盘上的</li><li>但是磁盘的速度慢，所以 InnoDB 存储引擎在处理客户端的请求时，当需要访问某个页的数据时，就会把完整的页的数据全部加载到内存中，即使只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中。将整个页加载到内存中后就可以进行读写访问了，在进行完读写访问之后并不着急把该页对应的内存空间释放掉，而是将其缓存起来，这样将来有请求再次访问该页面时，就可以省去磁盘 IO 的开销了</li></ul><h2 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h2><ul><li><p>InnoDB 为了缓存磁盘中的页，在 MySQL 服务器<strong>启动的时候就向操作系统申请了一片连续的内存</strong>，这块连续内存叫做：Buffer Pool，中文名：缓冲池</p></li><li><p>默认情况下 Buffer Pool 只有 128M 大小，查看该值：<code>show variables like &#39;innodb_buffer_pool_size&#39;;</code></p></li><li><p>可以在启动服务器的时候配置 innodb_buffer_pool_size 参数的值，它表示 Buffer Pool 的大小，配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_size = 268435456</span><br></pre></td></tr></table></figure><ul><li>其中，268435456 的单位是字节，也就是指定 Buffer Pool 的大小为 256M，Buffer Pool 也不能太小，最小值为 5M，当小于该值时会自动设置成 5M</li></ul></li><li><p>启动 MySQL 服务器的时候，需要完成对 Buffer Pool 的初始化过程，就是先向操作系统申请 Buffer Pool 的内存空间，然后把它划分成若干对控制块和缓存页。但是此时并没有真实的磁盘页被缓存到 Buffer Pool 中，之后随着程序的运行，会不断的有磁盘上的页被缓存到 Buffer Pool 中</p></li><li><p>在 Buffer Pool 中会创建多个缓存页，默认的缓存页大小和在磁盘上默认的页大小是一样的，都是 16KB</p></li><li><p>那么怎么知道该页在不在 Buffer Pool 中呢？</p><ul><li>在查找数据的时候，先通过哈希表中查找 key 是否在哈希表中，如果在证明 Buffer Pool 中存在该缓存也信息，如果不存在证明不存该缓存也信息，则通过读取磁盘加载该页信息放到 Buffer Pool 中，哈希表中的 key 是通过表空间号+ 页号作组成的，value 是 Buffer Pool 的缓存页</li></ul></li></ul><h2 id="flush-链表的管理"><a href="#flush-链表的管理" class="headerlink" title="flush 链表的管理"></a>flush 链表的管理</h2><ul><li>如果修改了 Buffer Pool 中某个缓存页的数据，那它就和磁盘上的页不一致了，这样的缓存页也被称为：脏页<ul><li>最简单的做法就是每发生一次修改就立即同步到磁盘上对应的页上，但是频繁的往磁盘中写数据会严重的影响程序的性能</li><li>所以每次修改缓存页后，并不着急把修改同步到磁盘上，而是在未来的某个时间进行同步</li><li>但是如果不立即同步到磁盘的话，那之后再同步的时候怎么知道 Buffer Pool 中哪些页是脏页，哪些页从来没被修改过呢？总不能把所有的缓存页都同步到磁盘上吧，如果 Buffer Pool 被设置的很大，那一次性同步会非常慢</li></ul></li><li>所以，需要再创建一个存储脏页的链表，凡是修改过的缓存页对应的控制块都会作为一个节点加入到一个链表中，因为这个链表节点对应的缓存页都是需要被刷新到磁盘上的，所以也叫 flush 链表</li></ul><h2 id="刷新脏页到磁盘"><a href="#刷新脏页到磁盘" class="headerlink" title="刷新脏页到磁盘"></a>刷新脏页到磁盘</h2><ul><li>后台有专门的线程每隔一段时间负责把脏页刷新到磁盘，这样可以不影响用户线程处理正常的请求</li><li>从 flush 链表中刷新一部分页面到磁盘，后台线程也会定时从 flush 链表中刷新一部分页面到磁盘，刷新的速率取决于当时系统是不是很繁忙。这种刷新页面的方式被称之为：BUF_FLUSH_LIST</li></ul><h1 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>InnoDB 存储引擎是以页为单位来管理存储空间的，增删改查操作其实本质上都是在访问页面，包括：读页面、写页面、创建新页面等操作。在真正访问页面之前，需要把在磁盘上的页缓存到内存中的 Buffer Pool 之后才可以访问。但是在事务的时候又强调过一个称之为持久性的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失</li><li>如果只在内存的 Buffer Pool 中修改了页面，假设在事务提交后突然发生了某个故障，导致内存中的数据都失效了，那么这个已经提交了的事务对数据库中所做的更改也就跟着丢失了，这是所不能忍受的。那么如何保证这个持久性呢？一个很简单的做法就是在事务提交完成之前把该事务所修改的所有页面都刷新到磁盘，但是这个简单粗暴的做法有些问题<ul><li>刷新一个完整的数据页太浪费了；有时候仅仅修改了某个页面中的一个字节，但是在 InnoDB 中是以页为单位来进行磁盘 IO 的，也就是说在该事务提交时不得不将一个完整的页面从内存中刷新到磁盘，一个页面默认是16KB 大小，只修改一个字节就要刷新 16KB 的数据到磁盘上显然是太浪费了</li><li>随机 IO 刷起来比较慢；一个事务可能包含很多语句，即使是一条语句也可能修改许多页面，该事务修改的这些页面可能并不相邻，这就意味着在将某个事务修改的 Buffer Pool 中的页面刷新到磁盘时，需要进行很多的随机 IO，随机 IO 比顺序 IO 要慢，尤其对于传统的机械硬盘来说</li></ul></li><li>只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。其实没有必要在每次事务提交时就把该事务在内存中修改过的全部页面刷新到磁盘，只需要把修改了哪些东西记录一下就好，比方说：某个事务将系统表空间中的第 5 号页面中偏移量为 5000 处的那个字节的值 0 改成 5 只需要记录一下：<strong>将第 5 号表空间的 5 号页面的偏移量为 5000 处的值更新为：5</strong></li><li>这样在事务提交时，把上述内容刷新到磁盘中，即使之后系统崩溃了，重启之后只要按照上述内容所记录的步骤重新更新一下数据页，那么该事务对数据库中所做的修改又可以被恢复出来，也就意味着满足持久性的要求。因为在系统崩溃重启时需要按照上述内容所记录的步骤重新更新数据页，所以上述内容也被称之为：<strong>重做日志，即：redo log</strong>。与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的 redo log 刷新到磁盘的好处如下<ul><li>redo log 占用的空间非常小存储表空间 ID、页号、偏移量以及需要更新的值所需的存储空间是很小的</li><li>redo log 是顺序写入磁盘的在执行事务的过程中，每执行一条语句，就可能产生若干条 redo log，这些日志是按照产生的顺序写入磁盘的，也就是使用顺序 IO</li></ul></li></ul><h2 id="写入过程"><a href="#写入过程" class="headerlink" title="写入过程"></a>写入过程</h2><ul><li>InnoDB 为了更好的进行系统崩溃恢复，把一次原子操作生成的 redo log 都放在了大小为 512 字节的块（block）中</li><li>为了解决磁盘速度过慢的问题而引入了 Buffer Pool。同理，写入 redo log 时也不能直接写到磁盘上，实际上在服务器启动时就向操作系统申请了一大片称之为 redo log buffer 的连续内存空间，即：redo log 缓冲区，也可以简称：log buffer。这片内存空间被划分成若干个连续的 redo log block，可以通过启动参数innodb_log_buffer_size 来指定 log buffer 的大小，该启动参数的默认值为：16MB</li><li>向 log buffer 中写入 redo log 的过程是顺序的，也就是先往前边的 block 中写，当该 block 的空闲空间用完之后再往下一个 block 中写</li></ul><h2 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h2><ul><li>log buffer 空间不足时，如果不停地往这个有限大小的 log buffer 里塞入日志，很快它就会被填满。InnoDB 认为如果当前写入 log buffer 的 redo log 量已 经占满了 log buffer 总容量的大约一半左右，就需要把这些日志刷新到磁盘上</li><li>事务提交时，必须要把修改这些页面对应的 redo log 刷新到磁盘</li><li>后台有一个线程，大约<strong>每秒</strong>都会刷新一次 log buffer 中的 redo log 到磁盘</li><li>正常关闭服务器时等等</li></ul><h1 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ul><li><p>事务需要保证原子性，也就是事务中的操作要么全部完成，要么什么也不做。但是偏偏有时候事务执行到一半会出现一些情况，比如</p><ul><li>情况一：事务执行过程中可能遇到各种错误，比如服务器本身的错误，操作系统错误，甚至是突然断电导致的错误</li><li>情况二：程序员可以在事务执行过程中手动输入 ROLLBACK 语句结束当前的事务的执行</li></ul></li><li><p>这两种情况都会导致事务执行到一半就结束，但是事务执行过程中可能已经修改了很多东西，为了保证事务的原子性，需要把东西改回原先的样子，这个过程就称之为回滚，即：rollback，这样就可以造成这个事务看起来什么都没做，所以符合原子性要求</p></li><li><p>每当要对一条记录做改动时，都需要把回滚时所需的东西都给记下来，比如</p><ul><li>插入一条记录时，至少要把这条记录的主键值记下来，之后回滚的时候只需要把这个主键值对应的记录删掉</li><li>删除了一条记录，至少要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录插入到表中</li><li>修改了一条记录，至少要把修改这条记录前的旧值都记录下来，这样之后回滚时再把这条记录更新为旧值</li></ul></li><li><p>这些为了回滚而记录的这些东西称之为撤销日志，即：undo log。这里需要注意的一点是，由于查询操作并不会修改任何用户记录，所以在查询操作执行时，并不需要记录相应的 undo log</p></li></ul><h2 id="undo-日志的格式"><a href="#undo-日志的格式" class="headerlink" title="undo 日志的格式"></a>undo 日志的格式</h2><ul><li>为了实现事务的原子性，InnoDB 存储引擎在实际进行增、删、改一条记录时，都需要先把对应的 undo 日志记下来。一般每对一条记录做一次改动，就对应着一条 undo 日志，但在某些更新记录的操作中，也可能会对应着 2 条 undo 日志</li><li>一个事务在执行过程中可能新增、删除、更新若干条记录，也就是说需要记录很多条对应的 undo 日志，这些 undo 日志会被从 0 开始编号，也就是说根据生成的顺序分别被称为第 0 号 undo 日志、第 1 号 undo 日志、…、第 n 号 undo 日志等，这个编号也被称之为 undo no</li><li>这些 undo 日志是被记录到类型为 FIL_PAGE_UNDO_LOG 的页面中。这些页面可以从系统表空间中分配，也可以从一种专门存放 undo 日志的表空间，也就是所谓的 undo tablespace 中分配</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://mp.weixin.qq.com/s/0UChNwqamxN7Bq13z7CAdQ">MYSQL 事务的底层原理</a></li><li><a href="https://blog.csdn.net/cxin1225/article/details/131293765">mysql数据库之事务</a></li><li><a href="https://xiaolincoding.com/mysql/transaction/mvcc.html#%E4%BA%8B%E5%8A%A1%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7">事务隔离级别是怎么实现的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 事务 </tag>
            
            <tag> MVCC </tag>
            
            <tag> redo log </tag>
            
            <tag> undo log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose使用说明</title>
      <link href="/tools/The-trick-of-docker-compose/"/>
      <url>/tools/The-trick-of-docker-compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h1><ul><li><code>docker-compose</code>是为了方便启动多个容器</li><li><code>docker-compose</code>是<code>1.x</code>，<code>docker compose</code>是<code>2.x</code>，2023年6月后，<code>1.x</code>不再更新</li></ul><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><ul><li>参考<a href="https://docs.docker.com/compose/install">docs.docker.com&#x2F;compose&#x2F;install</a></li></ul><h2 id="clean-up-workspace"><a href="#clean-up-workspace" class="headerlink" title="clean up workspace"></a>clean up workspace</h2><ul><li>删除所有容器：<code>docker container rm $(docker container ls -aq)</code>，强制删除<code>docker container rm -f $(docker container ls -aq)</code></li><li>删除所有镜像：<code>docker image rm $(docker image ls -q)</code> </li><li><code>-a</code>列出所有容器，<code>-q</code>获取<code>id</code></li></ul><h2 id="json-vs-yaml"><a href="#json-vs-yaml" class="headerlink" title="json vs yaml"></a>json vs yaml</h2><ul><li><p>json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker-compose tutorial&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;is_good&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;software&quot;</span><span class="punctuation">,</span> <span class="string">&quot;devops&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;first_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">docker-compose</span> <span class="string">tutorial</span></span><br><span class="line"><span class="attr">price:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">is_good:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">software</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line">  <span class="attr">first_name:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">last_name:</span> <span class="string">world</span></span><br></pre></td></tr></table></figure></li><li><p><code>json</code>解析速度比<code>yaml</code>快（<code>yaml</code>所有都视为字符串，数字需要额外处理）； <code>json</code>通常用于数据交换，<code>yaml</code>通常用于配置文件</p></li></ul><h1 id="compose-file"><a href="#compose-file" class="headerlink" title="compose file"></a>compose file</h1><ul><li><code>docker-compose</code>会默认启动文件名为<code>docker-compose.yml</code>的文件，<code>docker compose</code>会默认启动<code>compose.yaml</code>，<a href="https://docs.docker.com/compose/compose-file/03-compose-file/">后者优先级较高</a></li><li>使用<code>docker-compose</code>启动的服务，会创建一个默认网络用于服务通信，名字通常为<code>启动路径名_default</code>，即<code>docker-compose.yml</code>在<code>hello</code>文件夹下，则为<code>hello_default</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="comment"># 使用 docker-compose build 就会在指定路径下寻找 Dockerfile 文件，并构建镜像</span></span><br><span class="line">    <span class="comment"># 也可以使用 docker-compose up --build 构建并启动服务</span></span><br><span class="line">    <span class="comment"># --no-cache 不适用缓存，重新构建</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./frontend</span></span><br><span class="line">    <span class="comment"># 端口映射 主机端口: 容器内地址</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./backend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3001</span><span class="string">:3001</span></span><br><span class="line">    <span class="comment"># 指定后端连接数据库地址，DB_URL 是视频演示的特定值，与程序相关</span></span><br><span class="line">    <span class="comment"># 其中 mongodb:// 是固定写法</span></span><br><span class="line">    <span class="comment"># db 为下面数据库服务名称</span></span><br><span class="line">    <span class="comment"># databasename 为指定数据库名</span></span><br><span class="line">    <span class="attr">enviroment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">DB_URL:</span> <span class="string">mongodb://db/databasename</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:4.0-xenial</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="comment"># 指定持久化卷映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">myvolunme:/data/db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明卷，用于持久化</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">myvolunme:</span></span><br></pre></td></tr></table></figure><h1 id="compose-model"><a href="#compose-model" class="headerlink" title="compose model"></a>compose model</h1><p><img src="/tools/The-trick-of-docker-compose/image-20231105175443185.png" alt="image-20231105175443185"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网示例</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:8043&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">httpd-config</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">server-certificate</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/database</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/etc/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">flocker</span></span><br><span class="line">    <span class="attr">driver_opts:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">&quot;10GiB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">httpd-config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line">  <span class="attr">server-certificate:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="comment"># The presence of these objects is sufficient to define them</span></span><br><span class="line">  <span class="attr">front-tier:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">back-tier:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>2 services, backed by Docker images: <code>webapp</code> and <code>database</code></li><li>1 secret (HTTPS certificate), injected into the frontend</li><li>1 configuration (HTTP), injected into the frontend</li><li>1 persistent volume, attached to the backend</li><li>2 networks</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>Docker Compose Tutorial，<a href="https://www.bilibili.com/video/BV1YM41197Ao">B站</a>, <a href="https://www.youtube.com/watch?v=HG6yIjZapSA">youtube</a></li><li><a href="https://docs.docker.com/compose/compose-file/">compose file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建 gitlab 和 gitlab-runner</title>
      <link href="/tutorial/install-gitlab-and-gitlab-runner/"/>
      <url>/tutorial/install-gitlab-and-gitlab-runner/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><p>本例均以<code>docker</code>进行安装</p></li><li><p>系统环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">uname</span> -a</span></span><br><span class="line">Linux code 5.4.0-159-generic #176-Ubuntu SMP Mon Aug 14 12:04:20 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lsb_release -a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br></pre></td></tr></table></figure></li><li><p>docker 与 docker-compose </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           23.0.1</span><br><span class="line"> API version:       1.42</span><br><span class="line"> Go version:        go1.19.5</span><br><span class="line"> Git commit:        a5ee5b1</span><br><span class="line"> Built:             Thu Feb  9 19:46:56 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          23.0.1</span><br><span class="line">  API version:      1.42 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.19.5</span><br><span class="line">  Git commit:       bc3805a</span><br><span class="line">  Built:            Thu Feb  9 19:46:56 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.18</span><br><span class="line">  GitCommit:        2456e983eb9e37e47538f59ea18f2043c9a73640</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker compose version</span></span><br><span class="line">Docker Compose version v2.16.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h1><ol><li><p>设定环境变量，在<code>~/.bashrc</code>中加入<code>export GITLAB_HOME=/srv/gitlab</code>，并生效<code>source ~/.bashrc</code>，详见<a href="https://docs.gitlab.com/ee/install/docker.html#set-up-the-volumes-location">Set up the volumes location</a></p></li><li><p>创建<code>docker-compose.yml</code>文件，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  gitlab/gitlab-ee:latest 版本信息</span></span><br><span class="line"><span class="comment"># &quot;gitlab/gitlab-ee@sha256:82e5d49574964bc0a5b8942ac2b92ac7f3618832d6eb24fc9c33a41d889b8d83&quot;</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;192.168.1.1&#x27;</span> <span class="comment"># 填本机IP或域名，localhost不行</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url &#x27;http://192.168.1.1:8929&#x27;</span></span><br><span class="line"><span class="string">        gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8929:8929&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2224:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">&#x27;256m&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>启动，<code>docker compose up</code></p></li><li><p>获得初始账密，24小时即过期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">docker exec -it [启动容器名] grep &#x27;Password:&#x27; /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure></li></ol><h1 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a>gitlab-runner</h1><ol><li><p>在网页端创建<code>runner</code>，并获取<code>runner authentication token</code>，填写<code>tag</code>即可</p><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105151132726.png" alt="image-20231105151132726"></p></li><li><p>创建成功后，如下</p><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105151356634.png" alt="image-20231105151356634"></p><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105151720708.png" alt="image-20231105151720708"></p></li><li><p>启动<code>gitlab-runner</code>容器，启动后，查看日志如下，报错是因为没有<code>config.toml</code>文件，创建<code>runner</code>后，即消失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> gitlab/gitlab-runner:latest 版本信息</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;gitlab/gitlab-runner@sha256:b846b7dec4f10fbe576709e4c74cbf2859c5a01267e7992b36d6643f52f6154d&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Option 1: Use <span class="built_in">local</span> system volume mounts to start the Runner container</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例采取方案</span></span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Option 2: Use Docker volumes to start the Runner container</span></span><br><span class="line">docker volume create gitlab-runner-config</span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v gitlab-runner-config:/etc/gitlab-runner \</span><br><span class="line">    gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105145920684.png" alt="image-20231105145920684"></p></li><li><p>注册<code>runner</code>，内容会被记录在<code>/srv/gitlab-runner/config/config.toml</code>中，<code>executor</code>选择参见<a href="https://docs.gitlab.com/runner/executors/index.html">Executors</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意 /srv/gitlab-runner/config:/etc/gitlab-runner 为第一步配置路径</span></span><br><span class="line">docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</span><br></pre></td></tr></table></figure><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105161008073.png" alt="image-20231105161008073"></p></li><li><p>成功后，如下</p><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105152813538.png" alt="image-20231105152813538"></p></li><li><p>测试 <code>ci</code> 功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">compile</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compile:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">compile</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">first-gitlab-runner</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;this is my gitlab runner test&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/tutorial/install-gitlab-and-gitlab-runner/image-20231105162354242.png" alt="image-20231105162354242"></p></li><li><p>删除现有<code>runner</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看列表</span></span><br><span class="line">docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消注册</span></span><br><span class="line">docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner unregister --name [name]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下命令实测不能删除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run --<span class="built_in">rm</span> -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner unregister --url [url] --token [token]</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h1><ol><li><code>ERROR: Unregistering runner from GitLab client error  status=only http or https scheme supported</code><ul><li>命令使用错误，<code>unregister</code>需要指定<code>--url</code></li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://docs.gitlab.com/ee/install/docker.html">Gitlab Docker images</a></p></li><li><p><a href="https://docs.gitlab.com/runner/install/docker.html">Run GitLab Runner in a container</a></p></li><li><p><a href="https://www.cnblogs.com/ywjcqq/p/17389122.html">Gitlab-runner</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> gitlab </tag>
            
            <tag> Linux </tag>
            
            <tag> runner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Gitlab CI 中测试 docker 容器</title>
      <link href="/cloud/run-docker-in-gitlab-ci/"/>
      <url>/cloud/run-docker-in-gitlab-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>本文用于记录视频中提到的方式，后续实际用到再详细记录</li><li>原理是<strong>网络通信</strong></li></ul><h1 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h1><h2 id="dind"><a href="#dind" class="headerlink" title="dind"></a>dind</h2><p><img src="/cloud/run-docker-in-gitlab-ci/image-20231105164313947.png" alt="image-20231105164313947"></p><ul><li><p><code>image</code>中的<code>docker</code>，作为<code>client</code>存在，即可以运行<code>docker run xxx</code>之列的命令</p></li><li><p><code>services</code>中的<code>docker:dind</code>作为<code>docker deamon</code>存在，如果没有这个，那么<code>image</code>中的<code>docker</code>在运行时，就会报错<code>docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p></li><li><p><code>docker run -d -p 3000:3000 $CI_REGISTRY_IMAGE</code></p><ul><li>这条命令执行在<code>image</code>中的<code>docker</code>这个终端中</li><li>启动的容器由<code>services</code>中的<code>docker:dind</code>负责，即启动的容器在<code>docker:dind</code>中</li></ul></li><li><p><code>image</code>中的<code>docker</code>和<code>services</code>中的<code>docker:dind</code>通过<strong>网络</strong>通信</p></li><li><p><code>curl</code>中的<code>localhost</code>指的是本地地址，即<code>image</code>中的<code>docker</code>地址，因此视频中使用<code>localhost</code>会报错，将<code>localhost</code>修改为<code>docker</code>即可</p><p><img src="/cloud/run-docker-in-gitlab-ci/image-20231105170329759.png" alt="image-20231105170329759"></p><p><img src="/cloud/run-docker-in-gitlab-ci/image-20231105165055207.png" alt="image-20231105165055207"></p></li><li><p>过于复杂（需要额外启动一个容器），耗时较多，视频中约 60 秒</p></li></ul><h2 id="self-image"><a href="#self-image" class="headerlink" title="self-image"></a>self-image</h2><p><img src="/cloud/run-docker-in-gitlab-ci/image-20231105165706215.png" alt="image-20231105165706215"></p><ul><li><p>将自建镜像作为<strong>服务</strong>启动，即省去启动了<code>dind</code>过程</p></li><li><p>视频中约为 20 秒</p></li></ul><h2 id="more-complex"><a href="#more-complex" class="headerlink" title="more-complex"></a>more-complex</h2><p><img src="/cloud/run-docker-in-gitlab-ci/image-20231105170026292.png" alt="image-20231105170026292"></p><p><img src="/cloud/run-docker-in-gitlab-ci/image-20231105170047772.png" alt="image-20231105170047772"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>How to test a Docker container in GitLab CI，<a href="https://www.bilibili.com/video/BV1Aw411c76u">B站</a>, <a href="https://www.youtube.com/watch?v=fymJsLIwrFU">youtube</a></p></li><li><p><a href="https://hub.docker.com/_/docker">docker image</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> docker </tag>
            
            <tag> gitlab </tag>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mongo】01-基础命令</title>
      <link href="/database/mongo-01-basic-command/"/>
      <url>/database/mongo-01-basic-command/</url>
      
        <content type="html"><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><ul><li>命令提示：<code>help</code></li><li>数据库方法帮助信息：<code>db.help()</code></li><li>查看数据库：<code>show dbs</code></li><li>进入数据库：<code>use [数据库名]</code></li><li>查看数据库表&#x2F;集合：<code>show tables</code> &#x2F;<code>show collections</code></li><li>查看数据：<code>db.表名/集合名字.find()</code></li></ul><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><ul><li><p>使用镜像: <a href="https://hub.docker.com/layers/bitnami/mongodb/7.0-debian-11/images/sha256-15f9ca8df1d7c7dc7899807408a49ef8f5088b6bda8c9dd77e3b1d59c960627f?context=explore">bitnami&#x2F;mongodb:7.0-debian-11</a></p></li><li><p>进入MondoDB容器中</p><ul><li><code>docker exec -it [容器名] mongosh</code></li><li>如: <code>docker exec -it mongo-test mongosh</code></li></ul></li><li><p>使用容器连接指定地址数据库</p><ul><li><code>docker run -it docker.io/bitnami/mongodb:6.0-debian-11 mongosh [地址] </code></li><li>如: <code>docker run -it docker.io/bitnami/mongodb:6.0-debian-11 mongosh mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/mydbname</code></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.cnblogs.com/Can-daydayup/p/16840085.html">MongoDB从入门到实战之MongoDB工作常用操作命令</a></li><li><a href="https://blog.csdn.net/Tw_light/article/details/110753675">MongoDB 查看集合中所有的数据</a></li><li><a href="https://www.mongodb.com/docs/v4.2/reference/connection-string/index.html#standard-connection-string-format">mongo: Standard Connection String Format</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ruby】01-基础概念</title>
      <link href="/codeLang/Ruby-01-basic-concept/"/>
      <url>/codeLang/Ruby-01-basic-concept/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="def-hello-与-def-hello"><a href="#def-hello-与-def-hello" class="headerlink" title="def hello 与 def hello?"></a>def hello 与 def hello?</h2><ul><li><p><code>def hello</code>：用于定义普通的方法。在Ruby中，方法名可以以字母、下划线或问号（?）开头，后面可以跟着字母、数字、下划线或问号。<code>def hello</code>定义了一个名为hello的方法，它可以执行一些操作并返回一个值（或者不返回任何值）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span></span><br><span class="line">  puts <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hello <span class="comment"># 调用hello方法，输出 &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>def hello?</code>：用于定义<strong>返回布尔值的方法</strong>，通常用于表示某种条件或判断的结果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">even?</span>(<span class="params">number</span>)</span><br><span class="line">  number % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts even?(<span class="number">4</span>) <span class="comment"># 调用even?方法，输出 true</span></span><br><span class="line">puts even?(<span class="number">5</span>) <span class="comment"># 调用even?方法，输出 false</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><ul><li><p>在 Ruby 中，<code>include</code> 是一个用于模块和类的方法，用于将模块的方法和常量引入到类中</p></li><li><p>当一个类使用 <code>include</code> 方法引入一个模块时，该类就可以使用模块中定义的方法和常量。通过 <code>include</code>，模块中的方法和常量成为了类的实例方法和常量</p></li><li><p>举例</p><ul><li><p>例如，假设有一个名为 <code>ModuleA</code> 的模块和一个名为 <code>ClassB</code> 的类。如果在 <code>ClassB</code> 中使用 <code>include</code> 方法将 <code>ModuleA</code> 引入到类中，那么 <code>ClassB</code> 的实例就可以调用 <code>ModuleA</code> 中定义的方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Module</span>A</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">hello</span></span><br><span class="line">    puts <span class="string">&quot;Hello from ModuleA&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>B</span><br><span class="line">  <span class="keyword">include</span> <span class="title class_">Module</span>A</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">b = <span class="title class_">Class</span>B.new</span><br><span class="line">b.hello</span><br><span class="line"><span class="comment"># 结果 Hello from ModuleA</span></span><br></pre></td></tr></table></figure></li><li><p>在这个示例中，<code>ClassB</code> 的实例可以调用 <code>ModuleA</code> 中定义的 <code>hello</code> 方法</p></li></ul></li><li><p>需要注意的是，<code>include</code> 方法<strong>只能用于引入模块，而不能用于引入其他类</strong>。如果需要引入其他类的方法，可以使用 <code>prepend</code> 方法</p></li></ul><h2 id="included"><a href="#included" class="headerlink" title="included"></a>included</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">ServiceModeConcern</span></span><br><span class="line">  <span class="keyword">extend</span> <span class="title class_">ActiveSupport::Concern</span></span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span> |<span class="params">base</span>|</span><br><span class="line">    <span class="keyword">prepend</span> <span class="title class_">Object</span>.const_get(base.name.split(<span class="string">&quot;::&quot;</span>).insert(-<span class="number">2</span>, <span class="string">&quot;ServiceMode&quot;</span>).join(<span class="string">&quot;::&quot;</span>)) <span class="keyword">if</span> <span class="title class_">AppConfig</span>.service_mode?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>以上代码作用是在模块<strong>被包含到其他类中时</strong>，根据 <code>AppConfig.service_mode?</code> 的值来动态地插入另一个模块</li><li><code>included</code> 方法是 Ruby 中用于在模块中定义的一个回调方法，它会在模块被包含到其他类中时自动执行</li><li><code>do |base|</code> 表示 <code>included</code> 方法的块参数，它会接收包含该模块的类作为参数</li><li><code>Object.const_get</code> 方法用于获取指定名称的常量，这里传入的参数是一个字符串，它是通过将包含该模块的类名进行修改得到的</li><li><code>base.name.split(&quot;::&quot;).insert(-2, &quot;ServiceMode&quot;).join(&quot;::&quot;)</code> 表示将包含该模块的类名按照 “::” 分隔符进行拆分，然后在倒数第二个位置插入字符串 “ServiceMode”，最后再将拆分后的字符串用 “::” 连接起来</li><li><code>prepend</code> 方法是 Ruby 中用于在类或模块中插入方法的方法，它会将指定的模块或类插入到当前类或模块的继承链的顶部。 如果 <code>AppConfig.service_mode?</code> 的返回值为 true，则会将上一步获取到的常量插入到包含该模块的类中</li></ul><h2 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h2><ul><li><p>在 Ruby 中，<code>prepend</code> 是一个用于模块和类的方法，用于在继承链中插入模块或类的方法</p></li><li><p>当一个模块或类使用 <code>prepend</code> 方法<strong>插入到继承链中时，它的方法会优先于继承链中其他模块或类的方法被调用</strong>。这意味着，使用 <code>prepend</code> 插入的方法会覆盖继承链中其他模块或类的同名方法</p></li><li><p>举例</p><ul><li><p>假设有一个名为 <code>ModuleA</code> 的模块和一个名为 <code>ClassB</code> 的类。如果在 <code>ClassB</code> 中使用 <code>prepend</code> 方法将 <code>ModuleA</code> 插入到继承链中，那么 <code>ModuleA</code> 中的方法会优先于 <code>ClassB</code> 中的同名方法被调用</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Module</span>A</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">hello</span></span><br><span class="line">    puts <span class="string">&quot;Hello from ModuleA&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>B</span><br><span class="line">  <span class="keyword">prepend</span> <span class="title class_">Module</span>A</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">hello</span></span><br><span class="line">    puts <span class="string">&quot;Hello from ClassB&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">b = <span class="title class_">Class</span>B.new</span><br><span class="line">b.hello</span><br><span class="line"><span class="comment"># 结果: Hello from ModuleA</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用<code>super</code>，那么<code>class B</code>方法也会被调用</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Module</span>A</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">hello</span></span><br><span class="line">    puts <span class="string">&quot;Hello from ModuleA&quot;</span></span><br><span class="line">  <span class="variable language_">super</span>  <span class="comment"># 新增</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>B</span><br><span class="line">  <span class="keyword">prepend</span> <span class="title class_">Module</span>A</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">hello</span></span><br><span class="line">    puts <span class="string">&quot;Hello from ClassB&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">b = <span class="title class_">Class</span>B.new</span><br><span class="line">b.hello</span><br><span class="line"><span class="comment"># 结果: Hello from ModuleA</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>需要注意的是，<code>prepend</code> 方法<strong>只能用于插入模块，而不能用于插入其他类</strong>。如果需要插入其他类的方法，可以使用 <code>include</code> 方法</p></li></ul><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li><p>最后一行调用<code>super</code>目的是为了重写<code>new</code>方法后，能正确调用<code>initialize</code>方法</p><blockquote><p>It should also be noted that this overridden <code>new</code> method calls <code>super</code> on the last line which in turn calls <code>Class#new</code>. This makes sure that Ruby’s semantics of <code>new</code> method are preserved. This will make sure that <code>DeprecationProxy.new</code>will call <code>initialize</code> method of <code>DeprecationProxy</code> after the overridden <code>new</code>method is executed.</p></blockquote></li><li><p>此外在使用了<code>include</code>和<code>prepend</code>发生函数重载时，可以继续调用被重载的函数</p></li></ul><h2 id="attr-reader"><a href="#attr-reader" class="headerlink" title="attr_reader"></a>attr_reader</h2><ul><li><p><code>attr_reader</code>是Ruby中的一个方法，用于自动生成实例变量的读取器方法</p></li><li><p>以<code>attr_reader :source, :credentials, :repo_contents_path, :options</code>为例，在给定的代码中，<code>attr_reader</code>用于生成以下实例变量的读取器方法</p><ul><li><code>source</code></li><li><code>credentials</code></li><li><code>repo_contents_path</code></li><li><code>options</code></li></ul></li><li><p>这意味着在使用<code>attr_reader</code>后，可以通过实例对象调用这些变量的读取器方法来获取它们的值</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  <span class="built_in">attr_reader</span> <span class="symbol">:source</span>, <span class="symbol">:credentials</span>, <span class="symbol">:repo_contents_path</span>, <span class="symbol">:options</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">source, credentials, repo_contents_path, options</span>)</span><br><span class="line">    <span class="variable">@source</span> = source</span><br><span class="line">    <span class="variable">@credentials</span> = credentials</span><br><span class="line">    <span class="variable">@repo_contents_path</span> = repo_contents_path</span><br><span class="line">    <span class="variable">@options</span> = options</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = <span class="title class_">MyClass</span>.new(<span class="string">&quot;example&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;/path/to/repo&quot;</span>, &#123; <span class="symbol">option1:</span> <span class="literal">true</span>, <span class="symbol">option2:</span> <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">puts obj.source <span class="comment"># 输出：example</span></span><br><span class="line">puts obj.credentials <span class="comment"># 输出：password</span></span><br><span class="line">puts obj.repo_contents_path <span class="comment"># 输出：/path/to/repo</span></span><br><span class="line">puts obj.options <span class="comment"># 输出：&#123; option1: true, option2: false &#125;</span></span><br></pre></td></tr></table></figure><h1 id="ruby-on-rails"><a href="#ruby-on-rails" class="headerlink" title="ruby on rails"></a>ruby on rails</h1><h2 id="rails-db-migrate"><a href="#rails-db-migrate" class="headerlink" title="rails db:migrate"></a>rails db:migrate</h2><ul><li><code>rails db:migrate</code> 是一个 Rails 命令，用于执行数据库迁移操作</li><li>数据库迁移是一种用于管理数据库结构变化的技术。通过使用迁移文件，您可以创建、修改或删除数据库表、列、索引等。每个迁移文件都对应一个特定的数据库操作</li><li>当您运行 <code>rails db:migrate</code> 命令时，Rails 将检查数据库迁移历史记录表（通常是 <code>schema_migrations</code> 表）以确定哪些迁移文件尚未应用到数据库中。然后，它将按顺序执行这些尚未应用的迁移文件，将数据库结构更新到最新状态</li><li>在执行 <code>rails db:migrate</code> 命令之前，请确保已经配置好数据库连接，并且<strong>迁移文件已经创建并位于</strong><code>db/migrate</code> 目录下</li><li>需要注意的是，<code>rails db:migrate</code> 是一个有副作用的命令，会直接修改数据库结构。在执行之前，请确保已经备份了重要的数据，并且明确了迁移操作的影响</li></ul><h2 id="rails-background-tasks-run-post-deploy-tasks"><a href="#rails-background-tasks-run-post-deploy-tasks" class="headerlink" title="rails background_tasks:run_post_deploy_tasks"></a>rails background_tasks:run_post_deploy_tasks</h2><ul><li><code>rails background_tasks:run_post_deploy_tasks</code> 是一个自定义的 Rails 命令，用于在部署后运行一些后台任务</li><li>后台任务位置<ol><li>打开您的 Rails 应用程序的代码目录</li><li>导航到 <code>lib/tasks</code> 目录。这个目录通常用于存放自定义的任务文件</li><li>在 <code>lib/tasks</code> 目录下查找名为 <code>background_tasks.rake</code> 或类似命名的文件。这个文件通常包含定义后台任务的代码</li><li>打开 <code>background_tasks.rake</code> 文件，查看其中的任务定义。您可以搜索 <code>namespace</code> 或 <code>task</code> 关键字，以找到相关的任务定义</li><li>在任务定义中，您可以查看任务的具体实现逻辑，包括任务的名称、描述、依赖关系和执行代码</li><li>如果您无法在 <code>lib/tasks</code> 目录中找到相关的任务文件，您还可以尝试在其他目录中搜索，例如 <code>app/jobs</code> 目录（用于存放后台任务类）或 <code>config</code> 目录（用于存放自定义的任务配置）</li></ol></li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ol><li><code>ruby</code>定义的函数中，最后一行作为函数返回值，<font color="red">不要在最后一行输出日志，会导致外层接收值为空，导致逻辑错误</font></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://prathamesh.tech/2019/05/26/understanding-how-ruby-initializes-objects/">Understanding how Ruby initializes objects</a></p></li><li><p><a href="https://rubystyle.guide/">Ruby Style Guide</a></p></li><li><p><a href="https://guides.rubyonrails.org/initialization.html">The Rails Initialization Process</a></p></li><li><p><a href="https://ruby-for-beginners.rubymonstas.org/index.html">Ruby For Beginners</a></p></li><li><p><a href="https://medium.com/@life-is-short-so-enjoy-it/intellij-ida-how-to-see-git-blame-3e7e207a5a8c">IntelliJ IDEA: How to see Git Blame</a></p></li><li><p>xx<a href="https://hashrocket.com/blog/posts/module-prepend-a-super-story">Module.prepend: a super story</a></p></li><li><p><a href="https://veerpalbrar.github.io/blog/2021/11/26/Include,-Extend,-and-Prepend-In-Ruby">Include, Extend, And Prepend In Ruby</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> 基础概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>container——未完成</title>
      <link href="/cloud/container-and-container-runtime/"/>
      <url>/cloud/container-and-container-runtime/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h1><h1 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h1><h1 id="Container-Runtime-Interface-CRI"><a href="#Container-Runtime-Interface-CRI" class="headerlink" title="Container Runtime Interface (CRI)"></a>Container Runtime Interface (CRI)</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://devopstales.github.io/kubernetes/container-runtimes/">Containers and Container runtimes for Beginners</a></li><li><a href="https://opensource.com/article/21/9/container-runtimes">What are container runtimes?</a></li><li><a href="https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/">What is Container Runtime Interface (CRI)?</a></li><li><a href="https://docs.openshift.com/container-platform/4.12/nodes/containers/nodes-containers-using.html">Understanding Containers</a></li><li><a href="https://www.capitalone.com/tech/cloud/container-runtime/">Kubernetes containers: A comprehensive runtime comparison</a></li><li><a href="https://cto.ai/blog/overview-of-different-container-runtimes/">Overview of Different Container Runtimes</a></li><li><a href="https://humalect.com/blog/container-runtimes">What are Container Runtimes &amp; 3 Types of Container Runtimes</a></li><li><a href="https://www.airplane.dev/blog/container-runtimes">Kubernetes container runtimes</a></li><li><a href="https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction">A Practical Introduction to Container Terminology</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/">kubernetes: Container Runtimes</a></li><li><a href="https://www.aquasec.com/cloud-native-academy/container-security/container-runtime/">3 Types of Container Runtime and the Kubernetes Connection</a></li><li><a href="https://mp.weixin.qq.com/s/wNt9H3YD6rzqGP2FZSWk6Q">各种容器运行时都解决了什么问题</a></li><li><a href="https://alexander.holbreich.org/docker-components-explained/">Docker components explained</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> container </tag>
            
            <tag> container runtime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【k8s】01-概述</title>
      <link href="/cloud/k8s-01-Introduction/"/>
      <url>/cloud/k8s-01-Introduction/</url>
      
        <content type="html"><![CDATA[<p><img src="/cloud/k8s-01-Introduction/image-20231005151808653.png" alt="image-20231005151808653: https://www.youtube.com/watch?v=TlHvYWVUZyc"></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ul><li><p>部署方式的演化，详见<a href="https://kubernetes.io/docs/concepts/overview/#going-back-in-time">kubernetes: Going back in time</a></p><p><img src="/cloud/k8s-01-Introduction/container_evolution.svg" alt="Deployment evolution: https://kubernetes.io/docs/concepts/overview/"></p></li><li><p>docker部署存在的问题</p><ul><li>不利于扩缩容&#x3D;&gt;需求变动导致部署机器变动时，需要手动维护</li><li>不利于管理&#x3D;&gt;部署基础镜像变更时，需要手动维护已部署的机器；负载均衡设计愈发复杂（当部署机器增多时，需要多层负载均衡机制）</li></ul><p><img src="/cloud/k8s-01-Introduction/image-20231005111347640.png" alt="image-20231005111347640: https://www.youtube.com/watch?v=7bA0gTroJjw"></p></li><li><p>k8s优点，详见<a href="https://kubernetes.io/docs/concepts/overview/#why-you-need-kubernetes-and-what-can-it-do">kubernetes: Why you need Kubernetes and what it can do</a></p><ul><li><strong>Service discovery and load balancing</strong></li><li><strong>Storage orchestration</strong></li><li><strong>Automated rollouts and rollbacks</strong></li><li><strong>Automatic bin packing</strong></li><li><strong>Self-healing</strong></li><li><strong>Secret and configuration management</strong></li></ul></li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="/cloud/k8s-01-Introduction/components-of-kubernetes.svg" alt="Components of Kubernetes: https://kubernetes.io/docs/concepts/overview/components/"></p><ul><li><p>一个Kubernetes集群至少包含一个控制平面(control plane)，以及一个或多个工作节点(worker node)</p></li><li><p><strong>控制平面(Control Plane) :</strong> 控制平面负责管理工作节点和维护集群状态。所有任务分配都来自于控制平面</p></li><li><p><strong>工作节点(Worker Node) :</strong> 工作节点负责执行由控制平面分配的请求任务,运行实际的应用和工作负载</p></li></ul><h3 id="Control-Plane"><a href="#Control-Plane" class="headerlink" title="Control Plane"></a>Control Plane</h3><p><img src="/cloud/k8s-01-Introduction/image-20231005134700376.png" alt="image-20231005134700376: https://www.youtube.com/watch?v=s_o8dwzRlu4"></p><h4 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h4><ul><li><p>如果需要与Kubernetes 集群进行交互，就要通过 API</p></li><li><p><code>apiserver</code>是 Kubernetes 控制平面的前端，用于处理内部和外部请求</p></li></ul><h4 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h4><ul><li><p>集群状况是否良好？如果需要创建新的容器，要将它们放在哪里？这些是调度程序需要关注的问题</p></li><li><p><code>scheduler</code>调度程序会考虑容器集的资源需求（例如 CPU 或内存）以及集群的运行状况。随后，它会将容器集安排到适当的计算节点</p></li></ul><h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h4><ul><li><a href="https://www.redhat.com/topics/containers/what-is-etcd">etcd</a>是一个键值对数据库，用于存储配置数据和集群状态信息</li></ul><h4 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h4><ul><li><p>控制器负责实际运行集群，<code>controller-manager</code>控制器管理器则是将多个控制器功能合而为一，降低了程序的复杂性。</p></li><li><p><code>controller-manager</code>包含了这些控制器：</p><ul><li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点控制器（Endpoints Controller）：填充端点（Endpoints）对象（即加入 Service 与 Pod）</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）：为新的命名空间创建默认帐户和 API 访问令牌</li></ul></li></ul><h4 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a>cloud-controller-manager</h4><ul><li><p>控制平面还包含一个可选组件<code>cloud-controller-manager</code></p></li><li><p>云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来</p></li><li><p>如果在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器</p></li></ul><h3 id="Worker-Node"><a href="#Worker-Node" class="headerlink" title="Worker Node"></a>Worker Node</h3><p><img src="/cloud/k8s-01-Introduction/1665200584349-0e11b6d2-b3f3-49cf-9a7e-5effff7371d1.png" alt="image.png: https://www.yuque.com/wukong-zorrm/qdoy5p/lrsast"></p><h4 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h4><ul><li><p>kubelet 会在集群中每个<a href="https://kubernetes.io/docs/concepts/architecture/nodes/">节点（node）</a>上运行。 它保证<a href="https://kubernetes.io/docs/concepts/containers/">容器（containers）</a>都运行在 <a href="https://kubernetes.io/docs/concepts/workloads/pods/">Pod</a> 中</p></li><li><p>当control plane需要在节点中执行某个操作时，kubelet 就会执行该操作</p></li></ul><h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h4><ul><li><p><a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy</a> 是集群中每个<a href="https://kubernetes.io/docs/concepts/architecture/nodes/">节点（node）</a>上运行的网络代理，是实现 Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/">服务（Service）</a> 概念的一部分</p></li><li><p>kube-proxy 维护节点网络规则和转发流量，实现从集群内部或外部的网络与 Pod 进行网络通信</p></li></ul><h4 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h4><ul><li><p>Container Runtime（容器运行环境）是负责运行容器的软件</p></li><li><p>Kubernetes 支持许多容器运行环境，例如 <a href="https://containerd.io/docs/">containerd</a>、docker或者其他实现了 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md">Kubernetes CRI (容器运行环境接口)</a>的容器</p></li></ul><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><ul><li><strong>Pod</strong> 是包含一个或多个容器的容器组，是 Kubernetes 中创建和管理的最小对象</li><li>Pod 有以下特点：<ul><li>Pod是kubernetes中<strong>最小的调度单位（原子单元）</strong>，Kubernetes直接管理Pod而不是容器</li><li>同一个Pod中的容器总是会被自动安排到集群中的<strong>同一节点</strong>（物理机或虚拟机）上，并且<strong>一起调度</strong></li><li>Pod可以理解为运行特定应用的“逻辑主机”，这些容器共享存储、网络和配置声明(如资源限制)</li><li>每个 Pod 有唯一的 IP 地址。 <strong>IP地址分配给Pod</strong>，在同一个 Pod 内，所有容器共享一个 IP 地址和端口空间，Pod 内的容器可以使用<code>localhost</code>互相通信</li></ul></li></ul><h1 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h1><p><img src="/cloud/k8s-01-Introduction/1664245943047-a33242bd-b084-42ee-adbe-1d49514b147a.svg" width="50%/" label="https://www.yuque.com/wukong-zorrm/qdoy5p/uur3eh"><img src="/cloud/k8s-01-Introduction/image-20231005153927251.png" width="50%" label="https://www.youtube.com/watch?v=d6WC5n9G_sM"></p><ul><li><p><a href="https://kubernetes.io/docs/reference/kubectl/kubectl/">kubectl</a> 是一个kubernetes命令行工具</p></li><li><p>kubectl 使用 Kubernetes API 与 Kubernetes 集群的<a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane">control plane</a>进行通信，可以使用 kubectl 部署应用程序、检查和管理群集资源以及查看日志</p></li></ul><h1 id="Workload"><a href="#Workload" class="headerlink" title="Workload"></a>Workload</h1><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">Deployment</a>是对 ReplicaSet 和 Pod 更高级的抽象。它使 Pod 拥有多副本，自愈，扩缩容、滚动升级等能力</li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/">ReplicaSet</a> 是一个 Pod 的集合。它可以设置运行 Pod 的数量，确保任何时间都有指定数量的 Pod 副本在运行。通常我们不直接使用 ReplicaSet，而是在Deployment 中声明</li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/">statefulset</a>主要用于持久化数据 Pod 管理</li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/">daemonset</a>：跟随 node 变化而自动生成和删除特定 pod，如需要在每个 node 运行日志收集服务</li></ul><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p><img src="/cloud/k8s-01-Introduction/1664261419003-e9a5a68a-f988-48da-a51d-b8756bce8f24.png" alt="image.png"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>Service将运行在一组 <a href="https://kubernetes.io/docs/concepts/workloads/pods/">Pods</a> 上的应用程序公开为网络服务的抽象方法</p></li><li><p>Service为一组 Pod 提供相同的 DNS 名，并且在它们之间进行负载均衡</p></li><li><p>Kubernetes 为 Pod 提供分配了IP 地址，但IP地址可能会发生变化</p></li><li><p>集群内的容器可以通过service名称访问服务，而不需要担心Pod的IP发生变化</p></li></ul><hr><ul><li><p>逻辑上的一组可以互相替换的 Pod，通常称为微服务</p></li><li><p>Service 对应的 Pod 集合通常是通过<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">Labels and Selectors</a>来确定的</p></li><li><p>举个例子，在一个Service中运行了3个nginx的副本。这些副本是可互换的，我们不需要关心它们调用了哪个nginx，也不需要关注 Pod的运行状态，只需要调用这个服务就可以了</p></li></ul><h2 id="Service对象（ServiceType-取值）"><a href="#Service对象（ServiceType-取值）" class="headerlink" title="Service对象（ServiceType 取值）"></a>Service对象（ServiceType 取值）</h2><ul><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#type-clusterip">ClusterIP</a>：将服务公开在集群内部。kubernetes会给服务分配一个集群内部的 IP，集群内的所有主机都可以通过这个Cluster-IP访问服务。集群内部的Pod可以通过service名称访问服务</li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport">NodePort</a>：通过每个节点的主机IP 和静态端口（NodePort）暴露服务。 集群的外部主机可以使用节点IP和NodePort访问服务</li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#externalname">ExternalName</a>：将集群外部的网络引入集群内部</li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer">LoadBalancer</a>：使用云提供商的负载均衡器向外部暴露服务</li></ul><h1 id="config-yaml（声明式对象配置）"><a href="#config-yaml（声明式对象配置）" class="headerlink" title="config yaml（声明式对象配置）"></a>config yaml（声明式对象配置）</h1><h2 id="管理对象"><a href="#管理对象" class="headerlink" title="管理对象"></a>管理对象</h2><ul><li><p><strong>命令行指令</strong></p><ul><li><p>例如，使用<code>kubectl</code>命令来创建和管理 Kubernetes 对象</p></li><li><p>命令行就好比口头传达，简单、快速、高效</p></li><li><p>但它功能有限，不适合复杂场景，操作不容易追溯，多用于开发和调试</p></li></ul></li><li><p><strong>声明式配置</strong></p><ul><li><p>kubernetes使用yaml文件来描述 Kubernetes 对象</p></li><li><p>声明式配置就好比申请表，学习难度大且配置麻烦</p></li><li><p>好处是操作留痕，适合操作复杂的对象，多用于生产</p></li></ul></li></ul><h2 id="常用命令缩写"><a href="#常用命令缩写" class="headerlink" title="常用命令缩写"></a>常用命令缩写</h2><table><thead><tr><th align="center">名称</th><th align="center">缩写</th><th align="center">Kind</th></tr></thead><tbody><tr><td align="center">namespaces</td><td align="center">ns</td><td align="center">Namespace</td></tr><tr><td align="center">nodes</td><td align="center">no</td><td align="center">Node</td></tr><tr><td align="center">pods</td><td align="center">po</td><td align="center">Pod</td></tr><tr><td align="center">services</td><td align="center">svc</td><td align="center">Service</td></tr><tr><td align="center">deployments</td><td align="center">deploy</td><td align="center">Deployment</td></tr><tr><td align="center">replicasets</td><td align="center">rs</td><td align="center">ReplicaSet</td></tr><tr><td align="center">statefulsets</td><td align="center">sts</td><td align="center">StatefulSet</td></tr></tbody></table><h2 id="YAML规范"><a href="#YAML规范" class="headerlink" title="YAML规范"></a>YAML规范</h2><ul><li>缩进代表上下级关系</li><li><strong>缩进时不允许使用Tab键，只允许使用空格，通常缩进2个空格</strong></li><li><code>:</code> 键值对，后面必须有空格</li><li><code>-</code>列表，后面必须有空格</li><li><code>[ ]</code>数组</li><li><code>#</code>注释</li><li><code>|</code> 多行文本块</li><li><code>---</code>表示文档的开始，多用于分割多个资源对象</li></ul><h2 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h2><ul><li><p>在创建的 Kubernetes 对象所对应的 <code>yaml</code>文件中，需要配置的字段如下：</p><ul><li><code>apiVersion</code> -  Kubernetes API 的版本</li><li><code>kind</code> - 对象类别，例如<code>Pod</code>、<code>Deployment</code>、<code>Service</code>、<code>ReplicaSet</code>等</li><li><code>metadata</code> - 描述对象的元数据，包括一个 name 字符串、UID 和可选的 namespace</li><li><code>spec</code> - 对象的配置</li></ul></li><li><p>使用YAML配置pod,  <a href="https://kubernetes.io/docs/concepts/workloads/pods/#using-pods">kubernetes: Using Pods</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.22</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><p>使用yaml文件管理对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建对象</span></span><br><span class="line">kubectl apply -f my-pod.yaml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取对象</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑对象</span></span><br><span class="line">kubectl edit pod my-nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除对象</span></span><br><span class="line">kubectl delete -f my-pod.yaml</span><br></pre></td></tr></table></figure></li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><p><strong>标签（Labels）</strong> 是附加到对象（比如 Pod）上的键值对，用于补充对象的描述信息</p></li><li><p>标签使用户能够以松散的方式管理对象映射，而无需客户端存储这些映射</p></li><li><p>由于一个集群中可能管理成千上万个容器，我们可以使用标签高效的进行选择和操作容器集合</p></li><li><p><strong>键的格式：</strong>前缀**(可选)<strong>&#x2F;名称</strong>(必须)。</p></li><li><p><strong>有效名称和值：</strong></p></li><li><p>必须为 63 个字符或更少（可以为空）</p></li><li><p>如果不为空，必须以字母数字字符（[a-z0-9A-Z]）开头和结尾</p></li><li><p>包含破折号<code>-</code>、下划线<code>_</code>、点<code>.</code>和字母或数字</p></li><li><p>YAML文件配置，<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set">kubernetes: Syntax and character set</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">label-demo</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#定义Pod标签</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.22</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><p><strong>标签选择器</strong> 可以识别一组对象。标签不支持唯一性</p></li><li><p>标签选择器最常见的用法是为Service选择一组Pod作为后端</p></li><li><p>YMAL文件配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment">#与Pod的标签一致</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="comment"># 可选字段</span></span><br><span class="line">      <span class="comment"># 默认情况下，为了方便起见，Kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767）</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30007</span></span><br></pre></td></tr></table></figure></li><li><p>目前支持两种类型的选择运算：<strong>基于等值的</strong>和<strong>基于集合的</strong>。 多个选择条件使用逗号分隔，相当于<strong>And</strong>(&amp;&amp;)运算</p><ul><li><p>等值选择</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">matchLabels:</span> <span class="comment"># component=redis &amp;&amp; version=7.0</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">7.0</span></span><br></pre></td></tr></table></figure></li><li><p>集合选择</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">matchExpressions:</span> <span class="comment"># tier in (cache, backend) &amp;&amp; environment not in (dev, prod)</span></span><br><span class="line">    <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">tier</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">cache</span>, <span class="string">backend</span>]&#125;</span><br><span class="line">    <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">environment</span>, <span class="attr">operator:</span> <span class="string">NotIn</span>, <span class="attr">values:</span> [<span class="string">dev</span>, <span class="string">prod</span>]&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Deployment-和-StatefulSet-在-Kubernetes-中的区别"><a href="#Deployment-和-StatefulSet-在-Kubernetes-中的区别" class="headerlink" title="Deployment 和 StatefulSet 在 Kubernetes 中的区别"></a>Deployment 和 StatefulSet 在 Kubernetes 中的区别</h1><ol><li><strong>Deployment</strong>：<ul><li><strong>适用性</strong>：用于部署无状态应用，如 Web 服务器、API 服务器等。适合可以水平扩展和缩减副本数量的应用。</li><li><strong>唯一性</strong>：每个 Pod 是相互独立的，没有任何关联或特定顺序。</li><li><strong>稳定性</strong>：Deployment 控制器确保应用持续可用，但不保证 Pod 的唯一性和稳定性。</li><li><strong>命名</strong>：Pod 的名称通常是随机的，不具备可预测性。</li><li><strong>存储</strong>：Deployment 不适合需要持久化存储或有序部署的应用。</li></ul></li><li><strong>StatefulSet</strong>：<ul><li><strong>适用性</strong>：用于部署有状态应用，如数据库、消息队列等。适合需要唯一标识、稳定网络标识和持久化存储的应用。</li><li><strong>唯一性</strong>：每个 Pod 有唯一的标识符，保持稳定的网络标识和有序部署。</li><li><strong>稳定性</strong>：StatefulSet 会为每个 Pod 提供稳定的标识符和网络标识，确保在 Pod 重启或迁移时保持稳定性。</li><li><strong>命名</strong>：Pod 的名称遵循一定的命名约定，如<code>&lt;StatefulSet名称&gt;-&lt;ordinal&gt;</code>。</li><li><strong>存储</strong>：StatefulSet 支持有序部署、持久化存储卷和有状态应用的数据保留。</li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://kubernetes.io/">kubernetes官网</a></li><li>you need to learn Kubernetes RIGHT NOW!!，<a href="https://www.bilibili.com/video/BV1HC4y1o7RU/">B站</a>, <a href="https://www.youtube.com/watch?v=7bA0gTroJjw">youtube</a></li><li>Kubernetes入门90分钟精讲，<a href="https://www.bilibili.com/video/BV1k24y197KC/?vd_source=785f7b0e83a29d40ecff2373170d330e">bilibili</a>，<a href="https://www.yuque.com/wukong-zorrm/qdoy5p">document</a></li><li>Kubernetes Crash Course for Absolute Beginners [NEW]，<a href="https://www.youtube.com/watch?v=s_o8dwzRlu4">youtube</a></li><li>Kubernetes Explained in 6 Minutes | k8s Architecture，<a href="https://www.youtube.com/watch?v=TlHvYWVUZyc">youtube</a></li><li>Kubernetes Course - Full Beginners Tutorial (Containerize Your Apps!)，<a href="https://www.youtube.com/watch?v=d6WC5n9G_sM">youtube</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git squash与git rebase</title>
      <link href="/tools/The-trick-of-git-squash-rebase/"/>
      <url>/tools/The-trick-of-git-squash-rebase/</url>
      
        <content type="html"><![CDATA[<h1 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h1><h2 id="squash"><a href="#squash" class="headerlink" title="squash"></a>squash</h2><ul><li>针对提交历史，进行修改，比如合并多个历史为一个</li><li>在远端合并<code>develop</code>分支到<code>master</code>分支时，压缩<code>develop</code>分支中的提交</li><li><a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">7.6 Git Tools - Rewriting History</a></li></ul><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><ul><li>变基操作，通常用于<code>develop</code>分支与<code>master</code>分支出现分叉时，即<code>A</code>从<code>master</code>分支切出<code>develop</code>并进行了一定修改，此时<code>master</code>分支已经被<code>B</code>新增了提交，导致两者的<code>master</code>历史不一致，因此需要变基使得<code>develop</code>分支的历史信息与<code>master</code>一致</li><li><a href="https://git-scm.com/docs/git-rebase">git rebase</a></li></ul><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><h2 id="远程squash后，如何rebase本地develop分支"><a href="#远程squash后，如何rebase本地develop分支" class="headerlink" title="远程squash后，如何rebase本地develop分支"></a>远程squash后，如何rebase本地develop分支</h2><h3 id="场景回顾"><a href="#场景回顾" class="headerlink" title="场景回顾"></a>场景回顾</h3><ul><li>远程针对<code>develop</code>提交了一个对<code>master</code>的MR请求</li><li>在开发完毕，同意合并到<code>master</code>时，远端执行了<code>squash</code>操作，此时<code>develop</code>分支的多个提交被合并为一个</li><li>导致此时远端和本地<code>develop</code>分支提交历史不一致</li><li>后续如果想继续使用<code>develop</code>分支进行提交，需要保证两端一致</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li>确保本地分支是<code>develop</code>分支，如果不是，使用<code>git checkout develop</code>切换到<code>develop</code>分支</li><li>使用<code>git rebase -i HEAD~n</code>，其中<code>n</code>表示需要<code>rebase</code>的数量，即<strong>远端squash前，提交的commit数量</strong>，此时本地会打开一个<code>rebase</code>编辑器</li><li>将第一个提交的<code>pick</code>修改为<code>squash</code>，其他提交修改为<code>fixup</code>，保存提交。这会将后面三个提交合并到第一个提交中</li><li>最后执行<code>git push origin develop</code>操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git - squash - rebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go】03-Gin</title>
      <link href="/codeLang/Go-03-gin/"/>
      <url>/codeLang/Go-03-gin/</url>
      
        <content type="html"><![CDATA[<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul><li><a href="https://go.dev/doc/tutorial/web-service-gin">Tutorial: Developing a RESTful API with Go and Gin</a></li></ul><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><h2 id="HTTP-method"><a href="#HTTP-method" class="headerlink" title="HTTP method"></a>HTTP method</h2><h3 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h3><ul><li><p>GET方法用于从服务器获取资源，通常用于查询数据。在Gin中，可以使用<code>GET</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/users&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理获取用户列表的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><ul><li><p>POST方法用于向服务器提交数据，通常用于创建新资源。在Gin中，可以使用<code>POST</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/users&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理创建新用户的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h3><ul><li><p>PUT方法用于向服务器更新资源，通常用于更新已有资源。在Gin中，可以使用<code>PUT</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.PUT(<span class="string">&quot;/users/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理更新用户信息的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="PATCH方法"><a href="#PATCH方法" class="headerlink" title="PATCH方法"></a>PATCH方法</h3><ul><li><p>PATCH方法用于向服务器部分更新资源，通常用于更新已有资源的一部分。在Gin中，可以使用<code>PATCH</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.PATCH(<span class="string">&quot;/users/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理部分更新用户信息的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="DELETE方法"><a href="#DELETE方法" class="headerlink" title="DELETE方法"></a>DELETE方法</h3><ul><li><p>DELETE方法用于从服务器删除资源，通常用于删除已有资源。在Gin中，可以使用<code>DELETE</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.DELETE(<span class="string">&quot;/users/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理删除用户的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h3><ul><li><p>OPTIONS方法用于获取服务器支持的HTTP方法和其他选项。在Gin中，可以使用<code>OPTIONS</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.OPTIONS(<span class="string">&quot;/users&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理获取服务器支持的选项的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="HEAD方法"><a href="#HEAD方法" class="headerlink" title="HEAD方法"></a>HEAD方法</h3><ul><li><p>HEAD方法与GET方法类似，但不返回响应体，只返回响应头信息。在Gin中，可以使用<code>HEAD</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.HEAD(<span class="string">&quot;/users/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理获取用户信息的逻辑，但不返回响应体</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="TRACE方法"><a href="#TRACE方法" class="headerlink" title="TRACE方法"></a>TRACE方法</h3><ul><li><p>TRACE方法用于在请求路径上返回服务器收到的原始请求信息，用于诊断和调试。在Gin中，可以使用<code>TRACE</code>方法来定义路由和处理函数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.TRACE(<span class="string">&quot;/debug&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理返回原始请求信息的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="gin-Context"><a href="#gin-Context" class="headerlink" title="gin.Context"></a>gin.Context</h2><h3 id="MustGet"><a href="#MustGet" class="headerlink" title="MustGet"></a>MustGet</h3><ul><li><p>使用场景</p><ol><li><p>在中间件中获取在之前的中间件或处理程序中设置的值。例如，可以在身份验证中间件中获取用户信息，以确保用户已经通过身份验证</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthMiddleware</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        user := c.MustGet(<span class="string">&quot;user&quot;</span>).(*User)</span><br><span class="line">        <span class="comment">// 进行身份验证逻辑</span></span><br><span class="line">      c.Next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在处理程序中获取在路由处理程序之前设置的值。例如，可以在一个处理程序中获取URL参数或路由参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    userID := c.MustGet(<span class="string">&quot;userID&quot;</span>).(<span class="type">int</span>)</span><br><span class="line">    <span class="comment">// 根据userID获取用户信息</span></span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;userID&quot;</span>: userID&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>注意点</p><ul><li><code>MustGet</code>方法在获取值时会进行断言，如果断言失败会引发panic。因此，必须确保在使用<code>MustGet</code>方法之前，已经在上下文中设置了相应的值</li><li>在实际使用中，应该谨慎使用<code>MustGet</code>方法，避免滥用panic。如果不确定是否能获取到值，可以使用<code>Get</code>方法进行安全的获取，并检查返回的结果是否为nil</li></ul></li></ul><h3 id="ShouldBind"><a href="#ShouldBind" class="headerlink" title="ShouldBind*"></a>ShouldBind*</h3><ul><li><p><code>ShouldBindUri</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyId <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="type">uint</span> <span class="string">`uri:&quot;id&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">router.POST(<span class="string">&quot;:id&quot;</span>, handler)</span><br></pre></td></tr></table></figure></li><li><p><code>ShouldBindQuery</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="type">string</span> <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">email <span class="type">string</span> <span class="string">`form:&quot;email&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">router.Get(<span class="string">&quot;&quot;</span>, handler)</span><br></pre></td></tr></table></figure></li><li><p><code>ShouldBindJson</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="type">string</span> <span class="string">`json:&quot;name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">email <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">router.POST(<span class="string">&quot;&quot;</span>, handler)</span><br></pre></td></tr></table></figure></li></ul><h2 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加全局中间件</span></span><br><span class="line">    <span class="comment">// 每个请求到达服务器时都会执行该函数</span></span><br><span class="line">    router.Use(loggerMiddleware)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义GET请求的路由规则，并传递多个handler函数</span></span><br><span class="line">    router.GET(<span class="string">&quot;/hello&quot;</span>, handlerA, handlerB)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 局部中间件</span></span><br><span class="line">    router.GET(<span class="string">&quot;/health&quot;</span>, middlewareA, middlewareB, handler)</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loggerMiddleware</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 记录请求日志</span></span><br><span class="line">    log.Println(<span class="string">&quot;Request received:&quot;</span>, c.Request.Method, c.Request.URL.Path)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行后续的handler函数</span></span><br><span class="line">    c.Next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个handler函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handlerA</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个handler函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handlerB</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goenv使用说明</title>
      <link href="/tools/The-trick-of-goenv/"/>
      <url>/tools/The-trick-of-goenv/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>管理多版本Go环境</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装：<code>git clone https://github.com/go-nv/goenv.git ~/.goenv</code></p></li><li><p>添加以下内容至环境变量，如<code>~/.bashrc</code>，并使配置生效<code>source ~/.bashrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GOENV_ROOT=&quot;$HOME/.goenv&quot;</span><br><span class="line">export PATH=&quot;$GOENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(goenv init -)&quot;</span><br><span class="line">export PATH=&quot;$GOROOT/bin:$PATH&quot;</span><br><span class="line">export PATH=&quot;$PATH:$GOPATH/bin&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装Go不同版本，如<code>goenv install 1.20.6</code></p></li><li><p>查看已有版本：<code>goenv versions</code></p></li><li><p>切换全局版本：<code>goenv global 1.20.6</code></p></li><li><p>新环境二进制命令全局生效（<code>goenv global</code>后或者<code>go install</code>后）：<code>goenv rehash</code></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/go-nv/goenv">Github: goenv</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Podman使用说明</title>
      <link href="/tools/The-trick-of-podman/"/>
      <url>/tools/The-trick-of-podman/</url>
      
        <content type="html"><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol><li><p>需要开启WSL功能</p></li><li><p>安装<a href="https://podman.io/">Podman CLI for Windows</a></p></li><li><p>按<a href="https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md">说明</a>，执行操作</p><ol><li><p>初始化：cmd执行<code>podman machine init</code>，将会重启，等待安装WSL子系统Fedora，成功后如下，成狗后重启电脑，否则第二步会卡住</p><p><img src="/tools/The-trick-of-podman/image-20230725173555147.png" alt="image-20230725173555147"></p></li><li><p>启动虚拟机：<code>podman machine start</code></p><p><img src="/tools/The-trick-of-podman/image-20230725183102810.png" alt="image-20230725183102810"></p></li></ol></li></ol><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install podman</span><br><span class="line">podman machine init</span><br><span class="line">podman machine start</span><br></pre></td></tr></table></figure><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li>安装MySQL，<a href="https://blog.csdn.net/u013541325/article/details/127795446">教程</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在cmd 或者 bash执行</span></span><br><span class="line">podman pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已有镜像</span></span><br><span class="line">podman images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">podman run -d --name local-mysql -p 4561:3306 -e MYSQL_ROOT_PASSWORD=123 -e LANG=C.UTF-8 mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">podman ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">podman <span class="built_in">exec</span> -it local-mysql /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h1 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h1><ol><li><p>podman安装的MySQL镜像不支持中文：<a href="https://blog.csdn.net/u010457406/article/details/90440494">解决</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重进容器失效</span></span><br><span class="line">echo &quot;export LANG=C.UTF-8&quot; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器时制定环境变量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加-e LANG=C.UTF-8，即</span></span><br><span class="line">podman run -d --name local-mysql -p 4561:3306 -e MYSQL_ROOT_PASSWORD=123 -e LANG=C.UTF-8 mysql</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://podman.io/docs/installation">Podman Installation Instructions</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Podman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asdf使用说明</title>
      <link href="/tools/The-trick-of-asdf/"/>
      <url>/tools/The-trick-of-asdf/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>作用：多语言环境管理</li><li>测试环境为<code>Mac</code></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装：<code>git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.12.0</code></p></li><li><p>添加以下内容至环境变量，如<code>~/.zshrc</code>，重启终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. &quot;$HOME/.asdf/asdf.sh&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装插件，插件仓库<a href="https://github.com/asdf-vm">asdf version manager</a>，<a href="https://github.com/asdf-community">asdf-community</a></p><ul><li><p>常用语言：<a href="https://github.com/asdf-community/asdf-golang">Golang</a>，<a href="https://github.com/asdf-community/asdf-python">Python</a>，<a href="https://github.com/asdf-vm/asdf-nodejs">nodejs</a>，<a href="https://github.com/halcyon/asdf-java">Java</a></p></li><li><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">asdf plugin add golang https://github.com/asdf-community/asdf-golang.git</span><br><span class="line">asdf plugin-add python</span><br><span class="line">asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git</span><br><span class="line">asdf plugin-add java https://github.com/halcyon/asdf-java.git</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列出插件支持的所有版本：<code>asdf list-all golang</code></p></li><li><p>安装具体版本：<code>asdf install golang 1.20.6</code></p></li><li><p>查看已安装软件及版本：<code>asdf list</code></p></li><li><p>全局生效：<code>asdf global golang 1.20.6</code></p></li><li><p>环境生效：<code>asdf reshim [语言名称]</code>，如<code>asdf reshim golang</code></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/asdf-vm/asdf">Github: asdf</a></li><li><a href="https://asdf-vm.com/">asdf website</a><ul><li><a href="https://asdf-vm.com/guide/getting-started.html">Get Started</a></li><li><a href="https://asdf-vm.com/manage/commands.html">All Commands</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用软件合集</title>
      <link href="/tools/awesome-software/"/>
      <url>/tools/awesome-software/</url>
      
        <content type="html"><![CDATA[<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><ul><li>Mac终端四件套：<a href="https://iterm2.com/">iterms2</a>, <a href="https://brew.sh/">homebrew</a>, <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">zsh</a>, <a href="https://ohmyz.sh/">oh my zsh</a></li><li>多语言环境配置：<a href="https://asdf-vm.com/">asdf</a><ul><li>Python多环境配置：<a href="https://www.anaconda.com/">Anaconda</a></li><li>Go多环境配置：<a href="https://github.com/go-nv/goenv">goenv</a></li></ul></li><li>数据库管理软件：<a href="https://sequel-ace.com/">Mac: Sequel Ace</a>, <a href="https://dbeaver.io/">DBeaver</a></li><li>编程利器：<a href="https://code.visualstudio.com/">Visual Studio Code</a>, <a href="https://www.jetbrains.com/">Jetbrains全家桶</a></li><li>虚拟化软件：<a href="https://www.docker.com/">Docker</a>, <a href="https://podman.io/">podman</a>, <a href="https://rancherdesktop.io/">Rancher Desktop</a>, <a href="https://blogs.vmware.com/workstation/2024/05/vmware-workstation-pro-now-available-free-for-personal-use.html">Vmware</a></li><li>远程连接：<a href="https://mobaxterm.mobatek.net/">MobaXterm</a></li><li>网络相关：<a href="https://www.wireshark.org/">Wireshark</a>, <a href="https://www.tcpdump.org/">tcpdump</a>, <a href="https://postman.com/">postman</a>, <a href="https://hoppscotch.com/download">hoppscotch</a></li></ul><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><ul><li><p>录屏软件：<a href="https://obsproject.com/">obs</a></p></li><li><p>截图软件：<a href="https://www.snipaste.com/">snipaste</a></p></li><li><p>录制Gif软件: <a href="https://getkap.co/">Kap: Only Mac</a></p></li><li><p>JSON 格式化软件: <a href="https://jsonviewer.app/">JSON Viewer: Only Mac APP</a>, <a href="https://chromewebstore.google.com/detail/jsonview/gmegofmjomhknnokphhckolhcffdaihd?utm_source=ext_app_menu">JSONView: Chrome extension</a></p></li><li><p>剪切板历史: <a href="https://github.com/p0deje/Maccy">Mac: maccy</a>, <a href="https://github.com/hluk/CopyQ">Windows: CopyQ</a></p></li><li><p>chrome 使用 vim: <a href="https://chromewebstore.google.com/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN&utm_source=ext_sidebar">vimium</a></p></li><li><p>文本编辑器: <a href="https://typora.io/">typora</a>, <a href="https://www.sublimetext.com/download">Sublime Text</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows】WSL1安装</title>
      <link href="/tutorial/Windows-install-WSL1/"/>
      <url>/tutorial/Windows-install-WSL1/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p><code>WSL</code>能够直接在Windows下直接运行Linux子系统，就可以不用开虚拟机，速度较快</p></li><li><p><strong>以下方法安装的为WSL1</strong>，可自由选择安装路径，也可直接通过<code>Microsoft Store</code>安装，默认安装为WSL2（略有不同，等用到再去查）</p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>修改Windows系统配置，按以下步骤开启对应功能</p><ol><li><p>找到<code>控制面板</code>，点击<code>程序</code></p><p><img src="/tutorial/Windows-install-WSL1/image-20211029091902550.png" alt="image-20211029091902550"></p></li><li><p>点击<code>启用或关闭Windows功能</code></p><p><img src="/tutorial/Windows-install-WSL1/image-20211029091933133.png" alt="image-20211029091933133"></p></li><li><p>勾选<code>使用于Linux的Windows子系统</code></p><p><img src="/tutorial/Windows-install-WSL1/image-20211029091958078.png" alt="image-20211029091958078"></p></li><li><p>完成后，系统会提示需要重启电脑，重启即可（不重启功能还没有配置好）</p></li><li><p>重启后，如果电脑没有网了，那么可能是禁用了<code>IPV4</code>，按以下步骤设置</p><ol><li><p>在<code>Windows设置-&gt;网络和Internet-&gt;更改适配器选项</code></p><p><img src="/tutorial/Windows-install-WSL1/image-20211029092314183.png" alt="image-20211029092314183"></p></li><li><p>找到电脑网卡，右键属性进入</p><p><img src="/tutorial/Windows-install-WSL1/image-20211029092401565.png" alt="image-20211029092401565"></p></li><li><p>勾选下图所示内容即可（其他不用改，保持默认即可）</p><p><img src="/tutorial/Windows-install-WSL1/image-20211029092432780.png" alt="image-20211029092432780"></p></li></ol></li></ol></li><li><p>去<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">官网</a>下载wsl的appx镜像，比如下载的Ubuntu 18.04，往下拉找到<code>下载发行版</code>选择相应版本下载即可（</p><p><img src="/tutorial/Windows-install-WSL1/image-20211029091444638.png" alt="image-20211029091444638"></p></li><li><p>将下载的文件的后缀Appx改为zip，然后解压到你想要安装该wsl的位置</p><p><img src="/tutorial/Windows-install-WSL1/image-20211029091612239.png" alt="image-20211029091612239"></p></li><li><p>双击<code>ubuntu1804.exe</code>，它会自动在此目录下安装好ubuntu wsl，等待一会即可，过程中需要设置用户名和密码按照提示进行输入即可</p></li><li><p>查看安装成功的版本及WSL版本：<code>wsl -l -v</code></p><p><img src="/tutorial/Windows-install-WSL1/image-20220613091127732.png" alt="image-20220613091127732"></p></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li>法一：用<code>win + r</code>输入<code>cmd</code>打开命令提示符，然后输入<code>bash</code>即可进入<code>Linux</code>终端</li><li>法二：<code>win + r</code>输入<code>bash</code></li></ul><p><img src="/tutorial/Windows-install-WSL1/image-20211029092714349.png" alt="image-20211029092714349"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h2><ol><li>修改<code>sudo vim /etc/apt/sources.list</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><ol start="2"><li>更新：<code>sudo apt update</code></li></ol><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol><li>进入<code>cmd</code>：输入<code>wsl --list --all</code>查看已经安装的发行版本</li><li>输入<code>wslconfig /u [需要卸载名称]</code>进行卸载</li><li>因为我是纯净安装，为了避免出错，删除安装目录</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_41601836/article/details/106610576">如何修改WSL的安装路径</a></li><li><a href="https://blog.csdn.net/m0_60028455/article/details/124800849">WSL2安装及配置图形界面</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Windows </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】09-版本升级</title>
      <link href="/tutorial/Hexo-09-upgrade-hexo-version/"/>
      <url>/tutorial/Hexo-09-upgrade-hexo-version/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>以下在<code>Windows10</code>下操作成功</li></ul><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>卸载现有<code>nodejs</code>，进入<a href="https://nodejs.org/en">官网</a>下载并安装需求版本，本次安装<code>18.17.1 LTS</code>，使用<code>node version</code>查验是否成功</p></li><li><p>更新<code>hexo</code>，如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下指令均在Hexo目录下操作，先定位到Hexo目录</span></span><br><span class="line"><span class="comment"># 查看当前版本，判断是否需要升级</span></span><br><span class="line">hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局升级hexo-cli</span></span><br><span class="line">npm i hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看版本，看hexo-cli是否升级成功</span></span><br><span class="line">hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装npm-check，若已安装可以跳过</span></span><br><span class="line">npm install <span class="literal">-g</span> npm<span class="literal">-check</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查系统插件是否需要升级</span></span><br><span class="line">npm<span class="literal">-check</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装npm-upgrade，若已安装可以跳过</span></span><br><span class="line">npm install <span class="literal">-g</span> npm<span class="literal">-upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新package.json</span></span><br><span class="line">npm<span class="literal">-upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新全局插件</span></span><br><span class="line">npm update <span class="literal">-g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统插件</span></span><br><span class="line">npm update <span class="literal">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看版本，判断是否升级成功</span></span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure></li><li><p>本地测试是否通过</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.wangjungang.cn/2023/04/25/hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/">hexo版本升级</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache使用说明</title>
      <link href="/tools/The-trick-of-apache/"/>
      <url>/tools/The-trick-of-apache/</url>
      
        <content type="html"><![CDATA[<h1 id="安装（未完成）"><a href="#安装（未完成）" class="headerlink" title="安装（未完成）"></a>安装（未完成）</h1><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li><p><code>apache</code>和<code>apache2</code>，版本不同，功能特性不同</p></li><li><p><code>apache2</code>和<code>httpd</code>指在不同架构下的说法，功能一致，配置些许不同（如<code>apache2.conf</code>和<code>httpd.conf</code>）</p><blockquote><p><strong>httpd</strong> is the same as <strong>apache2</strong>. It depends on the OS you use. For example in <strong>RHEL 6.2</strong> it is called <strong>httpd</strong> and in <strong>Ubuntu</strong> it is called <strong>apache2</strong>.</p></blockquote></li><li><p>版本查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apache2 -v # Debian/Ubuntu</span><br><span class="line">httpd -v # CentOS/RHEL/Fedora</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-apache/image-20221213212606163.png" alt="image-20221213212606163"></p></li></ul><h1 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h1><ul><li><p>权限不够加<code>sudo</code></p></li><li><p>查看是否启用了模块：<code>apache2ctl -M | grep [模块名]</code></p><ul><li>如：<code>sudo apache2ctl -M | grep ssl</code>，启用了显示<code>ssl_module (shared)</code></li></ul></li><li><p>启用配置&#x2F;模块&#x2F;站点：<code>a2ensite/a2enmod/a2enconf</code></p><ul><li>如启用<code>SSL</code>模块：<code>a2enmod ssl</code>，然后执行<code>systemctl reload apache2</code></li></ul></li><li><p>取消配置&#x2F;模块&#x2F;站点：<code>a2dissite/a2dismod/a2disconf</code></p><ul><li>如取消<code>SSL</code>模块：<code>a2dismod ssl</code>，然后执行<code>systemctl reload apache2</code></li></ul></li></ul><h1 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h1><ul><li><p>以<code>Debian/Ubuntu</code>下<code>apache2</code>为例</p></li><li><p>文件架构说明</p><ul><li><code>apache2.conf</code>：Apache 的主要配置文件，包含了全局的配置指令和其他配置文件的引用</li><li><code>ports.conf</code>：定义 Apache 监听的端口和协议</li><li><code>xxx-available</code>：Apache服务器<strong>目前所有支持的信息</strong><ul><li><code>conf-available</code>：支持的配置，存放其他的 Apache 配置文件的目录，例如安全策略、认证和授权等</li><li><code>mods-available</code>：支持的模块，存放 Apache 模块配置文件的目录，每个文件对应一个模块</li><li><code>sites-available</code>：支持的站点，存放虚拟主机配置文件的目录，每个文件对应一个虚拟主机</li></ul></li><li><code>xxx-enable</code>：Apache服务器<strong>目前可用的信息</strong><ul><li>是<code>xxx-available</code>的一个软连接，通过<code>a2ensite/a2enmod/a2enconf</code>创建，通过<code>a2dissite/a2dismod/a2disconf</code>销毁，<strong>每次执行命令都需要使用<code>systemctl reload apache2</code>重载配置</strong></li><li><code>conf-available</code>：现在可用的配置，存放已启用的其他 Apache 配置文件的目录，通常通过在 <code>conf-available</code> 目录中创建符号链接来启用其他配置文件</li><li><code>mods-available</code>：现在可用的模块，存放已启用的 Apache 模块配置文件的目录，通常通过在 <code>mods-available</code> 目录中创建符号链接来启用模块</li><li><code>sites-available</code>：现在可用的站点，存放已启用的虚拟主机配置文件的目录，通常通过在 <code>sites-available</code> 目录中创建符号链接来启用虚拟主机</li></ul></li></ul></li><li><p>配置文件地址：<code>/etc/apache2/apache2.conf</code>，内含说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It is <span class="built_in">split</span> into several files forming the configuration hierarchy outlined</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">below, all located <span class="keyword">in</span> the /etc/apache2/ directory:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       /etc/apache2/</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |-- apache2.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |       `--  ports.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |-- mods-enabled</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |       |-- *.load</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |       `-- *.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |-- conf-enabled</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      |       `-- *.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      `-- sites-enabled</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">              `-- *.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* apache2.conf is the main configuration file (this file). It puts the pieces</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  together by including all remaining configuration files when starting up the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  web server.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># * ports.conf is always included from the main configuration file. It is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  supposed to determine listening ports <span class="keyword">for</span> incoming connections <span class="built_in">which</span> can be</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  customized anytime.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># * Configuration files in the mods-enabled/, conf-enabled/ and sites-enabled/</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  directories contain particular configuration snippets <span class="built_in">which</span> manage modules,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  global configuration fragments, or virtual host configurations,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  respectively.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   They are activated by symlinking available configuration files from their</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  respective *-available/ counterparts. These should be managed by using our</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  helpers a2enmod/a2dismod, a2ensite/a2dissite and a2enconf/a2disconf. See</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  their respective man pages <span class="keyword">for</span> detailed information.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># * The binary is called apache2. Due to the use of environment variables, in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  the default configuration, apache2 needs to be started/stopped with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  /etc/init.d/apache2 or apache2ctl. Calling /usr/bin/apache2 directly will not</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  work with the default configuration.</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-the-apache-web-server-on-an-ubuntu-or-debian-vps">How To Configure the Apache Web Server on an Ubuntu or Debian VPS</a></li><li><a href="https://www.phusionpassenger.com/library/install/apache/working_with_the_apache_config_file.html">Working with the Apache configuration file</a></li><li><a href="https://www3.ntu.edu.sg/home/ehchua/programming/howto/Apache_HowToConfigure.html">How To Configure Apache 2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx使用说明</title>
      <link href="/tools/The-trick-of-nginx/"/>
      <url>/tools/The-trick-of-nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><p>分发版本安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></li><li><p><del>docker安装</del></p></li><li><p><del>编译安装</del></p></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li><p>启动<code>Nginx</code>：<code>nginx</code></p></li><li><p>查看版本：<code>nginx -v</code></p><p><img src="/tools/The-trick-of-nginx/image-20230422160713618.png" alt="image-20230422160713618"></p></li><li><p>等所有进程停止后退出<code>Nginx</code> ：<code>nginx -s quit</code></p></li><li><p>暴力退出<code>Nginx</code> ：<code>nginx -s stop</code></p></li><li><p>重新加载配置文件（热更新）：<code>nginx -s reload</code></p></li><li><p>测试配置文件：<code>nginx -t</code></p></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>以<code>Ubuntu 20.04</code>使用<code>apt</code>安装<code>nginx.1.18.0(Ubuntu)</code>为例，不同版本可能不完全一致，但相似</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf.d# 用户自己定义的conf配置文件</span><br><span class="line">├── fastcgi.conf# fastcgi相关参数，cgi与fastcgi关系可查看参考4（What is CGI, FastCGI?）</span><br><span class="line">├── fastcgi_params# fastcgi相关参数，与fastcgi.conf区别如后所示</span><br><span class="line">├── koi-utf# 编码转换映射文件, charset_map  koi8-r &lt; -- &gt; utf-8</span><br><span class="line">├── koi-win# 编码转换映射文件, charset_map  koi8-r &lt; -- &gt; windows-1251</span><br><span class="line">├── mime.types# 文件扩展名与文件类型映射表，nginx根据映射关系，设置http请求响应头的Content-Type值</span><br><span class="line">├── modules-available# 可用模块配置</span><br><span class="line">├── modules-enabled# 启用模块配置</span><br><span class="line">│   ├── 50-mod-http-image-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-image-filter.conf</span><br><span class="line">│   ├── 50-mod-http-xslt-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-xslt-filter.conf</span><br><span class="line">│   ├── 50-mod-mail.conf -&gt; /usr/share/nginx/modules-available/mod-mail.conf</span><br><span class="line">│   └── 50-mod-stream.conf -&gt; /usr/share/nginx/modules-available/mod-stream.conf</span><br><span class="line">├── nginx.conf# 主配置文件（全局配置）</span><br><span class="line">├── proxy_params# proxy相关参数</span><br><span class="line">├── scgi_params# scgi相关参数</span><br><span class="line">├── sites-available# 可用网站配置，系统默认设置的配置文件</span><br><span class="line">│   └── default</span><br><span class="line">├── sites-enabled# 启用网站配置，由sites-available中的配置文件转换生成</span><br><span class="line">│   └── default -&gt; /etc/nginx/sites-available/default</span><br><span class="line">├── snippets# 重复的配置可放在这里，被其他文件引用</span><br><span class="line">│   ├── fastcgi-php.conf</span><br><span class="line">│   └── snakeoil.conf</span><br><span class="line">├── uwsgi_params# uwsgi相关参数</span><br><span class="line">└── win-utf# 编码转换映射文件, charset_map  windows-1251 &lt; -- &gt; utf-8</span><br></pre></td></tr></table></figure><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ul><li><code>$args</code> ：这个变量等于请求行中的参数，同 <code>$query_string</code></li><li><code>$content_length</code> ：请求头中的 Content-length 字段</li><li><code>$content_type</code> ：请求头中的 Content-Type 字段</li><li><code>$document_root</code> ：当前请求在 root 指令中指定的值</li><li><code>$host</code> ：请求行的主机名，为空则为请求头字段 Host 中的主机名，再为空则与请求匹配的 server_name</li><li><code>$http_host</code> ： <code>$host</code>加端口</li><li><code>$http_user_agent</code> ：客户端 agent 信息</li><li><code>$http_cookie</code> ：客户端 cookie 信息</li><li><code>$limit_rate</code> ：这个变量可以限制连接速率</li><li><code>$request_method</code> ：客户端请求的动作，通常为 GET 或 POST</li><li><code>$remote_addr</code> ：客户端的 IP 地址</li><li><code>$remote_port</code> ：客户端的端口</li><li><code>$remote_user</code> ：已经经过 Auth Basic Module 验证的用户名。</li><li><code>$request_filename</code> ：当前请求的文件路径，由 root 或 alias 指令与 URI 请求生成</li><li><code>$scheme</code> ：HTTP 方法（如 http，https）</li><li><code>$server_protocol</code> ：请求使用的协议，通常是 HTTP&#x2F;1.0 或 HTTP&#x2F;1.1</li><li><code>$server_addr</code> ：服务器地址，在完成一次系统调用后可以确定这个值</li><li><code>$server_name</code> ：服务器名称</li><li><code>$server_port</code> ：请求到达服务器的端口号</li><li><code>$request_uri</code> ：包含请求参数的原始 URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”</li><li><code>$uri</code> ：不带请求参数的当前 URI，$uri 不包含主机名，如”&#x2F;foo&#x2F;bar.html”</li><li><code>$document_uri</code> ：与 $uri 相同</li></ul><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>分为四个部分</p><ul><li>全局配置：影响<code>Nginx</code>服务器全局 ，一般配置<code>worker</code>数量，错误日志等 </li><li><code>events</code>配置：负责<code>Nginx</code>与客户端的网络连接，如配置网络<code>IO</code>模型，配置单个<code>worker</code>支持的最大连接数等</li><li><code>http</code>模块：<strong>主要配置部分</strong>，配置请求转发，反向代理等的地方</li><li><code>virtual hosts</code>模块：通过虚拟主机将不同的配置进行隔离</li></ul><p><img src="/tools/The-trick-of-nginx/image-20230410220600668.png" alt="image-20230410220600668"></p></li></ul><h3 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## global ########</span></span><br><span class="line"><span class="comment"># 配置Nginx运行时的用户及用户组</span></span><br><span class="line"><span class="comment"># 默认为nobody nobody</span></span><br><span class="line"><span class="attribute">user</span> www www;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置worker进程数量</span></span><br><span class="line"><span class="comment"># 根据CPU数量设置</span></span><br><span class="line"><span class="comment"># 默认数量为1，可以设置为auto来自动设置</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置erro_log路径及级别，可以设置记录多个级别的信息</span></span><br><span class="line"><span class="comment"># 级别：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">info</span>;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">debug</span>;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程文件地址，记录了主进程的进程ID</span></span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定每个worker能够打开的文件描述符最大数量</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######## events ########</span></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment"># 设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    <span class="comment"># accept_mutex on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    <span class="comment"># multi_accept on; </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用epoll作为网络通讯模型</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>; </span><br><span class="line">    <span class="comment"># 单个worker的最大连接数</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">######## http ########</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># 文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="comment"># include mime.types;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 默认文件类型，默认为text/plain</span></span><br><span class="line">    <span class="comment"># default_type  application/octet-stream;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自定义日志格式</span></span><br><span class="line">    <span class="comment"># combined为日志格式的默认值</span></span><br><span class="line">    <span class="comment"># 参考10提到，需要需要开启压缩 gzip on; 否则不生成日志文件（待验证）</span></span><br><span class="line">    <span class="comment"># log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;;</span></span><br><span class="line">    <span class="comment"># access_log log/access.log myFormat; </span></span><br><span class="line">    <span class="comment"># gzip on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下四个和客户端相关</span></span><br><span class="line">    <span class="comment"># 当客户端发起请求时，Nginx默认会使用client_header_buffer_size作为缓冲区来读取HTTP请求头的信息</span></span><br><span class="line">    <span class="comment"># 当HTTP请求头的信息大小超过1k时，使用large_client_header_buffers作为缓冲区读取</span></span><br><span class="line">    <span class="comment"># 再次超过，则会返回400错误码</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">21k</span>;</span><br><span class="line">    <span class="comment"># body缓冲区大小，类似上面的头部大小设定</span></span><br><span class="line">    <span class="comment"># 超过client_max_body_size，则会返回413错误码</span></span><br><span class="line">    <span class="attribute">client_body_buffer_size</span> <span class="number">16k</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这三个一般配合使用，与网络IO相关</span></span><br><span class="line">    <span class="comment"># 涉及零拷贝，即是否有缓冲区拷贝等</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 优化一次性数据发送量</span></span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 关闭了网络拥塞算法</span></span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 同一个连接最大的请求数量，默认100</span></span><br><span class="line">    <span class="attribute">keepalive_requests</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="comment"># 同一个连接存活的时间，单位为秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 错误页</span></span><br><span class="line">    <span class="comment"># error_page 404 https://www.baidu.com; </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">######## virtual hosts ########</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># 请求域名 多个用空格分隔</span></span><br><span class="line">        <span class="comment"># 可以是：全名，通配符，正则表达式</span></span><br><span class="line">        <span class="attribute">server_name</span> example.org www.example.org;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># location是对server_name更为详细的配置，紧跟通配符或正则表达式</span></span><br><span class="line">        <span class="comment"># 匹配到不同规则，返回不同结果</span></span><br><span class="line">        <span class="comment"># 当请求为图片时，设置了过期时间为10天</span></span><br><span class="line">        <span class="section">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span> &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">10d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 匹配server_name/</span></span><br><span class="line">        <span class="comment"># 配到到即会返回/usr/share/nginx/html/index.html给客户端</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># server_name/app</span></span><br><span class="line">        <span class="section">location</span> /app/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:88;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-FOR <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><ul><li><p>优先级顺序：精确匹配，前缀匹配，正则匹配，普通字符匹配</p></li><li><p><code>精确匹配（=）</code>：等于，严格匹配，如果找到，立即停止搜索并立即处理此请求</p></li><li><p><code>前缀匹配（^~）</code>：如果匹配成功，则不再匹配其它 location，<code>^</code>表示 “非”，即不查询正则表达式</p></li><li><p><code>正则匹配（~和～*）</code>：前者表示<strong>区分大小写</strong>，后者表示<strong>不区分大小写</strong></p></li><li><p>示例</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /images/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ \.jpg</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>/images/1.jpg</code>代理到 <code>http://localhost:8080/images/1.jpg</code></li><li><code>/some/path/1.jpg</code>代理到<code>http://localhost:8080/some/path/1.jpg</code></li></ul></li></ul><h2 id="Upstream"><a href="#Upstream" class="headerlink" title="Upstream"></a>Upstream</h2><ul><li><p>负载均衡模块</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># 将多个服务器放在cluster1集群中</span></span><br><span class="line">    <span class="section">upstream</span> cluster1 &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 匹配到时，讲请求转发到cluster1集群中</span></span><br><span class="line">        <span class="comment"># 具体分配根据负载均衡策略进行分配</span></span><br><span class="line">        <span class="section">location</span> /app1/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http:ss//cluster1/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>负载均衡策略</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 轮询，默认方式，按照时间顺序一个个分配</span></span><br><span class="line"><span class="comment"># 如果有服务器下线，Nginx会自动提出下线服务器</span></span><br><span class="line"><span class="section">upstream</span> cluster1 &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># weight</span></span><br><span class="line"><span class="comment"># 权重越高，分配的请求越多</span></span><br><span class="line"><span class="section">upstream</span> cluster1 &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span> weight = <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span> weight = <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span> weight = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ip_hash</span></span><br><span class="line"><span class="comment"># 根据客户端的IP来固定选择分配的服务器</span></span><br><span class="line"><span class="section">upstream</span> cluster1 &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash</span></span><br><span class="line"><span class="comment"># 通用hash，允许用户自定义hash的key，key可以是字符串、变量或组合</span></span><br><span class="line"><span class="comment"># 例如，key可以是配对的源 IP 地址和端口，也可以是 URI</span></span><br><span class="line"><span class="comment"># consistent参数启用 ketama一致哈希算法</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小连接</span></span><br><span class="line"><span class="comment"># 将下一个请求分配给活动连接数最少的服务器（较为空闲的服务器）</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机</span></span><br><span class="line"><span class="comment"># 每个请求都将传递到随机选择的服务器</span></span><br><span class="line"><span class="comment"># two是可选参数，NGINX 在考虑服务器权重的情况下随机选择两台服务器，然后使用指定的方法选择其中一台，默认为选择连接数最少（least_conn）的服务器</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">random</span> two least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.165:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 健康检查</span></span><br><span class="line"><span class="comment"># 在反向代理中，如果后端服务器在某个周期内响应失败次数超过规定值，nginx会将此服务器标记为失败，并在之后的一个周期不再将请求发送给这台服务器</span></span><br><span class="line"><span class="comment"># 通过fail_timeout来设置检查周期，默认为10秒</span></span><br><span class="line"><span class="comment"># 通过max_fails来设置检查失败次数，默认为1次</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.163:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.164:8080</span>; max_fails=3 fail_timeout=30s; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h2 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h2><ul><li><p><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#try_files">try_files</a>：可用于检查<strong>指定的文件或目录是否存在</strong>，如果不存在，则重定向到指定位置</p></li><li><p>如下，如果原始URI对应的文件不存在，NGINX将内部重定向到<code>/www/data/images/default.gif</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /www/data;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /images/ &#123;</span><br><span class="line">        <span class="comment"># 最后一个参数也可以是状态代码（状态码之前需要加上等号）</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /images/default.gif;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">$uri</span>.html =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果原始 URI 和附加尾随斜杠的 URI 都没有解析到现有文件或目录中，则请求将重定向到命名位置，该位置会将其传递到代理服务器</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@backend</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="variable">@backend</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend.example.com;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="return与rewrite"><a href="#return与rewrite" class="headerlink" title="return与rewrite"></a>return与rewrite</h2><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ul><li><p>服务端停止处理并将状态码<code>status code</code>返回给客户端</p><ul><li><code>return code URL</code></li><li><code>return code text</code></li><li><code>return code</code></li><li><code>return URL</code></li></ul></li><li><p>强制所有请求使用<code>HTTPS</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误写法</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8003</span>;</span><br><span class="line">    <span class="attribute">server_name</span> a.hello.com</span><br><span class="line"></span><br><span class="line">    return <span class="number">301</span> https://localhost:8004;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确写法</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8003</span>;</span><br><span class="line">    <span class="attribute">server_name</span> a.hello.com</span><br><span class="line"></span><br><span class="line">    return <span class="number">301</span> https://192.168.56.105:8004;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原因在于return是重定向，而proxy_pass是转发，因此使用return时不能使用localhost</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><ul><li><p>如果指定的正则表达式与请求 URI 匹配，则 URI 将按照字符串中的指定进行更改。指令按其在配置文件中出现的先后顺序执行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(/download/.*)/media/(\w+)\.?.*$</span> <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.mp3 <span class="literal">last</span>;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(/download/.*)/audio/(\w+)\.?.*$</span> <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.ra  <span class="literal">last</span>;</span><br><span class="line">    <span class="attribute">return</span>  <span class="number">403</span>;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面是使用该指令的示例 NGINX 重写规则。它匹配以字符串 <code>/download</code> 开头的 URL，然后在路径后面的某个位置包含 <code>/media/</code> 或 <code>/audio/</code> 目录</li><li>它将这些元素替换为 <code>/mp3/</code>，并添加相应的文件扩展名，<code>.mp3</code>或 <code>.ra</code>。和 变量捕获未更改的路径元素</li><li>例如<ul><li><code>/download/cdn-west/media/file1</code> 变成了 <code>/download/cdn-west/mp3/file1.mp3</code></li><li>如果文件名上有扩展名（如 <code>.flv</code>），则表达式会将其剥离，并将其替换为<code>.mp3</code></li></ul></li></ul></li><li><p>如果字符串包含新的请求参数，则以前的请求参数将追加到这些参数之后。如果不需要这样做，则在替换字符串的末尾放置一个问号可以避免附加它们</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/users/(.*)$</span> /show?user=<span class="variable">$1</span>? <span class="literal">last</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="last与break"><a href="#last与break" class="headerlink" title="last与break"></a>last与break</h2><ul><li><code>last</code>：如果当前规则匹配，停止处理后续rewrite规则，使用重写后的路径，重新搜索<code>location及其块内</code>指令</li><li><code>break</code>:如果当前规则匹配，停止处理后续rewrite规则，执行<code>&#123;&#125;块</code>内其他指令</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="概述及使用建议"><a href="#概述及使用建议" class="headerlink" title="概述及使用建议"></a>概述及使用建议</h2><h3 id="conf-d和sites-available"><a href="#conf-d和sites-available" class="headerlink" title="conf.d和sites-available"></a>conf.d和sites-available</h3><ul><li>直接在<code>conf.d</code>里面配置<code>xx.conf</code>比在<code>sites-available</code>中配置，再添加超链接到<code>sites-enabled</code>中方便</li></ul><h3 id="重复的配置可继承自父级"><a href="#重复的配置可继承自父级" class="headerlink" title="重复的配置可继承自父级"></a>重复的配置可继承自父级</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/nginx-default/;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># root继承父级配置</span></span><br><span class="line">        <span class="comment"># [...]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /foo &#123;</span><br><span class="line">        <span class="comment"># root继承父级配置</span></span><br><span class="line">        <span class="comment"># [...]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /bar &#123;</span><br><span class="line">        <span class="comment"># 覆盖</span></span><br><span class="line">        <span class="attribute">root</span> /some/other/place;</span><br><span class="line">        <span class="comment"># [...]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/nginx-default/;</span><br><span class="line">    <span class="comment"># [...]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">location</span> /foo &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/nginx-default/;</span><br><span class="line">    <span class="comment"># [...]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">location</span> /bar &#123;</span><br><span class="line">    <span class="attribute">root</span> /some/other/place;</span><br><span class="line">  <span class="comment"># [...]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要将所有请求都代理到后端服务器（动静分离）"><a href="#不要将所有请求都代理到后端服务器（动静分离）" class="headerlink" title="不要将所有请求都代理到后端服务器（动静分离）"></a>不要将所有请求都代理到后端服务器（动静分离）</h3><ul><li>考虑到很多请求是访问静态内容（如图片，css，javascript等文件）,可以使用缓存或者配置静态目录来减少发送到后端的请求数量，这样可以减小后端服务器的开销</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8002</span>;</span><br><span class="line">    <span class="attribute">server_name</span> ruoyi.tomcat;</span><br><span class="line">    <span class="attribute">root</span> /home/www/static;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@proxy</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="variable">@proxy</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐</span></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查文件是否存在使用try-files代替if-f"><a href="#检查文件是否存在使用try-files代替if-f" class="headerlink" title="检查文件是否存在使用try_files代替if -f"></a>检查文件是否存在使用try_files代替if -f</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在重写路径中包含http-或https"><a href="#在重写路径中包含http-或https" class="headerlink" title="在重写路径中包含http:&#x2F;&#x2F;或https:&#x2F;&#x2F;"></a>在重写路径中包含http:&#x2F;&#x2F;或https:&#x2F;&#x2F;</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^</span> http://example.com <span class="literal">permanent</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐</span></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^</span> example.com <span class="literal">permanent</span>; </span><br></pre></td></tr></table></figure><h2 id="通过域名访问（反向代理）"><a href="#通过域名访问（反向代理）" class="headerlink" title="通过域名访问（反向代理）"></a>通过域名访问（反向代理）</h2><h3 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h3><ul><li><p>直接在浏览器输入域名即可访问同一服务器部署的不同网站，<strong>不需要显示输入端口</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server; <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">root</span> /mnt/aa; <span class="comment"># 访问根目录</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm; <span class="comment"># 默认页,可以不设置</span></span><br><span class="line">        <span class="attribute">server_name</span> www.hello.com; <span class="comment"># 根据域名跳转</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;  <span class="comment"># 跳转的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;<span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">root</span> /mnt/bb;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        <span class="attribute">server_name</span> bs.hello.com;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8082; <span class="comment"># 另一个路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果proxy-pass的地址包括/或其他路径，那么/some/path将会被替换</span></span><br><span class="line"><span class="comment"># 如下所示，访问 http://localhost/some/path/page.html 将被代理到 http://localhost:8080/zh-cn/page.html</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;<span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">server_name</span> <span class="number">1</span>.hello.com;</span><br><span class="line">        <span class="section">location</span> /some/path/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:8080/zh-cn/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于使用反向代理之后，后端服务无法获取用户的真实IP，所以，一般反向代理都会设置以下header信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /some/path/ &#123;</span><br><span class="line">    <span class="comment">#nginx的主机地址</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常用变量的值</p><ul><li><code>$host</code>：nginx主机IP，例如192.168.56.105</li><li><code>$http_host</code>：nginx主机IP和端口，192.168.56.105:8001</li><li><code>$proxy_host</code>：localhost:8088，proxy_pass里配置的主机名和端口</li><li><code>$remote_addr</code>:用户的真实IP，即客户端IP。</li></ul></li></ul><h3 id="非HTTP代理"><a href="#非HTTP代理" class="headerlink" title="非HTTP代理"></a>非HTTP代理</h3><ul><li><p><a href="https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass">fastcgi_pass</a>：将请求转发到FastCGI服务器（多用于PHP）</p></li><li><p><a href="https://nginx.org/en/docs/http/ngx_http_scgi_module.html#scgi_pass">scgi_pass</a>：将请求转发到SCGI server服务器（多用于PHP）</p></li><li><p><a href="https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass">uwsgi_pass</a>：将请求转发到uwsgi服务器（多用于python）</p></li><li><p><a href="https://nginx.org/en/docs/http/ngx_http_memcached_module.html#memcached_pass">memcached_pass</a>：将请求转发到memcached服务器</p></li><li><p>TCP反向代理：与<code>HTTP</code>反向代理同级，需要修改<code>nginx.conf</code>文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP代理</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8002</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP代理</span></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">13306</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> localhost:<span class="number">3306</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SSL设置（HTTPS）"><a href="#SSL设置（HTTPS）" class="headerlink" title="SSL设置（HTTPS）"></a>SSL设置（HTTPS）</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> www.hello.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span> [证书公钥路径];</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> [证书密钥路径];</span><br><span class="line">    <span class="comment"># 如果设置了密码，需要加上</span></span><br><span class="line">    <span class="comment"># ssl_password_file   /home/ssl/cert.pass;</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="comment"># 表示使用的加密套件的类型</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="comment"># 表示使用的TLS协议的类型</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; </span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /mnt/cc;   <span class="comment">#站点目录</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="允许与禁止IP"><a href="#允许与禁止IP" class="headerlink" title="允许与禁止IP"></a>允许与禁止IP</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">allow</span> <span class="number">12.12.12.22</span>  <span class="comment"># 允许访问</span></span><br><span class="line">deny <span class="number">223.104.123.12</span>; <span class="comment"># 禁止访问</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.0.0.0</span>/<span class="number">8</span>;   <span class="comment"># 封 123.0.0.1~123.255.255.254 这个段的ip</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.1.0.0</span>/<span class="number">16</span>;  <span class="comment"># 封 123.1.0.1~123.1.255.254 这个段的ip</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.1.1.0</span>/<span class="number">24</span>;<span class="comment"># 封 123.1.1.1~123.1.1.254 这个段的ip</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> all;   <span class="comment"># 除allow的IP地址外，其他的IP地址都禁止访问</span></span><br></pre></td></tr></table></figure><h2 id="域名迁移，不让用户收藏的链接或者搜索引擎的链接失效"><a href="#域名迁移，不让用户收藏的链接或者搜索引擎的链接失效" class="headerlink" title="域名迁移，不让用户收藏的链接或者搜索引擎的链接失效"></a>域名迁移，不让用户收藏的链接或者搜索引擎的链接失效</h2><ul><li><p>将请求从 <code>www.old-name.com </code> 和<code>old-name.com</code>永久重定向到 <code>www.new-name.com</code>，包含http和https请求</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> www.old-name.com old-name.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://www.new-name.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h1><h2 id="fastcgi-params和fastcgi-conf的区别"><a href="#fastcgi-params和fastcgi-conf的区别" class="headerlink" title="fastcgi_params和fastcgi.conf的区别"></a>fastcgi_params和fastcgi.conf的区别</h2><ol><li><p>两者的差异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fastcgi.conf只比fastcgi_params多了一行</span></span><br><span class="line">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br></pre></td></tr></table></figure></li><li><p>原本只有<code>fastcgi_params</code>文件，<code>fastcgi.conf</code>是<code>nginx 0.8.30</code> 才引入的，主要为是解决部分人在定义<code>SCRIPT_FILENAME</code>时采用<strong>硬编码</strong>的方式，如<code>fastcgi_param  SCRIPT_FILENAME  /var/www/foo$fastcgi_script_name</code>，于是<strong>为了规范用法</strong>便引入了<code>fastcgi.conf</code></p></li><li><p>为什么要引入新文件，而不是在旧的文件上改造？</p><ul><li>这是因为<code>fastcgi_param</code>指令是<strong>数组型</strong>的<ul><li>和普通指令相同的是：内层替换外层；</li><li>和普通指令不同的是：当在同级多次使用的时候，是新增而不是替换</li></ul></li><li>换句话说，如果在同级定义两次<code>SCRIPT_FILENAME</code>，那么它们都会被发送到后端，这可能会导致一些潜在的问题，为了避免此类情况，便引入了一个新的配置文件</li></ul></li><li><p>推荐使用：<code>fastcgi.conf</code></p></li></ol><h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><ul><li><p>转发是服务端行为，重定向是客户端行为</p></li><li><p>转发：反向代理<code>proxy_pass</code>属于转发，浏览器的访问栏输入的地址不会发生变化</p><p><img src="/tools/The-trick-of-nginx/1660027681278-8d232df3-69f1-4bb7-ae31-70dab5777cb7.png" alt="截屏2022-08-09 下午2.47.52.png"></p></li><li><p>重定向：<code>return</code>，<code>rewrite</code>属于重定向，在客户端进行。浏览器的访问栏输入的地址会发生变化</p><p><img src="/tools/The-trick-of-nginx/1660014580821-4eae68ec-ecf6-45ef-a5a7-4e33a77efec9.png" alt="截屏2022-08-09 上午11.09.32.png"></p></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>正确的配置未生效，请清除浏览器缓存<ul><li>当你确定修改的配置的正确的，但是未生效，请清除浏览器缓存或者禁用浏览器缓存</li></ul></li><li>在<code>HTTPS</code>中<strong>不启用</strong> <code>SSLv3</code><ul><li>由于 SSLv3 中存在 <code>POODLE</code> 漏洞，建议不要在启用了 SSL 的站点中使用 SSLv3</li><li>规则：<code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</code></li></ul></li><li>不要将 root 目录配置成 <code>/</code>或 <code>/root</code></li><li>谨慎使用<code>chmod 777</code><ul><li>可以使用<code>namei -om /path/to/check</code>显示路径上的所有权限，并找到问题的根本原因</li></ul></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="默认文件"><a href="#默认文件" class="headerlink" title="默认文件"></a>默认文件</h2><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="attribute">include</span> /etc/nginx/modules-enabled/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">768</span>;</span><br><span class="line">    <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Basic Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line">    <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">    <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># SSL Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Logging Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Gzip Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip_vary on;</span></span><br><span class="line">    <span class="comment"># gzip_proxied any;</span></span><br><span class="line">    <span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">    <span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">    <span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line">    <span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Virtual Host Configs</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mail &#123;</span></span><br><span class="line"><span class="comment">#   # See sample authentication script at:</span></span><br><span class="line"><span class="comment">#   # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   # auth_http localhost/auth.php;</span></span><br><span class="line"><span class="comment">#   # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span></span><br><span class="line"><span class="comment">#   # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   server &#123;</span></span><br><span class="line"><span class="comment">#       listen     localhost:110;</span></span><br><span class="line"><span class="comment">#       protocol   pop3;</span></span><br><span class="line"><span class="comment">#       proxy      on;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   server &#123;</span></span><br><span class="line"><span class="comment">#       listen     localhost:143;</span></span><br><span class="line"><span class="comment">#       protocol   imap;</span></span><br><span class="line"><span class="comment">#       proxy      on;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><ul><li><code>sites-available/default</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># You should look at the following URL&#x27;s in order to grasp a solid understanding</span></span><br><span class="line"><span class="comment"># of Nginx configuration files in order to fully unleash the power of Nginx.</span></span><br><span class="line"><span class="comment"># https://www.nginx.com/resources/wiki/start/</span></span><br><span class="line"><span class="comment"># https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/</span></span><br><span class="line"><span class="comment"># https://wiki.debian.org/Nginx/DirectoryStructure</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In most cases, administrators will remove this file from sites-enabled/ and</span></span><br><span class="line"><span class="comment"># leave it as reference inside of sites-available where it will continue to be</span></span><br><span class="line"><span class="comment"># updated by the nginx packaging team.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file will automatically load configuration files provided by other</span></span><br><span class="line"><span class="comment"># applications, such as Drupal or Wordpress. These applications will be made</span></span><br><span class="line"><span class="comment"># available underneath a path with that package name, such as /drupal8.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default server configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSL configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">    <span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">    <span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">    <span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">    <span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">        <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass PHP scripts to FastCGI server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#   include snippets/fastcgi-php.conf;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#   # With php-fpm (or other unix sockets):</span></span><br><span class="line">    <span class="comment">#   fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;</span></span><br><span class="line">    <span class="comment">#   # With php-cgi (or other tcp sockets):</span></span><br><span class="line">    <span class="comment">#   fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#   deny all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Virtual Host configuration for example.com</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can move that to a different file under sites-available/ and symlink that</span></span><br><span class="line"><span class="comment"># to sites-enabled/ to enable it.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#   listen 80;</span></span><br><span class="line"><span class="comment">#   listen [::]:80;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   server_name example.com;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   root /var/www/example.com;</span></span><br><span class="line"><span class="comment">#   index index.html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   location / &#123;</span></span><br><span class="line"><span class="comment">#       try_files $uri $uri/ =404;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><h2 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h2><p><img src="/tools/The-trick-of-nginx/image-20230410220106907.png" alt="image-20230410220106907"></p><h1 id="本地测试环境与backup"><a href="#本地测试环境与backup" class="headerlink" title="本地测试环境与backup"></a>本地测试环境与backup</h1><ul><li><p>使用<code>podman</code>搭建本地 Nginx 测试环境，<code>docker</code>同理，镜像可见<a href="https://hub.docker.com/_/nginx">docker:nginx</a></p><ul><li><p><code>podman</code>启动报错及解决: <a href="https://stackoverflow.com/questions/71977532/podman-mount-host-volume-return-error-statfs-no-such-file-or-directory-in-ma">Podman mount host volume return ‘Error: statfs: no such file or directory’ in Mac OS</a></p></li><li><p>Nginx版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@xxx:/# nginx -v</span><br><span class="line">nginx version: nginx/1.25.3</span><br></pre></td></tr></table></figure></li><li><p>Nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 并指定自定义 nginx.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">:ro 表示 <span class="built_in">read</span> only</span></span><br><span class="line">podman run --name nginx-test -v ./nginx.conf:/etc/nginx/nginx.conf:ro -p 7890:80 nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于测试 backup 调度策略</span></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server x.x.x.x:1234;</span><br><span class="line"></span><br><span class="line">        server x.x.x.x:1235 backup;</span><br><span class="line">        server x.x.x.x:1236 backup;</span><br><span class="line">        server x.x.x.x:1237 backup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 <code>Python</code> 搭建本机简易 webserver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Hello, World! Running on port <span class="subst">&#123;app.config[<span class="string">&quot;PORT&quot;</span>]&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;A simple Flask application.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;The port number to listen on.&quot;</span>, default=<span class="number">1234</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    app.config[<span class="string">&quot;PORT&quot;</span>] = args.port</span><br><span class="line">  <span class="comment"># 如果不指定 host=&#x27;0.0.0.0&#x27;，那么只能通过 127.0.0.1:port 才能访问</span></span><br><span class="line">    <span class="comment"># 使用 ifconfig 查到的 ip:port 方式无法访问</span></span><br><span class="line">    <span class="comment"># 报错: curl: (7) Failed to connect to ip port xxx after 7 ms: Couldn&#x27;t connect to server</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=args.port)</span><br></pre></td></tr></table></figure><ul><li><p>关于 <code>host</code> 配置，flask 源码介绍如下</p><blockquote><p>:param host: the hostname to listen on. Set this to <code>&#39;0.0.0.0&#39;</code> to</p><p> have the server available externally as well. Defaults to</p><p> <code>&#39;127.0.0.1&#39;</code> or the host in the <code>SERVER_NAME</code> config variable</p><p> if present.</p></blockquote></li></ul></li><li><p>Nginx backup，可通过<code>curl http://localhost:7890</code>进行测试，7890即启动容器时映射的端口，首先都会尝试访问主</p><ul><li><p>主可用时，不会访问 backup</p></li><li><p>主不可用时，轮询访问 backup，每次一个，如果上一个 backup 不可用，才会到下一个 backup，<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html">官方介绍</a></p><blockquote><p>By default, requests are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 requests will be distributed as follows: 5 requests go to <code>backend1.example.com</code> and one request to each of the second and third servers. If an error occurs during communication with a server, the request will be passed to the next server, and so on until all of the functioning servers will be tried. If a successful response could not be obtained from any of the servers, the client will receive the result of the communication with the last server.</p></blockquote></li><li><p>假设一主三备</p><ol><li>前五次访问，主可用，一直访问主</li><li>第六次访问时，主不可用，访问备 A</li><li>第七次访问时，主可用，访问备 B</li><li>第八次访问时，主可用，访问主</li><li>第九次访问时，主不可用，访问备 C，如果备 C 不可用，则会依次轮训备 A 和备 B</li></ol></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.youtube.com/watch?v=fogbQqsNK7w">亲自动手搭建一个Nginx反向代理服务器</a></li><li><a href="https://nginx.org/en/">Nginx官网</a></li><li>nginx一小时入门教程，<a href="https://www.bilibili.com/video/BV1rG4y1e7BQ">视频</a>，<a href="https://www.yuque.com/wukong-zorrm/cql6cz">笔记</a></li><li><a href="https://help.superhosting.bg/en/cgi-common-gateway-interface-fastcgi.html">What is CGI, FastCGI?</a></li><li><a href="https://blog.csdn.net/qq_42303254/article/details/89503656">Linux下nginx.conf中 fastcgi_params和fastcgi.conf的区别</a></li><li><a href="https://www.jianshu.com/p/f12c288b17ed">nginx 配置文件的介绍</a></li><li><a href="https://blog.csdn.net/weixin_44750617/article/details/120738744">Nginx安装配置和常用使用（反向代理与负载均衡）</a></li><li><a href="https://www.plesk.com/blog/various/nginx-configuration-guide/">NGINX Configuration Guide</a></li><li><a href="https://www.linode.com/docs/guides/how-to-configure-nginx/">How to Configure NGINX</a></li><li><a href="https://mp.weixin.qq.com/s/zFtNE94zZXhmAKEDDR1QIA">Nginx常用配置及和基本功能讲解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】内网与公网如何相互访问</title>
      <link href="/network/network-address-translation/"/>
      <url>/network/network-address-translation/</url>
      
        <content type="html"><![CDATA[<center><font color="red">以下内容转载自<a href="https://mp.weixin.qq.com/s/TEWUmAoW50Mut3ImFThd5A">为什么我在公司里访问不了家里的电脑？</a>，整理部分格式</font></center><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><ul><li><p>需要解决的问题：<strong>内网如何访问外网</strong>和<strong>外网如何访问内网</strong></p><p><img src="/network/network-address-translation/pri_pub_trans.png"></p></li><li><p>方案：<code>NAT (Network Address Translation)</code>和<code>内网穿透</code></p></li></ul><h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>类型，<font color="red">简单介绍，以后用到其他了再研究</font><img src="/network/network-address-translation/NAT.png"></p></li><li><p>假设，家里分配的公网<code>IP</code>为<code>20.20.20.20</code>，家里电脑分配的内网<code>IP</code>为<code>192.168.30.5</code>，将要访问的公网<code>IP</code>为<code>30.30.30.30</code>，如下图</p><p><img src="/network/network-address-translation/2023-04-03-01.png"></p></li><li><p>分为<code>私有IP发送数据</code>和<code>私有IP接受数据</code>两个部分，分别使用<code>SNAT</code>和<code>DNAT</code></p></li></ul><h2 id="SNAT-发送"><a href="#SNAT-发送" class="headerlink" title="SNAT-发送"></a>SNAT-发送</h2><p><img src="/network/network-address-translation/SNAT.png"></p><ul><li><p>准备发送数据包的时候，<strong>电脑内核协议栈</strong>就会构造一个<code>IP</code>数据包</p></li><li><p><code>IP</code>数据包报头里的<strong>发送端</strong><code>IP</code>地址填的就是<code>192.168.30.5</code>，<strong>接收端</strong><code>IP</code>地址就是<code>30.30.30.30</code>。将数据包发到NAT路由器中</p></li><li><p>此时NAT路由器会将<code>IP</code>数据包里的源<code>IP</code>地址修改一下，私有<code>IP</code>地址<code>192.168.30.5</code>改写为公网<code>IP</code>地址<code>20.20.20.20</code>，即<code>SNAT</code> (<strong>S</strong>ource <strong>N</strong>etwork <strong>A</strong>ddress <strong>T</strong>ranslation)，源地址转换</p></li><li><p>并且还会在NAT路由器内部留下一条 <code>192.168.30.5 -&gt; 20.20.20.20</code>的映射记录，这个信息会在后面用到</p></li><li><p>之后<code>IP</code>数据包经过公网里各个路由器的转发，发到了接收端<code>30.30.30.30</code>，到这里<strong>发送流程</strong>结束</p></li></ul><h2 id="DNAT-接收"><a href="#DNAT-接收" class="headerlink" title="DNAT-接收"></a>DNAT-接收</h2><p><img src="/network/network-address-translation/DNAT.png"></p><ul><li>如果接收端处理完数据了，需要发一个响应给你的电脑，那就需要将<strong>发送端</strong><code>IP</code>地址填上自己的<code>30.30.30.30</code>，将<strong>接收端</strong>地址填为你的公网<code>IP</code>地址<code>20.20.20.20</code>，发往NAT路由器</li><li>NAT路由器收到公网来的消息之后，会检查下自己之前留下的映射信息，发现之前留下了这么一条 <code>192.168.30.5 -&gt; 20.20.20.20</code>记录，就会将这个数据包的<strong>目的<code>IP</code>地址</strong>修改一下，变成内网<code>IP</code>地址<code>192.168.30.5</code>, 这也叫<code>DNAT</code>（<strong>D</strong>estination <strong>N</strong>etwork <strong>A</strong>ddress <strong>T</strong>ranslation，目的地址转换）</li><li>之后将其转发给你的电脑上</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>通过<code>SNAT</code>和<code>DNAT</code>可以实现内网访问外网资源</li><li><font color="red">疑问</font><ul><li>如果有多台设备，NAT路由器改如何填表？&#x3D;&gt;<code>NAPT</code></li><li>外网如何访问内网？&#x3D;&gt;<code>内网穿透</code></li></ul></li></ul><h1 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul><li><code>NAPT</code>：Network Address Port Transfer , 即<strong>网络地址端口转换</strong> </li><li>有传输层<code>TCP/UDP</code>时：采用<code>IP + 端口</code>形式</li><li>无传输层<code>TCP/UDP</code>时，如<code>ping</code>使用<code>ICMP</code>：采用<code>IP + 标识符</code>形式<ul><li>ping报文头里有个<code>Identifier</code>的信息，它其实指的是放出ping命令的<strong>进程id</strong></li></ul></li><li>假设，<strong>发送端</strong><code>IP</code>地址填的就是<code>192.168.30.5</code>，发送端口是<code>5000</code>，<strong>接收端</strong><code>IP</code>地址就是<code>30.30.30.30</code>，接收端口是<code>3000</code></li></ul><h2 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h2><ul><li>NAT路由器会将<code>IP</code>数据包里的<strong>源<code>IP</code>地址和端口号</strong>修改一下，从<code>192.168.30.5:5000</code>改写成<code>20.20.20.20:6000</code>，<font color="red">端口号的映射是随机的</font></li><li>并且还会在NAT路由器内部留下一条 <code>192.168.30.5:5000 -&gt; 20.20.20.20:6000</code>的映射记录</li><li>之后数据包经过公网里各个路由器的转发，发到了接收端<code>30.30.30.30:3000</code>，到这里<strong>发送流程</strong>结束</li></ul><p><img src="/network/network-address-translation/NAPT_send.png"></p><h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><ul><li>接收端响应时，就会在数据包里填入<strong>发送端</strong>地址是<code>30.30.30.30:3000</code>，将<strong>接收端</strong>是<code>20.20.20.20:6000</code>，发往NAT路由器</li><li>NAT路由器发现下自己之前留下过这么一条 <code>192.168.30.5:5000 -&gt; 20.20.20.20:6000</code>的记录，就会将这个数据包的<strong>目的<code>IP</code>地址和端口</strong>修改一下，变回原来的<code>192.168.30.5:5000</code></li><li>之后将其转发给你的电脑上</li></ul><p><img src="/network/network-address-translation/NAPT_recv.png"></p><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><ul><li><p>使用了NAT上网的话，前提得<strong>内网机器主动请求公网<code>IP</code><strong>，这样NAT才能将内网的</strong><code>IP</code>端口</strong>转成外网**<code>IP</code>端口**</p></li><li><p>反过来公网的机器想主动请求内网机器，就会被拦在NAT路由器上，此时由于NAT路由器并没有任何相关的<code>IP</code>端口的<strong>映射记录</strong>，因此也就不会转发数据给内网里的任何一台机器</p></li><li><p>解决：<strong>通过再加一层实现</strong>，即在<strong>公网上</strong>加一台服务器x，并暴露一个访问域名，再让内网的服务<strong>主动</strong>连接服务器x，这样NAT路由器上就有对应的<strong>映射关系</strong>。接着，所有人都去访问服务器x，服务器x将数据转发给内网机器，再原路返回响应，这样数据就都通了。这就是所谓的<strong>内网穿透</strong></p><p><img src="/network/network-address-translation/NAT_traverse.png"></p></li><li><p>内网穿透步骤，可查看<a href="/tutorial/NAT-traverse/" title="内网穿透">内网穿透</a></p></li></ul><h1 id="不同内网通讯"><a href="#不同内网通讯" class="headerlink" title="不同内网通讯"></a>不同内网通讯</h1><h2 id="通过服务器建立连接"><a href="#通过服务器建立连接" class="headerlink" title="通过服务器建立连接"></a>通过服务器建立连接</h2><ul><li>两个内网的<code>QQ</code>是如何通讯的？</li><li>两个在内网的客户端登录<code>QQ</code>时都会<strong>主动</strong>向公网的聊天服务器建立连接，这时两方的NAT路由器中都会记录有相应的映射关系</li><li>当在其中一个<code>QQ</code>上发送消息时，数据会先到服务器，再通过服务器转发到另外一个客户端上。反过来也一样，通过这个方式让两台内网的机子进行数据传输</li></ul><p><img src="/network/network-address-translation/qq_server.png"></p><h2 id="直连-P2P"><a href="#直连-P2P" class="headerlink" title="直连 (P2P)"></a>直连 (P2P)</h2><ul><li><p>假设A和B两个<strong>局域网内</strong>的机子，A内网对应的NAT设备叫<code>NAT_A</code>，B内网里的NAT设备叫<code>NAT_B</code>，和一个第三方服务器<code>server</code></p></li><li><p>流程</p><ul><li><p><strong>step1和2</strong>: A主动去连server，此时A对应的<code>NAT_A</code>就会留下A的内网地址和外网地址的<strong>映射关系</strong>，server也拿到了A对应的外网<code>IP</code>地址和端口</p></li><li><p><strong>step3和4</strong>: B的操作和A一样，主动连第三方server，<code>NAT_B</code>内留下B的内网地址和外网地址的<strong>映射关系</strong>，然后server也拿到了B对应的外网IP地址和端口</p></li><li><p><strong>step5和step6以及step7</strong>: 此时server发消息给A，让A主动发<code>UDP</code>消息到B的外网<code>IP</code>地址和端口。此时NAT_B收到这个A的<code>UDP</code>数据包时，这时候<strong>根据NAT_B的设置不同</strong>，导致这时候<strong>有可能</strong>NAT_B能直接转发数据到B，那此时A和B就通了。但也<strong>有可能不通</strong>，直接丢包，不过丢包没关系，这个操作的<strong>目的是</strong>给NAT_A上留下<strong>有关B的映射关系</strong></p></li><li><p><strong>step8和step9以及step10</strong>: 跟step5一样熟悉的配方，此时server再发消息给B，让B主动发<code>UDP</code>消息到A的外网<code>IP</code>地址和端口。NAT_B上也留下了关于A到映射关系，这时候由于之前NAT_A上有过关于B的映射关系，此时NAT_A就能正常接受B的数据包，并将其转发给A。到这里A和B就能正常进行数据通信了。这就是所谓的<strong>NAT打洞</strong></p></li><li><p><strong>step11</strong>: 注意，之前我们都是用的<strong>UDP数据包</strong>，目的只是为了在两个局域网的NAT上<strong>打个洞</strong>出来，实际上大部分应用用的都是TCP连接，所以，这时候我们还需要在A主动向B发起TCP连接。到此，我们就完成了两端之间的通信</p></li></ul></li></ul><p><img src="/network/network-address-translation/p2p.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> NAT </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络抓包分析</title>
      <link href="/tutorial/network-protocol-analyzer/"/>
      <url>/tutorial/network-protocol-analyzer/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c683749f92b51b3826624bd00c7cf6bdea361d3c14489cf0dfeb8540afe307e2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcpdump </tag>
            
            <tag> Wireshark </tag>
            
            <tag> Fiddler </tag>
            
            <tag> 网络 </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】zsh安装</title>
      <link href="/tutorial/Linux-install-zsh/"/>
      <url>/tutorial/Linux-install-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>以<code>WSL/Ubuntu</code>安装为例</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>安装<code>zsh</code>：<code>sudo apt-get install zsh</code></p><p><img src="/tutorial/Linux-install-zsh/image-20220606102038059.png" alt="image-20220606102038059"></p></li><li><p>查看版本：<code>zsh --version</code></p><p><img src="/tutorial/Linux-install-zsh/image-20220606094148908.png" alt="image-20220606094148908"></p></li><li><p>查看已有的shell：<code>cat /etc/shells</code></p><p><img src="/tutorial/Linux-install-zsh/image-20220606094226094.png" alt="image-20220606094226094"></p></li><li><p>查看当前用户的默认shell：<code>grep $USER /etc/passwd</code>，默认设置为<code>bash</code></p></li><li><p>设定默认选项：<code>chsh</code></p><p><img src="/tutorial/Linux-install-zsh/image-20220606101952606.png" alt="image-20220606101952606"></p></li><li><p>再次查看默认shell，发现已经变成<code>zsh</code></p></li><li><p>这一步安装<code>oh my zsh</code>主题，分为网好和网不好两种方式</p><ul><li><p>网好</p><ul><li><p>使用<code>wget</code>下载并执行安装<code>oh my zsh</code>脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>网不好</p><ol><li><p>下载整个仓库：<code>git clone git@github.com:ohmyzsh/ohmyzsh.git</code></p></li><li><p>进入oh-my-zsh下tools</p><p><img src="/tutorial/Linux-install-zsh/image-20220606095248136.png" alt="image-20220606095248136"></p></li><li><p>执行<code>sh install.sh</code>，直接执行不好使时，先按照4修改，然后执行3，发现正常安装</p><p><img src="/tutorial/Linux-install-zsh/image-20220606101221757.png" alt="image-20220606101221757"></p></li><li><p>修改<code>install.sh</code>，改为如下内容（即不使用默认HTTP下载，改为git下载）</p><p><img src="/tutorial/Linux-install-zsh/image-20220606101318108.png" alt="image-20220606101318108"></p></li></ol></li></ul></li></ol><h1 id="可能的Bug"><a href="#可能的Bug" class="headerlink" title="可能的Bug"></a>可能的Bug</h1><ul><li><p><code>Debian10</code>下，<code>tab</code>补全会多出两个字符</p><ul><li><p><font color="red">目前按照以下尝试无果</font>，其他系统可能行</p><ul><li><a href="https://blog.csdn.net/AI_Fanatic/article/details/109410715">oh-my-zsh按TAB补全时出现字符重复</a></li><li><a href="https://blog.csdn.net/LittleSeedling/article/details/125193572">【linux】oh my zsh自动补全bug，tab时多两个字符</a></li></ul></li><li><p>已解决：修改主题文件</p><ol><li><p>进入主题文件夹：<code>cd ~/.oh-my-zsh/themes/</code></p></li><li><p>找到在<code>~/.zshrc</code>中使用的主题，默认<code>ZSH_THEME=&quot;robbyrussell&quot;</code></p></li><li><p>修改文件：<code>vim robbyrussell.zsh-theme</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只修改了下面两个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改前</span></span><br><span class="line">PROMPT=&quot;%(?:%&#123;$fg_bold[green]%&#125;➜ :%&#123;$fg_bold[red]%&#125;➜ )&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%&#123;$fg[blue]%&#125;) %&#123;$fg[yellow]%&#125;✗&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改后</span></span><br><span class="line">PROMPT=&quot;%(?:%&#123;$fg_bold[green]%&#125;%&#123;%G➜%&#125; :%&#123;$fg_bold[red]%&#125;%&#123;%G➜%&#125; )&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%&#123;$fg[blue]%&#125;) %&#123;$fg[yellow]%&#125;%&#123;%G✗%&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>重启配置：<code>source ~/.zshrc</code>，成功</p></li></ol></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/a_rain2333/article/details/119567362">Linux: Wsl ubuntu下安装OhMyZsh</a></li><li><a href="https://stackoverflow.com/questions/11916064/zsh-tab-completion-duplicating-command-name">Zsh tab completion duplicating command name</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/tutorial/NAT-traverse/"/>
      <url>/tutorial/NAT-traverse/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="392a76620ae13c55b1f5a08404d803a22bcbdbff69a58565b75864daea2f2c62"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAT </tag>
            
            <tag> 内网穿透 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS</title>
      <link href="/tutorial/Linux-build-my-vps/"/>
      <url>/tutorial/Linux-build-my-vps/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="27a41943bea452d187bf0d384ee04d0aa5e7f1a9087d79dd8ee37994adc7bf10"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker使用说明</title>
      <link href="/tools/The-trick-of-docker/"/>
      <url>/tools/The-trick-of-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>未安装<code>docker</code>，可参考<a href="/tutorial/Linux-install-docker-in-Linux/" title="【Linux】docker安装">【Linux】docker安装</a></p></li><li><p><code>docker</code>原理介绍，可查看<del>待完成</del></p></li><li><p>待实践</p><ul><li><code>docker</code>操作都需要<code>sudo</code>权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入 Docker 用户组（<a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user">官方文档</a>）</li></ul></li><li><p>视频学习</p><ul><li><a href="https://www.youtube.com/watch?v=RqTEHSBrYFw">Complete Docker Course - From BEGINNER to PRO! (Learn Containers)</a>：不到五小时的视频，主要是操作性介绍，能对<code>docker</code>使用有着简单的了解，<font color="red">不包含底层原理</font>，<a href="https://github.com/cv-programmer/devops-directive-docker-course">笔记仓库</a>，后面的<a href="https://shipyard.build/">Shipyard</a>和<a href="https://www.civo.com/">civo</a>，都是远程托管平台，前者免费30天，后者绑信用卡送<code>$250</code>，最便宜的<code>$5/月</code>（有公网IP）</li></ul></li></ul><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><ul><li>查看<code>docker 镜像</code>：<code>sudo docker images</code></li><li>查看<code>docker 容器</code>：<code>sudo docker ps</code></li><li>查看某一容器详细信息：<code>sudo docker inspect 容器id/容器名称</code></li></ul><h2 id="将镜像变为容器"><a href="#将镜像变为容器" class="headerlink" title="将镜像变为容器"></a>将镜像变为容器</h2><ul><li>创建并运行容器：<code>docker run --name containerName -p 80:80 -d imageName</code><ul><li><code>docker run</code>：创建并运行一个容器</li><li><code>--name</code>：给容器起一个名字，比如叫做<code>containerName </code></li><li><code>-p</code>：将宿主机端口与容器<strong>端口映射</strong>，冒号左侧是宿主机端口，右侧是容器端口</li><li><code>-d</code>：后台运行容器</li><li><code>imageName</code>：镜像名称，通过<code>sudo docker images</code>查询到的<code>REPOSITORY</code>，如<code>Nginx</code></li></ul></li><li>运行<code>ubuntu</code>，<code>centos</code>等系统容器时，需要指定<code>-t</code>参数，否则容器启动后，就会变成<code>Exited</code>状态<ul><li>例如：<code>sudo docker run -t --name mycentos -d centos:latest</code></li><li><code>-t</code>：启动一个伪终端</li></ul></li></ul><h2 id="将容器变为镜像"><a href="#将容器变为镜像" class="headerlink" title="将容器变为镜像"></a>将容器变为镜像</h2><ul><li><code>sudo docker commit &lt;CONTAINER ID&gt; &lt;REPOSITORY:TAG&gt;</code><ul><li>例如：<code>sudo docker commit 94b09ba29874 123456.bak:latest</code></li></ul></li></ul><h2 id="将镜像打包"><a href="#将镜像打包" class="headerlink" title="将镜像打包"></a>将镜像打包</h2><ul><li><p>即<strong>将指定镜像保存成 tar 归档文件</strong></p></li><li><p><code>sudo docker save -o &lt;归档文件名称&gt; &lt;IMAGE ID&gt;</code></p><ul><li>例如：<code>sudo docker save -o 123456.tar.gz 6810c1248c62</code></li></ul></li></ul><h2 id="导入docker镜像"><a href="#导入docker镜像" class="headerlink" title="导入docker镜像"></a>导入docker镜像</h2><ul><li><p>即<strong>导入<code>docker save</code> 保存的归档文件</strong></p></li><li><p><code>sudo docker load &lt; &lt;归档文件名称&gt;</code></p><ul><li>例如：<code>sudo docker load &lt; 123456.tar.gz</code></li></ul></li></ul><h2 id="删除-docker-镜像"><a href="#删除-docker-镜像" class="headerlink" title="删除 docker 镜像"></a>删除 docker 镜像</h2><ul><li><code>sudo docker rmi &lt;REPOSITORY:TAG&gt;</code><ul><li>例如：<code>sudo docker rmi 123456.bak:latest</code></li></ul></li></ul><h2 id="从容器中拷贝文件至本地"><a href="#从容器中拷贝文件至本地" class="headerlink" title="从容器中拷贝文件至本地"></a>从容器中拷贝文件至本地</h2><ul><li><code>sudo docker cp &lt;容器名称或ID&gt;:&lt;容器内文件路径&gt; &lt;本地主机目标路径&gt;</code><ul><li>例如：<code>sudo docker cp my-container:/app/data.txt /tmp</code></li></ul></li></ul><h2 id="从本地拷贝文件至容器"><a href="#从本地拷贝文件至容器" class="headerlink" title="从本地拷贝文件至容器"></a>从本地拷贝文件至容器</h2><ul><li><code>sudo docker cp &lt;本地文件路径&gt; &lt;容器名称或ID&gt;:&lt;容器内目标路径&gt;</code><ul><li>例如：<code>docker cp /tmp/data.txt my-container:/app</code></li></ul></li></ul><h1 id="使用bash进入容器操作"><a href="#使用bash进入容器操作" class="headerlink" title="使用bash进入容器操作"></a>使用bash进入容器操作</h1><ul><li>创建容器并进入<code>sudo docker run -it --name containeName imageName bash</code><ul><li>例如：<code>sudo docker run -it --name mycentos centos bash</code></li></ul></li><li>进入已经运行的容器<code>sudo docker exec -it [容器名称] bash</code><ul><li>例如：<code>sudo docker exec -it mycentos bash</code></li></ul></li></ul><h1 id="实际问题与解决"><a href="#实际问题与解决" class="headerlink" title="实际问题与解决"></a>实际问题与解决</h1><h2 id="是否可以修改镜像内容？"><a href="#是否可以修改镜像内容？" class="headerlink" title="是否可以修改镜像内容？"></a>是否可以修改镜像内容？</h2><ul><li><p>不能修改<code>原镜像</code>，只能通过将<code>原镜像</code>变成容器，对容器修改后，保存为<code>新镜像</code></p></li><li><p><font color="red">用到了再写</font>，<del>具体操作如下</del></p></li></ul><h2 id="docker容器中是否可以再次安装docker？"><a href="#docker容器中是否可以再次安装docker？" class="headerlink" title="docker容器中是否可以再次安装docker？"></a>docker容器中是否可以再次安装docker？</h2><ul><li><font color=" red">可以，但没尝试</font></li></ul><h2 id="如何修改docker容器的启动-运行参数（ENV）"><a href="#如何修改docker容器的启动-运行参数（ENV）" class="headerlink" title="如何修改docker容器的启动&#x2F;运行参数（ENV）"></a>如何修改docker容器的启动&#x2F;运行参数（ENV）</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>背景：实验室机器断电下线后，重启后，GPU有块掉线</li><li>使用<code>sudo docker ps</code>未查看到运行中的容器，用<code>sudo docker ps -a</code>发现所有容器状态均为<code>Exited</code></li><li>使用<code>sudo journalctl -xe</code>或<code>sudo systemctl status docker</code>查看状态，察觉到报错与找不到<code>显卡device</code>有关</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>随便找一个容器进行尝试，通过<code>sudo docker ps -a</code>，记下<code>容器id</code></li><li>关闭<code>docker</code>：<code>sudo systemctl stop docker</code></li><li>修改<code>config.v2.json</code>，位置在<code>/容器安装位置/containers/容器id</code>中，如<code>/home/docker/容器id/config.v2.json</code>，修改对应<code>DEVICE</code>参数</li><li>重启<code>docker</code>：<code>sudo systemctl start docker</code></li><li>发现容器可正常进入使用</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://www.bbsmax.com/A/QV5Zn7Rw5y/">docker 修改容器env配置</a></li></ol><h1 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">阮一峰：Docker 入门教程</a></li><li><a href="https://blog.csdn.net/WuLex/article/details/120326947">docker查看运行容器详细信息</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】docker安装</title>
      <link href="/tutorial/Linux-install-docker-in-Linux/"/>
      <url>/tutorial/Linux-install-docker-in-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-engine"><a href="#docker-engine" class="headerlink" title="docker engine"></a>docker engine</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>环境：<code>Ubuntu 20.04</code>，</p><ul><li><code>uname -a</code></li><li><code>lsb_release -a</code></li></ul><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317194857620.png" alt="image-20230317194857620"></p></li><li><p>目前官方支持的<code>Ubuntu</code>版本如下</p><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230322165714710.png" alt="image-20230322165714710"></p></li><li><p>版本不一时，优先参考官网，官方安装介绍：<a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu</a></p></li><li><p>现有<code>sources.list</code>，如果速度过慢，可优先更换镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><br><span class="line"># newer versions of the distribution.</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal main restricted</span><br><span class="line"></span><br><span class="line">## Major bug fix updates produced after the final release of the</span><br><span class="line">## distribution.</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-updates main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-updates main restricted</span><br><span class="line"></span><br><span class="line">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class="line">## team. Also, please note that software in universe WILL NOT receive any</span><br><span class="line">## review or updates from the Ubuntu security team.</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal universe</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-updates universe</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-updates universe</span><br><span class="line"></span><br><span class="line">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class="line">## team, and may not be under a free licence. Please satisfy yourself as to</span><br><span class="line">## your rights to use the software. Also, please note that software in</span><br><span class="line">## multiverse WILL NOT receive any review or updates from the Ubuntu</span><br><span class="line">## security team.</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal multiverse</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-updates multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-updates multiverse</span><br><span class="line"></span><br><span class="line">## N.B. software from this repository may not have been tested as</span><br><span class="line">## extensively as that contained in the main release, although it includes</span><br><span class="line">## newer versions of some applications which may provide useful features.</span><br><span class="line">## Also, please note that software in backports WILL NOT receive any review</span><br><span class="line">## or updates from the Ubuntu security team.</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">## Uncomment the following two lines to add software from Canonical&#x27;s</span><br><span class="line">## &#x27;partner&#x27; repository.</span><br><span class="line">## This software is not part of Ubuntu, but is offered by Canonical and the</span><br><span class="line">## respective vendors as a service to Ubuntu users.</span><br><span class="line"># deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line"># deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line"></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-security main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-security main restricted</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-security universe</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-security universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu focal-security multiverse</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu focal-security multiverse</span><br></pre></td></tr></table></figure></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a><del>卸载旧版本</del></h3><ul><li>由于是新系统，没安装过，留空</li></ul><h3 id="设置docker官方仓库"><a href="#设置docker官方仓库" class="headerlink" title="设置docker官方仓库"></a>设置docker官方仓库</h3><ol><li><p>更新<code>apt</code>包索引及允许使用<code>HTTPS</code>使用存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg lsb-release</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截图展示了已经安装好的情形</span></span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317195328466.png" alt="image-20230317195328466"></p></li><li><p>添加<code>docker</code>官方秘钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -m 0755 -p /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317195533376.png" alt="image-20230317195533376"></p></li><li><p>设置官方存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">(lsb_release -cs) stable<span class="string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317195710930.png" alt="image-20230317195710930"></p></li></ol><h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><ol><li><p>再次更新<code>apt</code>包索引：<code>sudo apt-get update</code></p><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317200313202.png" alt="image-20230317200313202"></p></li><li><p>安装<code>Docker Engine</code>, <code>containerd</code>和<code>Docker Compose</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最新版本命令，如安装指定版本，查看官网</span></span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317200709475.png" alt="image-20230317200709475"></p></li><li><p>验证是否成功，使用官方<code>hello-world</code>镜像验证，如果成功，输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317200812562.png" alt="image-20230317200812562"></p></li><li><p>查看现有镜像<code>sudo docker images</code>和查看现有容器<code>sudo docker ps</code></p><p><img src="/tutorial/Linux-install-docker-in-Linux/image-20230317200913842.png" alt="image-20230317200913842"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://docs.docker.com/engine/">Docker Engine官方文档</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTY1MjY0MQ==&mid=2650860524&idx=3&sn=02dfc31d637f70b066a6ef9842beeac5&chksm=bd017ea28a76f7b466773e68f7dab26e65ffae2918c28aa1d87c84acfc54460a7b82aa57279f&scene=27">centos安装docker engine</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>supervisor使用说明</title>
      <link href="/tools/The-trick-of-supervisor/"/>
      <url>/tools/The-trick-of-supervisor/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>演示环境：<code>uname - a</code>和<code>lsb_release -a</code></p><p><img src="/tools/The-trick-of-supervisor/image-20230328092321566.png" alt="image-20230328092321566"></p></li><li><p>以<code>apt</code>安装为例，更多说明查看<a href="http://supervisord.org/installing.html#">官网</a></p></li><li><p><code>pip</code>安装配置比较麻烦，建议用系统级安装方式</p></li><li><p>安装路径：<code>/etc/supervisor</code></p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>安装<code>supervisor</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装完成，输入<code>echo_supervisord_conf</code>，有如下输入即说明安装成功</p><p><img src="/tools/The-trick-of-supervisor/image-20230327181942590.png" alt="image-20230327181942590"></p></li><li><p>配置，生成默认配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建配置文件夹，默认连/etc/supervisor都没有（这个可以先查一下，直接用pip安装没有）</span></span><br><span class="line">sudo mkdir -p /etc/supervisor/conf.d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建配置文件，官方做法 echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf 不推荐，太多不需要的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动创建以下文件或路径，否则将会报错，无法正常使用</span></span><br><span class="line">sudo mkdir /var/log/supervisor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件</span></span><br><span class="line">sudo vim /etc/supervisor/supervisord.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入一下内容后保存退出</span></span><br><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/log/supervisor            ; (&#x27;AUTO&#x27; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure></li><li><p>执行配置文件：<code>sudo supervisord -c supervisord.conf</code>，如果启动报错<code>Error: Another program is already listening on a port that one of our HTTP servers is configured to use</code>，使用如下方法解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">现在supervisord进程</span></span><br><span class="line">ps -ef | grep supervisord</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死进程</span></span><br><span class="line">kill -s SIGTERM [进程号]</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-supervisor/image-20230328093716573.png" alt="image-20230328093716573"></p></li><li><p>创建子进程配置文件，示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:Hello]</span><br><span class="line">command=/usr/bin/python3 /opt/hello_test.py</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">stopasgroup=true</span><br></pre></td></tr></table></figure></li><li><p>启动管控：<code>sudo supervisorctl update</code>，完成</p></li></ol><h1 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h1><h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   #UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">chmod=0700                  #socket文件的mode，默认是0700</span><br><span class="line">chown=nobody:nogroup        #socket文件的owner，格式：uid:gid</span><br><span class="line"> </span><br><span class="line">[inet_http_server]         #HTTP服务器，提供web管理界面</span><br><span class="line">port=127.0.0.1:9001        #Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">username=user              #登录管理后台的用户名</span><br><span class="line">password=123               #登录管理后台的密码</span><br><span class="line"> </span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log #日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        #日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           #日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                #日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid #pid 文件</span><br><span class="line">nodaemon=false               #是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  #可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 #可以打开的进程数的最小值，默认 200</span><br><span class="line"> </span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock #通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">serverurl=http://127.0.0.1:9001       #通过HTTP的方式连接supervisord</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">包含其它配置文件</span></span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini      #可以指定一个或多个以.ini结束的配置文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以指定其他后缀，如</span></span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><h2 id="子进程配置文件"><a href="#子进程配置文件" class="headerlink" title="子进程配置文件"></a>子进程配置文件</h2><ul><li><p><code>/etc/supervisor/conf.d/</code>，子进程<code>test.py</code>为例，创建<code>/etc/supervisor/conf.d/blog.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">######################### 基本配置，配置后就可用 ##########################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目名</span></span><br><span class="line">[program:blog]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本目录（非必须）</span></span><br><span class="line">directory=/opt/bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本执行命令</span></span><br><span class="line">command=/usr/bin/python /opt/bin/test.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当程序<span class="built_in">exit</span>的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，<span class="literal">false</span>,unexpected和<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果为<span class="literal">false</span>的时候，无论什么情况下，都不会被重新启动，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line">autorestart=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本运行的用户身份</span> </span><br><span class="line">user=root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个东西主要用于，supervisord管理的子进程，这个子进程本身还有子进程。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程有可能会变</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">孤儿进程。所以咱们可以设置可个选项，把整个该子进程的整个进程组都干掉。设置为</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="literal">true</span>的话，一般killasgroup也会被设置为<span class="literal">true</span>。需要注意的是，该选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">送的是stop信号默认为<span class="literal">false</span>。非必须设置。</span></span><br><span class="line">stopasgroup=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">######################### 额外配置 ##########################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志输出</span> </span><br><span class="line">stderr_logfile=/tmp/blog_stderr.log </span><br><span class="line">stdout_logfile=/tmp/blog_stdout.log </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把stderr重定向到stdout，默认 <span class="literal">false</span></span></span><br><span class="line">redirect_stderr = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = 20MB</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = 20</span><br></pre></td></tr></table></figure></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="supervisor重启"><a href="#supervisor重启" class="headerlink" title="supervisor重启"></a>supervisor重启</h2><ul><li>验证<code>supervisor</code>是否挂掉：<code>sudo supervisorctl</code>，输入密码后发现执行失败，说明supervisor服务挂了</li></ul><ol><li>首先找到<code>supervisor</code>安装的目录：<code>whereis supervisor</code></li><li>找到对应的<code>supervisor</code>配置文件路径，如<code>/etc/supervisor/supervisord.conf</code></li><li>启动<code>supervisor</code>服务：<code>sudo supervisord -c /etc/supervisor/supervisord.conf</code></li><li>查看<code>supervisor</code>服务是否正常运行：<code>sudo supervisorctl</code></li></ol><h2 id="supervisor进程管理"><a href="#supervisor进程管理" class="headerlink" title="supervisor进程管理"></a>supervisor进程管理</h2><ul><li><p>权限不够加<code>sudo</code>，由配置文件中<code>user</code>身份决定</p></li><li><p>也可以直接输入<code>supervisorctl</code>进入<code>supervisorctl</code>的shell交互界面，此时上面的命令不带supervisorctl可直接使用</p><p><img src="/tools/The-trick-of-supervisor/image-20230226112126903.png" alt="image-20230226112126903"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有进程的状态</span></span><br><span class="line">supervisorctl status</span><br><span class="line"><span class="comment"># 启动进程</span></span><br><span class="line">supervisorctl start [进程名] </span><br><span class="line"><span class="comment"># 停止进程</span></span><br><span class="line">supervisorctl stop [进程名]</span><br><span class="line"><span class="comment"># 重启进程</span></span><br><span class="line">supervisorctl restart [进程名]</span><br><span class="line"><span class="comment"># 配置文件修改后使用该命令加载新的配置</span></span><br><span class="line">supervisorctl update</span><br><span class="line"><span class="comment"># 重新启动配置中的所有程序</span></span><br><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/cyt0906/article/details/107344361">Supervisor使用详解</a></li><li><a href="https://blog.csdn.net/chenyulancn/article/details/123965900">Supervisor 配置详解</a></li><li><a href="https://blog.csdn.net/qq_41221596/article/details/128290269">重启supervisor服务及 查看、启动、停止、重启supervisor进程</a></li><li><a href="https://blog.csdn.net/weixin_47872288/article/details/125078967">supervisorctl命令的使用讲解</a></li><li><a href="https://zhuanlan.zhihu.com/p/424346764">Supervisor的作用与配置</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> supervisor </tag>
            
            <tag> 进程管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用说明</title>
      <link href="/tools/The-trick-of-vim/"/>
      <url>/tools/The-trick-of-vim/</url>
      
        <content type="html"><![CDATA[<h1 id="Modal-editing"><a href="#Modal-editing" class="headerlink" title="Modal editing"></a>Modal editing</h1><ul><li><p><strong>Normal</strong>: for moving around a file and making edits</p><blockquote><p>打开文件默认模式，<code>&lt;ESC&gt;</code>回到<code>Normal</code></p></blockquote></li><li><p><strong>Insert</strong>: for inserting text</p><blockquote><p><code>Normal</code>模式，输入<code>i</code></p></blockquote></li><li><p><strong>Replace</strong>: for replacing text</p><blockquote><p><code>Normal</code>模式，输入<code>r</code></p></blockquote></li><li><p><strong>Visual</strong> (plain, line, or block): for selecting blocks of text</p><blockquote><ul><li><code>Normal</code>模式，输入<code>v</code>，<code>V</code>，<code>ctrl + v</code></li><li>多行操作模式</li></ul></blockquote></li><li><p><strong>Command-line</strong>: for running a command</p><blockquote><p>输入<code>:</code>后即进入命令行模式</p></blockquote></li></ul><h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><h2 id="Command-line"><a href="#Command-line" class="headerlink" title="Command-line"></a>Command-line</h2><ul><li><p><code>:q</code> quit (close window)</p></li><li><p><code>:w</code> save (“write”)</p></li><li><p><code>:wq</code> save and quit</p><blockquote><p>也可以使用<code>ZZ</code></p></blockquote></li><li><p><code>:e &#123;name of file&#125;</code> open file for editing</p></li><li><p><code>:ls</code> show open buffers</p></li><li><p><code>:help &#123;topic&#125;</code> open help</p><ul><li><code>:help :w</code> opens help for the <code>:w</code> command</li><li><code>:help w</code> opens help for the <code>w</code> movement</li></ul></li></ul><h2 id="Movement"><a href="#Movement" class="headerlink" title="Movement"></a>Movement</h2><ul><li><p>Basic movement: <code>hjkl</code> (left, down, up, right)</p></li><li><p>Words: <code>w</code> (next word), <code>b</code> (beginning of word), <code>e</code> (end of word)</p></li><li><p>Lines: <code>0</code> (beginning of line), <code>^</code> (first non-blank character), <code>$</code> (end of line)</p></li><li><p>Screen: <code>H</code> (top of screen), <code>M</code> (middle of screen), <code>L</code> (bottom of screen)</p></li><li><p>Scroll: <code>Ctrl-u</code> (up), <code>Ctrl-d</code> (down)</p></li><li><p>File: <code>gg</code> (beginning of file), <code>G</code> (end of file)</p></li><li><p>Line numbers: <code>:&#123;number&#125;&lt;CR&gt;</code> or <code>&#123;number&#125;G</code> (line {number})</p><blockquote><p>跳到指定行，<code>&lt;CR&gt;</code>表示回车</p></blockquote></li><li><p>Misc: <code>%</code> (corresponding item)</p><blockquote><p>跳到匹配的位置，如<code>[</code>和<code>]</code>，<code>(</code>和<code>)</code></p></blockquote></li><li><p>Find: <code>f&#123;character&#125;</code>, <code>t&#123;character&#125;</code>, <code>F&#123;character&#125;</code>, <code>T&#123;character&#125;</code></p><ul><li>find&#x2F;to forward&#x2F;backward {character} on the current line</li><li><code>,</code> &#x2F; <code>;</code> for navigating matches</li></ul></li><li><p>Search: <code>/&#123;regex&#125;</code>, <code>n</code> &#x2F; <code>N</code> for navigating matches</p></li></ul><h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><p>Visual modes:</p><ul><li><p>Visual: <code>v</code></p></li><li><p>Visual Line: <code>V</code></p></li><li><p>Visual Block: <code>Ctrl-v</code></p><blockquote><p>在WSL中是默认是粘贴，需要按照<a href="https://qa.1r1g.com/sf/ask/4327692421/">参考2</a>进行修改，即修改<code>paste</code>默认的<code>ctrl + v</code>修改成<code>ctrl + shift + v</code></p></blockquote><p><img src="/tools/The-trick-of-vim/image-20221224085121214.png" alt="image-20221224085121214"></p></li></ul><h2 id="Edits"><a href="#Edits" class="headerlink" title="Edits"></a>Edits</h2><ul><li><p><code>i</code> enter Insert mode</p><ul><li>but for manipulating&#x2F;deleting text, want to use something more than backspace</li></ul></li><li><p><code>o</code> &#x2F; <code>O</code> insert line below &#x2F; above</p></li><li><p><code>d&#123;motion&#125;</code> delete {motion}</p><ul><li>e.g. <code>dw</code> is delete word, <code>d$</code> is delete to end of line, <code>d0</code> is delete to beginning of line</li></ul></li><li><p><code>c&#123;motion&#125;</code> change {motion}</p><ul><li><p>e.g. <code>cw</code> is change word</p></li><li><p>like <code>d&#123;motion&#125;</code> followed by <code>i</code></p><blockquote><p>即<code>c&#123;motion&#125;</code>删除后，进入<code>insert</code>模式</p></blockquote></li></ul></li><li><p><code>x</code> delete character (equal do <code>dl</code>)</p></li><li><p><code>s</code> substitute character (equal to <code>cl</code>)</p></li><li><p>Visual mode + manipulation</p><ul><li>select text, <code>d</code> to delete it or <code>c</code> to change it</li></ul></li><li><p><code>u</code> to undo, <code>&lt;C-r&gt;</code> to redo</p></li><li><p><code>y</code> to copy &#x2F; “yank” (some other commands like <code>d</code> also copy)</p></li><li><p><code>. </code> to duplicate the previous operation</p></li><li><p><code>p</code> to paste</p></li><li><p>Lots more to learn: e.g. <code>~</code> flips the case of a character</p></li></ul><h2 id="Counts"><a href="#Counts" class="headerlink" title="Counts"></a>Counts</h2><ul><li><code>3w</code> move 3 words forward</li><li><code>5j</code> move 5 lines down</li><li><code>7dw</code> delete 7 words</li></ul><h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><ul><li><code>ci(</code> change the contents inside the current pair of parentheses</li><li><code>ci[</code> change the contents inside the current pair of square brackets</li><li><code>da&#39;</code> delete a single-quoted string, including the surrounding single quotes</li></ul><h1 id="Customizing-Vim"><a href="#Customizing-Vim" class="headerlink" title="Customizing Vim"></a>Customizing Vim</h1><ul><li><p>修改<code>~/.vimrc</code></p></li><li><p>课程提供<code>vimrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; Comments in Vimscript start with a `&quot;</span>`.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; If you open this file in Vim, it&#x27;ll be syntax highlighted for you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Vim is based on Vi. Setting `nocompatible` switches from the default</span><br><span class="line"><span class="string">&quot; Vi-compatibility mode and enables useful Vim functionality. This</span></span><br><span class="line"><span class="string">&quot;</span> configuration option turns out not to be necessary <span class="keyword">for</span> the file named</span><br><span class="line"><span class="string">&quot; &#x27;~/.vimrc&#x27;, because Vim automatically enters nocompatible mode if that file</span></span><br><span class="line"><span class="string">&quot;</span> is present. But we<span class="string">&#x27;re including it here just in case this config file is</span></span><br><span class="line"><span class="string">&quot; loaded some other way (e.g. saved as `foo`, and then Vim started with</span></span><br><span class="line"><span class="string">&quot; `vim -u foo`).</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; Turn on syntax highlighting.</span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; Disable the default Vim startup message.</span></span><br><span class="line"><span class="string">set shortmess+=I</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; Show line numbers.</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; This enables relative line numbering mode. With both number and</span></span><br><span class="line"><span class="string">&quot; relativenumber enabled, the current line shows the true line number, while</span></span><br><span class="line"><span class="string">&quot; all other lines (above and below) are numbered relative to the current line.</span></span><br><span class="line"><span class="string">&quot; This is useful because you can tell, at a glance, what count is needed to</span></span><br><span class="line"><span class="string">&quot; jump up or down to a particular line, by &#123;count&#125;k to go up or &#123;count&#125;j to go</span></span><br><span class="line"><span class="string">&quot; down.</span></span><br><span class="line"><span class="string">set relativenumber</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; Always show the status line at the bottom, even if you only have one window open.</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; The backspace key has slightly unintuitive behavior by default. For example,</span></span><br><span class="line"><span class="string">&quot; by default, you can&#x27;</span>t backspace before the insertion point <span class="built_in">set</span> with <span class="string">&#x27;i&#x27;</span>.</span><br><span class="line"><span class="string">&quot; This configuration makes backspace behave more reasonably, in that you can</span></span><br><span class="line"><span class="string">&quot;</span> backspace over anything.</span><br><span class="line"><span class="built_in">set</span> backspace=indent,eol,start</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; By default, Vim doesn&#x27;t let you hide a buffer (i.e. have a buffer that isn&#x27;t</span></span><br><span class="line"><span class="string">&quot;</span> shown <span class="keyword">in</span> any window) that has unsaved changes. This is to prevent you from <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> forgetting about unsaved changes and <span class="keyword">then</span> quitting e.g. via `:qa!`. We find</span><br><span class="line"><span class="string">&quot; hidden buffers helpful enough to disable this protection. See `:help hidden`</span></span><br><span class="line"><span class="string">&quot;</span> <span class="keyword">for</span> more information on this.</span><br><span class="line"><span class="built_in">set</span> hidden</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; This setting makes search case-insensitive when all characters in the string</span></span><br><span class="line"><span class="string">&quot;</span> being searched are lowercase. However, the search becomes case-sensitive <span class="keyword">if</span></span><br><span class="line"><span class="string">&quot; it contains any capital letters. This makes searching more convenient.</span></span><br><span class="line"><span class="string">set ignorecase</span></span><br><span class="line"><span class="string">set smartcase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Enable searching as you <span class="built_in">type</span>, rather than waiting till you press enter.</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Unbind some useless/annoying default key bindings.</span></span><br><span class="line"><span class="string">nmap Q &lt;Nop&gt; &quot;</span> <span class="string">&#x27;Q&#x27;</span> <span class="keyword">in</span> normal mode enters Ex mode. You almost never want this.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Disable audible bell because it&#x27;s annoying.</span></span><br><span class="line"><span class="string">set noerrorbells visualbell t_vb=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Enable mouse support. You should avoid relying on this too much, but it can</span><br><span class="line"><span class="string">&quot; sometimes be convenient.</span></span><br><span class="line"><span class="string">set mouse+=a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Try to prevent bad habits like using the arrow keys <span class="keyword">for</span> movement. This is</span><br><span class="line"><span class="string">&quot; not the only possible bad habit. For example, holding down the h/j/k/l keys</span></span><br><span class="line"><span class="string">&quot;</span> <span class="keyword">for</span> movement, rather than using more efficient movement commands, is also a</span><br><span class="line"><span class="string">&quot; bad habit. The former is enforceable through a .vimrc, while we don&#x27;t know</span></span><br><span class="line"><span class="string">&quot;</span> how to prevent the latter.</span><br><span class="line"><span class="string">&quot; Do this in normal mode...</span></span><br><span class="line"><span class="string">nnoremap &lt;Left&gt;  :echoe &quot;</span>Use h<span class="string">&quot;&lt;CR&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;Right&gt; :echoe &quot;</span>Use l<span class="string">&quot;&lt;CR&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;Up&gt;    :echoe &quot;</span>Use k<span class="string">&quot;&lt;CR&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;Down&gt;  :echoe &quot;</span>Use j<span class="string">&quot;&lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> ...and <span class="keyword">in</span> insert mode</span><br><span class="line">inoremap &lt;Left&gt;  &lt;ESC&gt;:echoe <span class="string">&quot;Use h&quot;</span>&lt;CR&gt;</span><br><span class="line">inoremap &lt;Right&gt; &lt;ESC&gt;:echoe <span class="string">&quot;Use l&quot;</span>&lt;CR&gt;</span><br><span class="line">inoremap &lt;Up&gt;    &lt;ESC&gt;:echoe <span class="string">&quot;Use k&quot;</span>&lt;CR&gt;</span><br><span class="line">inoremap &lt;Down&gt;  &lt;ESC&gt;:echoe <span class="string">&quot;Use j&quot;</span>&lt;CR&gt;</span><br></pre></td></tr></table></figure></li><li><p>个人使用配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; 在文件中加入以下几行代码</span></span><br><span class="line"><span class="string">set autoindent</span></span><br><span class="line"><span class="string">set cindent</span></span><br><span class="line"><span class="string">set shiftwidth=4</span></span><br><span class="line"><span class="string">set softtabstop=4</span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string">set nu</span></span><br><span class="line"><span class="string">autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;</span> 各参数含义</span><br><span class="line"><span class="string">&quot; set autoindent  //自动缩进</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">set</span> cindent  //C自动缩进</span><br><span class="line"><span class="string">&quot; set shiftwidth=4 //自动缩进空白字符个数</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">set</span> softtabstop=4 //tab键的一个制表符，如果softtabstop=5,tabstop=4,则tab是1个制表符加1个空格的混合</span><br><span class="line"><span class="string">&quot; set tabstop=4 //tab键的空格数</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">set</span> nu  //默认设置行号</span><br><span class="line"><span class="string">&quot; 检测为 yaml 文件时，调整 tab 缩进为 2</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Advanced-Vim"><a href="#Advanced-Vim" class="headerlink" title="Advanced Vim"></a>Advanced Vim</h1><h2 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h2><p><code>:s</code> (substitute) command (<a href="http://vim.wikia.com/wiki/Search_and_replace">documentation</a>).</p><ul><li><p><code>:%s/foo/bar/gci</code></p><ul><li>replace foo with bar globally in file</li></ul><blockquote><ul><li><p>不带<code>%</code>只会修改当前行，带<code>%</code>会修改所有行</p></li><li><p>不带<code>g</code>只会修改每行第一个，带<code>g</code>会修改整个文件</p></li><li><p>不带<code>c</code>会直接修改，带<code>c</code>会依次询问每一个是否修改</p></li><li><p>不带<code>i</code>精准匹配（带<code>I</code>表示同样含义），带<code>i</code>忽略大小写</p></li></ul></blockquote></li><li><p><code>:%s/\[.*\](\(.*\))/\1/g</code></p><ul><li>replace named Markdown links with plain URLs</li></ul></li><li><p><code>:5,12s/foo/bar/g</code></p><ul><li>Change each ‘foo’ to ‘bar’ for all lines from line 5 to line 12 (inclusive).</li></ul></li><li><p><code>\s</code>表示空格，<code>\t</code>表示tab，<code>\+</code>表示匹配多个前面的字符</p></li><li><p><code>:%s/pattern//gn</code></p><ul><li>记录<code>pattern</code>出现次数</li></ul></li><li><p><code>:%s/$/pattern/g</code></p><ul><li>给文件的每一行，<strong>末尾</strong>加上<code>pattern</code>，特殊字符如<code>/</code>需要转义成<code>\/</code></li></ul></li><li><p><code>:%s/^/pattern/g</code></p><ul><li>给文件的每一行，<strong>开头</strong>加上<code>pattern</code>，特殊字符如<code>/</code>需要转义成<code>\/</code></li></ul></li></ul><h2 id="Multiple-windows"><a href="#Multiple-windows" class="headerlink" title="Multiple windows"></a>Multiple windows</h2><ul><li><p><code>:sp</code> &#x2F; <code>:vsp</code> to split windows </p><blockquote><ul><li><code>:sp</code>纵向，<code>:vsp</code>横向，多个窗口内容一致</li><li><code>:q</code>退出其中一个窗口</li><li><code>ctrl + w + 方向键</code>或者<code>ctrl + w + h/j/k/l</code> 朝某个方向切换窗格</li><li><code>ctrl + ww</code> 按创建顺序切换到下一个窗格中</li></ul></blockquote></li><li><p>Can have multiple views of the same buffer.</p></li></ul><h2 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h2><ul><li>宏录制，复制操作指令，可用于相同格式的统一替换</li><li><code>q&#123;character&#125;</code> to start recording a macro in register <code>&#123;character&#125;</code></li><li><code>q</code> to stop recording</li><li><code>@&#123;character&#125;</code> replays the macro</li><li>Macro execution stops on error</li><li><code>&#123;number&#125;@&#123;character&#125;</code> executes a macro {number} times</li><li>Macros can be recursive<ul><li>first clear the macro with <code>q&#123;character&#125;q</code></li><li>record the macro, with <code>@&#123;character&#125;</code> to invoke the macro recursively (will be a no-op until recording is complete)</li></ul></li><li>Example: convert xml to json (<a href="https://missing.csail.mit.edu/2020/files/example-data.xml">file</a>)<ul><li>Array of objects with keys “name” &#x2F; “email”</li><li>Use a Python program?</li><li>Use sed &#x2F; regexes<ul><li><code>g/people/d</code></li><li><code>%s/&lt;person&gt;/&#123;/g</code></li><li><code>%s/&lt;name&gt;\(.*\)&lt;\/name&gt;/&quot;name&quot;: &quot;\1&quot;,/g</code></li><li>…</li></ul></li><li>Vim commands &#x2F; macros<ul><li><code>Gdd</code>, <code>ggdd</code> delete first and last lines</li><li>Macro to format a single element (register <code>e</code>)<ul><li>Go to line with <code>&lt;name&gt;</code></li><li><code>qe^r&quot;f&gt;s&quot;: &quot;&lt;ESC&gt;f&lt;C&quot;&lt;ESC&gt;q</code></li></ul></li><li>Macro to format a person<ul><li>Go to line with <code>&lt;person&gt;</code></li><li><code>qpS&#123;&lt;ESC&gt;j@eA,&lt;ESC&gt;j@ejS&#125;,&lt;ESC&gt;q</code></li></ul></li><li>Macro to format a person and go to the next person<ul><li>Go to line with <code>&lt;person&gt;</code></li><li><code>qq@pjq</code></li></ul></li><li>Execute macro until end of file<ul><li><code>999@q</code></li></ul></li><li>Manually remove last <code>,</code> and add <code>[</code> and <code>]</code> delimiters</li></ul></li></ul></li></ul><h2 id="run-shell-command"><a href="#run-shell-command" class="headerlink" title="run shell command"></a>run shell command</h2><ul><li><p><code>:! &#123;command&#125;</code></p></li><li><p>如以下文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello, world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依次执行</p><ul><li><p><code>:!g++ %&lt;CR&gt;</code>，如果要生成和文件同名的可执行文件，用<code>!g++ -o %&lt; %</code></p><p><img src="/tools/The-trick-of-vim/image-20221224112419945.png" alt="image-20221224112419945"></p></li><li><p><code>:!./a.out&lt;CR&gt;</code>或者<code>:!./main&lt;CR&gt;</code></p><p><img src="/tools/The-trick-of-vim/image-20221224112639805.png" alt="image-20221224112639805"></p></li></ul></li></ul><h2 id="sudo-in-vim"><a href="#sudo-in-vim" class="headerlink" title="sudo in vim"></a>sudo in vim</h2><ul><li><code>:w !sudo tee %</code>: 输入密码，即可修改，退出使用 <code>:q!</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://missing.csail.mit.edu/2020/editors/">missing-semester: Editors (Vim) 2020</a></li><li><a href="https://qa.1r1g.com/sf/ask/4327692421/">在 WSL@Windows 10 上使用 Cv 无法在 Vim 中使用可视块模式</a></li><li><a href="https://www.cnblogs.com/yukina/p/16401529.html">vim操作之多窗格,多文件的编辑和操作</a></li><li><a href="https://blog.csdn.net/weixin_33786077/article/details/91905578">Vim Macros</a></li><li><a href="https://qa.1r1g.com/sf/ask/1503226371/#">使用Vim编译和运行C++程序</a></li><li><a href="https://www.cnblogs.com/yblackd/p/13283546.html">Vim配置——自动缩进（C&#x2F;C++) </a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】redis安装</title>
      <link href="/tutorial/Linux-install-redis-in-Linux/"/>
      <url>/tutorial/Linux-install-redis-in-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>以<code>centos</code>源码编译安装为例</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>下载压缩包，<a href="https://redis.io/download/">Redis官网</a>，下载版本为 <code>7.0.3</code>：<code>wget https://github.com/redis/redis/archive/7.0.3.tar.gz</code></p></li><li><p>解压缩并移动到 <code>/usr/local/redis</code>，进入该目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># 解压</span></span><br><span class="line">tar -zxvf redis-7.0.3.tar.gz</span><br><span class="line">   <span class="comment"># 移动到指定路径</span></span><br><span class="line"><span class="built_in">mv</span> redis-7.0.3 /usr/local/redis</span><br><span class="line">   <span class="comment"># 进入文件夹</span></span><br><span class="line">   <span class="built_in">cd</span> /usr/local/redis</span><br></pre></td></tr></table></figure></li><li><p>安装<code>redis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译及安装到指定路径</span></span><br><span class="line">make</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure></li><li><p>启动<code>redis</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前台启动</span></span><br><span class="line">./bin/redis-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 从 redis 的安装根目录中复制 redis.conf 到 redis 的启动目录，进入bin目录</span></span><br><span class="line">cp redis.conf bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改 redis.conf 文件，把 daemonize no 改为 daemonize <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 启动redis（注意此时在bin目录下，所以执行不带bin/）</span></span><br><span class="line">./redis-server redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 查看后台启动情况</span></span><br><span class="line">ps -aux | grep redis</span><br></pre></td></tr></table></figure></li><li><p>其他：<code>redis-cli</code>是连接本地<code>redis</code>服务的一个命令，通过该命令后可以即可控制<code>redis</code>的脚本控制台（执行脚本都在 <code>bin/</code>下）</p><p><img src="/tutorial/Linux-install-redis-in-Linux/1657675749679.png" alt="1657675749679"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/a_rain2333/article/details/119567362">CentOS7安装Redis教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】kafka安装</title>
      <link href="/tutorial/Linux-install-kafka-in-Linux/"/>
      <url>/tutorial/Linux-install-kafka-in-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>以<code>centos</code>源码编译安装为例</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>安装<code>JDK</code>：<code>sudo yum install -y java-1.8.0-openjdk</code></li><li>查看是否安装成功：<code>java -version</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version <span class="string">&quot;1.8.0_322&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_322-b06)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode)</span><br></pre></td></tr></table></figure></li><li>配置Java环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### 检查一下环境种是否有Java变量, 没有任何输出表示没有相应环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 配置环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;JAVA_HOME=<span class="subst">$(readlink -f /usr/bin/java | sed <span class="string">&quot;s:bin/java::&quot;</span>)</span>&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><a href="https://kafka.apache.org/downloads">官网</a>下载<code>kafka</code>安装包，<code>wget https://dlcdn.apache.org/kafka/3.2.0/kafka_2.12-3.2.0.tgz</code></li><li>解压到指定路径, <code>sudo tar -zvxf kafka_2.12-3.2.0.tgz -C  /opt/</code></li><li>创建一个文件的软连接，这样可以方便进行<code>kafka</code>的升级, <code>sudo ln -s /opt/kafka_2.12-3.2.0 /opt/kafka</code></li><li>进入<code>kafka</code>目录，启动<code>zookeeper</code>：<code>sudo bin/zookeeper-server-start.sh config/zookeeper.properties </code></li><li>新开一个终端，进入<code>kafka</code>文件夹，启动<code>kafka</code>：<code>bin/kafka-server-start.sh config/server.properties</code></li><li>配置系统单元服务进行启动<code>kafka</code>和<code>zookeeper</code><ul><li><p>配置<code>zookeeper</code>:</p><ul><li>添加文件：<code>sudo vim /etc/systemd/system/zookeeper.service</code><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">Apache Zookeeper server</span></span><br><span class="line"><span class="attr">Documentation</span>=<span class="string">http://zookeeper.apache.org</span></span><br><span class="line"><span class="attr">Requires</span>=<span class="string">network.target remote-fs.target</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">network.target remote-fs.target</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">simple</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties</span></span><br><span class="line"><span class="attr">ExecStop</span>=<span class="string">/opt/kafka/bin/zookeeper-server-stop.sh</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="string">on-abnormal</span></span><br><span class="line"><span class="attr">User</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">Group</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure></li><li>验证一下是否配置成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start zookeeper</span><br><span class="line">sudo systemctl status zookeeper</span><br><span class="line">sudo systemctl stop zookeeper</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置<code>kafka</code></p><ul><li><p>添加文件：<code>sudo vim /etc/systemd/system/kafka.service</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attr">[Unit]</span></span><br><span class="line">   <span class="attr">Description</span>=<span class="string">Apache Kafka Server</span></span><br><span class="line">   <span class="attr">Documentation</span>=<span class="string">http://kafka.apache.org/documentation.html</span></span><br><span class="line"><span class="attr">Requires</span>=<span class="string">zookeeper.service</span></span><br><span class="line">   </span><br><span class="line">   <span class="attr">[Service]</span></span><br><span class="line">   <span class="attr">Type</span>=<span class="string">simple</span></span><br><span class="line">   <span class="attr">ExecStart</span>=<span class="string">/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties</span></span><br><span class="line">   <span class="attr">ExecStop</span>=<span class="string">/opt/kafka/bin/kafka-server-stop.sh</span></span><br><span class="line">   <span class="attr">Restart</span>=<span class="string">on-abnormal</span></span><br><span class="line">   </span><br><span class="line">   <span class="attr">[Install]</span></span><br><span class="line">   <span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure></li><li><p>验证一下是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start kafka</span><br><span class="line">sudo systemctl status kafka</span><br><span class="line">sudo systemctl stop kafka</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>测试，生产者消费者发消息<ol><li>进入到kafka目录下，通过下面命令创建一个kafka topic：<del><code>bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic testTopic</code></del> <code>bin/kafka-topics.sh --create -bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic testTopic</code><ul><li>报错： <img src="/tutorial/Linux-install-kafka-in-Linux/kafka-error.png" alt="img"></li><li>解决：使用 Kafka Broker的 <code>--bootstrap-server localhost:9092</code>来替代 <code>--zookeeper localhost:2181</code></li><li><a href="https://blog.csdn.net/weixin_45865428/article/details/121264496">参考</a></li></ul></li><li>查看创建了多少个topic: <del><code>bin/kafka-topics.sh --list --zookeeper localhost:2181</code></del> <code>bin/kafka-topics.sh --list --bootstrap-server localhost:9092</code><br><img src="/tutorial/Linux-install-kafka-in-Linux/kafka-testtopic.png" alt="img"></li><li>通过生产者进行发送消息: <code>bin/kafka-console-producer.sh --broker-list localhost:9092 --topic testTopic</code></li><li>创建一个消费者来进行接收消息: <code>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic testTopic --from-beginning</code></li><li>测试成功<br><img src="/tutorial/Linux-install-kafka-in-Linux/kafka-connet-ok.png" alt="img"></li></ol></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.cnblogs.com/Hackerman/p/12595246.html">centos 安装kafka</a></li><li><a href="https://zhuanlan.zhihu.com/p/375091238">kafka安装教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】MySQL安装</title>
      <link href="/tutorial/Linux-install-MySQL-in-Linux/"/>
      <url>/tutorial/Linux-install-MySQL-in-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>命令行安装以<code>Ubuntu</code>为例（WSL环境下）</li><li>编译安装以<code>centos</code>为例</li><li>为了选择特定版本及多版本使用，推荐<a href="#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">源码编译安装</a></li><li>待完成<ul><li><input disabled type="checkbox"> <code>MySQL</code>远程登录</li><li><input disabled type="checkbox"> <code>Ubuntu</code>编译安装</li><li><input disabled type="checkbox"> 多版本切换：估计是在<a href="#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">源码编译安装</a>中设置<code>my.cnf</code>之后的步骤重做</li><li><input disabled type="checkbox"> 添加链接：<code>service</code>和<code>systemd</code></li></ul></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过源安装MySQL</span></span><br><span class="line">sudo apt install mysql-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态并启动（重启）</span></span><br><span class="line">sudo service mysql status</span><br><span class="line">sudo service mysql restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取默认账密</span></span><br><span class="line">sudo cat /etc/mysql/debian.cnf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## debian.cnf文件内容</span></span></span><br><span class="line">[client]</span><br><span class="line">host     = localhost</span><br><span class="line">user     = debian-sys-maint</span><br><span class="line">password = jnRrQlDQcIQzLDIL</span><br><span class="line">socket   = /var/run/mysqld/mysqld.sock</span><br><span class="line">[mysql_upgrade]</span><br><span class="line">host     = localhost</span><br><span class="line">user     = debian-sys-maint</span><br><span class="line">password = jnRrQlDQcIQzLDIL</span><br><span class="line">socket   = /var/run/mysqld/mysqld.sock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## debian.cnf文件内容</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录</span></span><br><span class="line">mysql -udebian-sys-maint -pjnRrQlDQcIQzLDIL</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入后修改账密</span></span><br><span class="line">update mysql.user set authentication_string=password(&#x27;1&#x27;) where user =&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line">update mysql.user set plugin = &#x27;mysql_native_password&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用新账密登录</span></span><br><span class="line">mysql -uroot -p1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出，查看版本</span></span><br><span class="line">mysql --version</span><br></pre></td></tr></table></figure><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><ol><li><p>下载相应安装包，<code>wget https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-8.0/mysql-8.0.28-el7-x86_64.tar.gz</code>, 此处使用<a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-8.0/">清华镜像源</a></p></li><li><p>检查是否安装过<code>MySQL</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 查看是否有mysql依赖，为空则表示没有</span></span></span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 如果有就卸载，xxx表示查出来的依赖</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通删除模式</span></span><br><span class="line">rpm -e xxx(mysql_libs)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强力删除模式,如果上述命令删除时，提示有依赖其他文件，则可以用该命令对其进行强力删除</span></span><br><span class="line">rpm -e --nodeps xxx(mysql_libs)</span><br></pre></td></tr></table></figure></li><li><p>检查是否有<code>mariadb</code>：<code>rpm -qa | grep mariadb</code>, 有则卸载, 同<code>MySQL</code>卸载<br><img src="/tutorial/Linux-install-MySQL-in-Linux/check-mariadb.png"></p></li><li><p>安装<code>MySQL</code>依赖包：<code>yum install libaio</code></p></li><li><p>解压到指定路径, <code>sudo tar -zxvf mysql-8.0.28-el7-x86_64.tar.gz -C /opt</code></p></li><li><p>更名并移动至 <code>/usr/local</code>下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">mv</span> mysql-8.0.28-el7-x86_64 mysql</span><br><span class="line"><span class="built_in">mv</span> /opt/mysql/ /usr/local/</span><br></pre></td></tr></table></figure></li><li><p>创建数据库文件存放的文件夹。这个文件夹将来存放每个数据库的库文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"><span class="built_in">mkdir</span> mysqldb</span><br></pre></td></tr></table></figure></li><li><p><code>MySQL</code>安装目录赋予权限：<code>chmod -R 777 /usr/local/mysql/</code></p></li><li><p>创建<code>MySQL</code>组和用户</p><ul><li>创建组：<code>groupadd mysql</code></li><li>创建用户: <code>useradd -r -g mysql -s /bin/false mysql</code>(<code>-s /bin/false</code>参数指定<code>MySQL</code>用户仅拥有所有权，而没有登录权限)</li><li>将用户添加到组中: <code>chown -R mysql:mysql ./</code></li></ul></li><li><p>修改<code>MySQL</code>配置文件：<code>vim /etc/my.cnf</code>，如果没有文件就新建</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=<span class="string">/usr/local/mysql</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/usr/local/mysql/mysqldb</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=<span class="string">mysql_native_password</span></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8mb4</span></span><br></pre></td></tr></table></figure></li><li><p>进入<code>MySQL</code>安装目录下，安装<code>MySQL</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql/bin/</span><br><span class="line">./bin/mysqld --initialize <span class="comment"># 生成初始密码，见下图终端（记住，后面登录MySQL需要）</span></span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-MySQL-in-Linux/mysql-init-ok.png"></p></li><li><p>启动<code>MySQL</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql/support-files</span><br><span class="line">./mysql.server start</span><br><span class="line"><span class="comment"># 如果第一次启动，当初始化执行会有报错，加权限，再次执行</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /usr/local/mysql</span><br><span class="line">./mysql.server start</span><br></pre></td></tr></table></figure></li><li><p>将<code>MySQL</code>添加到系统进程中：<code>cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</code></p></li><li><p>设置<code>MySQL</code>自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /etc/init.d/mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure></li><li><p>修改root用户登录密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql/bin/</span><br><span class="line">./mysql -u root -p</span><br><span class="line"><span class="comment"># 修改账户密码为：root:passwd</span></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;passwd&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>全局使用<code>MySQL</code>，加环境变量，并生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/local/mysql/bin</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>全局使用：<code>mysql -uroot -p</code>，输入密码即可使用</p></li></ol><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><ul><li>安装：<code>docker pull mysql</code></li><li>启动：<code>docker run -d --name local-mysql -p 4561:3306 -e MYSQL_ROOT_PASSWORD=123 -e LANG=C.UTF-8 mysql </code></li><li>进入容器：<code>docker exec -it local-mysql /bin/bash</code></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/rainAndyou/article/details/117257449">Ubuntu18.04安装mysql</a></li><li><a href="https://blog.csdn.net/qq_41389482/article/details/109711389">Centos7环境下安装Mysql8详细教程(超详细，亲测百分百成功)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows】oh my posh安装（Windows-Terminal）</title>
      <link href="/tutorial/Windows-install-oh-my-posh/"/>
      <url>/tutorial/Windows-install-oh-my-posh/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Terminal安装"><a href="#Windows-Terminal安装" class="headerlink" title="Windows Terminal安装"></a>Windows Terminal安装</h1><ul><li>微软商店搜索<code>Windows Terminal</code>，进行安装</li></ul><p><img src="/tutorial/Windows-install-oh-my-posh/image-20221221131723543.png" alt="image-20221221131723543"></p><h1 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h1><ol><li><p>下载喜欢的字体，<a href="https://www.nerdfonts.com/font-downloads">地址</a>，先装下面的试试</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328094736796.png" alt="image-20220328094736796"></p></li><li><p>安装字体，<a href="https://support.microsoft.com/en-us/office/add-a-font-b7c5f17c-4426-4b53-967f-455339c564c1">教程</a>，即<strong>右键选择字体后选择安装即可</strong></p></li><li><p>替换字体</p><ol><li><p>进入设置</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328095954480.png" alt="image-20220328095954480"></p></li><li><p>选择安装的新字体</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328100040858.png" alt="image-20220328100040858"></p></li></ol></li></ol><h1 id="oh-my-posh安装"><a href="#oh-my-posh安装" class="headerlink" title="oh my posh安装"></a>oh my posh安装</h1><ul><li>旧方法可能失效（之前已经安装的不受影响，不排除是电脑原因），如果不行按照新方法尝试</li><li>旧方法在<code>Intel</code>架构成功，<code>2022-03-28</code></li><li>新方法在<code>AMD</code>架构成功，<code>2022-12-21</code></li></ul><h2 id="旧方法安装"><a href="#旧方法安装" class="headerlink" title="旧方法安装"></a>旧方法安装</h2><ol><li><p>安装<code> Oh My Posh for PowerShell</code>：<code>Install-Module oh-my-posh -Scope CurrentUser</code>，可执行<code>Update-Module oh-my-posh</code>进行更新(第一次安装应该就是最新的)</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328095509685.png" alt="image-20220328095509685"></p></li><li><p>选择并应用 PowerShell 提示符主题：<code>notepad $PROFILE</code>，出现以下提示，创建新文件，添加以下内容到结尾</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328095754796.png" alt="image-20220328095754796"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-PoshPrompt -Theme paradox</span><br></pre></td></tr></table></figure></li><li><p>使用 Terminal-Icons 添加缺少的文件夹或文件图标，安装<code>Install-Module -Name Terminal-Icons -Repository PSGallery</code></p><ul><li><p><font color="red">这一步需要管理员权限，否则出现以下错误</font></p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328100225098.png" alt="image-20220328100225098"></p></li><li><p>成功安装，不知道为啥有点错乱，<strong>重启以后就好了</strong></p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328100507979.png" alt="image-20220328100507979"></p></li><li><p><font color="red">如果这一步出错如下，见</font><a href="#%E6%96%B0%E6%96%B9%E6%B3%95%E5%AE%89%E8%A3%85">新方法安装</a></p><p>![oh-my-posh error](Windows-install-oh-my-posh&#x2F;oh-my-posh error.png)</p></li></ul></li><li><p>安装后重启<code>Windows Terminal</code>会出现以下状况</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328100320507.png" alt="image-20220328100320507"></p></li><li><p>然后就成功了！</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328100343336.png" alt="image-20220328100343336"></p></li></ol><h2 id="新方法安装"><a href="#新方法安装" class="headerlink" title="新方法安装"></a>新方法安装</h2><ol><li><p><font color="red">如果没有按照<a href="#%E6%97%A7%E6%96%B9%E6%B3%95%E5%AE%89%E8%A3%85">旧方法安装</a>进行操作，跳过此步</font>：卸载已经安装的<code>oh my posh</code>，<a href="https://ohmyposh.dev/docs/migrating">来源: PowerShell module</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Remove the module&#x27;s cached files</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="variable">$env:POSH_PATH</span> <span class="literal">-Force</span> <span class="literal">-Recurse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninstall the PowerShell module</span></span><br><span class="line"><span class="built_in">Uninstall-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-AllVersions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete the import of the PowerShell module in your $PROFILE</span></span><br><span class="line"><span class="comment"># 这一步可以简化为清空$PROFILE内容</span></span><br><span class="line">notepad <span class="variable">$PROFILE</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span></span><br></pre></td></tr></table></figure></li><li><p>安装<code>oh my posh</code>，<a href="https://ohmyposh.dev/docs/installation/windows">来源：installation: Windows</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装，执行命令后，等待安装，过程较慢</span></span><br><span class="line">winget install JanDeDobbeleer.OhMyPosh <span class="literal">-s</span> winget</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Windows-install-oh-my-posh/image-20221221145432638.png" alt="image-20221221145432638"></p></li><li><p>重启一次终端，此时<code>oh my posh</code>未生效，配置终端后即可，<a href="https://ohmyposh.dev/docs/installation/prompt">来源：Change your prompt</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前终端类型</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> get shell</span><br><span class="line"><span class="comment"># 修改$PROFILE</span></span><br><span class="line">notepad <span class="variable">$PROFILE</span></span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh | <span class="built_in">Invoke-Expression</span></span><br><span class="line"><span class="comment"># 保存文件回到powershell，执行</span></span><br><span class="line">. <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><p><img src="/tutorial/Windows-install-oh-my-posh/image-20221221150659256.png" alt="image-20221221150659256"></p></li></ol><h1 id="修改显示样式"><a href="#修改显示样式" class="headerlink" title="修改显示样式"></a>修改显示样式</h1><ul><li><p><code>oh my posh</code>提供了很多样式可选，默认样式如下（旧方法安装默认样式），样式设置见<a href="https://ohmyposh.dev/docs/themes">Themes</a></p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328105028682.png" alt="image-20220328105028682"></p></li><li><p>在终端输入<code>Get-PoshThemes</code>查看可选的样式，最下面有更改样式提示</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328111218820.png" alt="image-20220328111218820"></p></li><li><p>选择想要的样式后，<font color="red">输入<code>notepad $PROFILE</code>，在配置文件的最后加入</font><code> oh-my-posh init pwsh --config C:\Users\Admin\AppData\Local\oh-my-posh\themes/atomic.omp.json | Invoke-Expression</code>即可使用新样式了！&#x3D;&gt;我选的是<code>atomic</code>，效果如下（如果在终端直接输入，只会是临时生效，关闭终端将会重置，<font color="red">路径要替换成自己的，不能直接粘贴</font>）</p></li><li><p><font color="red">对于新方法安装的文件中，需要删除</font><code>oh-my-posh init pwsh | Invoke-Expression</code>，或者是<code>oh-my-posh init</code>只支持一个</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220328115047203.png" alt="image-20220328115047203"></p></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>使用<code>git log</code>查看日志，无法正确显示中文<ul><li><p>临时生效：在命令行中输入<code>$env:LESSCHARSET=&#39;utf-8&#39;</code>即可，<a href="https://blog.csdn.net/jeremyjone/article/details/106251564">Terminal中git log不显示中文问题的解决方案</a></p></li><li><p>永久生效：在环境变量中新建项目，变量名： <code>LESSCHARSET</code> ，变量值： <code>utf-8</code>，重启<code>windows terminal</code>即可</p><p><img src="/tutorial/Windows-install-oh-my-posh/image-20220411164830450.png" alt="image-20220411164830450"></p></li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/powerline-in-powershell">微软安装参考</a></li><li><a href="https://ohmyposh.dev/">oh my posh官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Windows </tag>
            
            <tag> oh-my-posh </tag>
            
            <tag> Windows-Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【力扣】面试题 17.15. 最长单词</title>
      <link href="/algorithm/lc-longest-word-lcci/"/>
      <url>/algorithm/lc-longest-word-lcci/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="/algorithm/lc-longest-word-lcci/image-20221215165645334.png" alt="image-20221215165645334"></p><ul><li><a href="https://leetcode.cn/problems/longest-word-lcci/">原题链接</a></li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><ul><li><p>最开始没想到思路，然后看了一眼提示</p></li><li><p><font color="red">提示</font></p><ul><li>简化题目，如果要求的字符串<strong>只由两个其他的字符串构成</strong>，解法：枚举两两可能性</li><li>扩展到多个字符串，解法：寻找分割点</li></ul></li><li><p>首先将字符串数组排序：毕竟是求最长的，找到就不找了</p><ul><li>长度相等，字典序小的在前</li><li>长度不等，长度长的在前</li></ul></li><li><p>将字符串存入hash表<code>mp</code>，方便查找</p></li><li><p>遍历字符串数组，寻找可能的解</p></li><li><p>对于字符串数组中的每一个值</p><ul><li>都回溯找一下是否能得到答案</li><li>按长度<strong>递减</strong>找分割点，分成两份，即<code>cur</code>和<code>next</code><ul><li>如果<code>cur</code>在<code>mp</code>中，继续判断<code>next</code></li><li>如果不在，直接寻找下一个分割点</li><li><font color="red">按长度递减是因为</font><ul><li>如果长的满足，且后续满足就不要考虑短的；如果长的不满足，还有机会考虑长的</li><li>反之，如果先考虑短的，就不存在计划考虑长的了，<font color="red">至少下面的代码不能</font></li><li>如用例<code>[&quot;cat&quot;,&quot;banana&quot;,&quot;dog&quot;,&quot;nana&quot;,&quot;walk&quot;,&quot;walker&quot;,&quot;dogwalker&quot;]</code></li></ul></li></ul></li><li>如果找到一个值，退出循环，直接返回结果</li></ul></li><li><p>注意回溯的退出条件时，剩余的串为空</p></li><li><p>为了避免找到由自身构成的最长串，还需要一个额外的变量记录<code>cnt</code>当前使用的字符串数量</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">process</span><span class="params">(string&amp; word, unordered_set&lt;string&gt;&amp; mp, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 寻找分割点</span></span><br><span class="line">        <span class="comment">// 判断剩余串是否存在，如果都存在，即为true</span></span><br><span class="line">        <span class="comment">// 需要有回溯的过程</span></span><br><span class="line">        <span class="keyword">if</span> (word.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> n = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 逆向，从长往短找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            string cur = word.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">            string next = word.<span class="built_in">substr</span>(i);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;word : &quot; &lt;&lt; word &lt;&lt; &quot;, cur : &quot; &lt;&lt; cur &lt;&lt; &quot;, next : &quot; &lt;&lt; next &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(cur)) &#123;</span><br><span class="line">                <span class="comment">// walk 和 walker </span></span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">process</span>(next, mp, cnt) &amp;&amp; cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestWord</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(),[](string&amp; a, string&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">size</span>() == b.<span class="built_in">size</span>() ? a &lt; b : a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        unordered_set&lt;string&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; word : words) mp.<span class="built_in">insert</span>(word);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">process</span>(word, mp, <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> word;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/algorithm/lc-longest-word-lcci/image-20221215170559606.png" alt="image-20221215170559606"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用浏览器脚本</title>
      <link href="/other/browser-scripts/"/>
      <url>/other/browser-scripts/</url>
      
        <content type="html"><![CDATA[<h1 id="CSDN关注后阅读"><a href="#CSDN关注后阅读" class="headerlink" title="CSDN关注后阅读"></a>CSDN关注后阅读</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="keyword">var</span> article_content=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;article_content&quot;</span>);article_content.<span class="title function_">removeAttribute</span>(<span class="string">&quot;style&quot;</span>);<span class="keyword">var</span> follow_text=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;follow-text&#x27;</span>)[<span class="number">0</span>];follow_text.<span class="property">parentElement</span>.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(follow_text.<span class="property">parentElement</span>);<span class="keyword">var</span>  hide_article_box=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27; hide-article-box&#x27;</span>)[<span class="number">0</span>];hide_article_box.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(hide_article_box);</span><br></pre></td></tr></table></figure><h1 id="CSDN登陆后复制"><a href="#CSDN登陆后复制" class="headerlink" title="CSDN登陆后复制"></a>CSDN登陆后复制</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过期，应该是无效了</span></span><br><span class="line"><span class="attr">javascript</span>:<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">contentEditable</span>=<span class="string">&#x27;true&#x27;</span>;<span class="variable language_">document</span>.<span class="property">designMode</span>=<span class="string">&#x27;on&#x27;</span>;<span class="keyword">void</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 230827有效</span></span><br><span class="line"><span class="attr">javascript</span>:<span class="variable language_">window</span>.<span class="property">oncontextmenu</span>=<span class="variable language_">document</span>.<span class="property">oncontextmenu</span>=<span class="variable language_">document</span>.<span class="property">oncopy</span>=<span class="literal">null</span>; [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;body&#x27;</span>)].<span class="title function_">forEach</span>(<span class="function"><span class="params">dom</span> =&gt;</span> dom.<span class="property">outerHTML</span> = dom.<span class="property">outerHTML</span>); [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;body, body *&#x27;</span>)].<span class="title function_">forEach</span>(<span class="function"><span class="params">dom</span> =&gt;</span> &#123;[<span class="string">&#x27;onselect&#x27;</span>, <span class="string">&#x27;onselectstart&#x27;</span>, <span class="string">&#x27;onselectend&#x27;</span>, <span class="string">&#x27;ondragstart&#x27;</span>, <span class="string">&#x27;ondragend&#x27;</span>, <span class="string">&#x27;oncontextmenu&#x27;</span>, <span class="string">&#x27;oncopy&#x27;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">ev</span> =&gt;</span> dom.<span class="title function_">removeAttribute</span>(ev)); dom.<span class="property">style</span>[<span class="string">&#x27;user-select&#x27;</span>]=<span class="string">&#x27;auto&#x27;</span>;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】代理与反向代理</title>
      <link href="/network/proxy-and-reverse-proxy/"/>
      <url>/network/proxy-and-reverse-proxy/</url>
      
        <content type="html"><![CDATA[<center><font color="red">以下内容转载自<a href="https://mp.weixin.qq.com/s/6v6u_TlwweIRN3j4jmYh3Q">八张动图搞懂代理和反向代理</a>，整理部分格式</font></center><h1 id="没有代理的请求过程"><a href="#没有代理的请求过程" class="headerlink" title="没有代理的请求过程"></a>没有代理的请求过程</h1><ul><li>在没有代理服务器时，客户端和服务器之间的请求和响应过程</li></ul><p><img src="/network/proxy-and-reverse-proxy/1.gif" alt="图片"></p><h1 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>代理服务器是位于客户端和服务器之间的软件或硬件服务器，客户端连接到代理以请求真实服务器的连接</li><li>从本质上讲，代理服务器（又名转发代理）是一种软件或硬件，可以代表客户端促进从其他服务器请求资源，从而使客户端与服务器匿名</li><li>通常，转发代理用于缓存数据、过滤请求、记录请求或转换请求（通过添加&#x2F;删除标头、加密&#x2F;解密或压缩资源）</li><li>转发代理可以通过代表客户端发送请求，在服务器隐藏客户端的身份</li></ul><p><img src="/network/proxy-and-reverse-proxy/2.gif" alt="图片"></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><p>使用代理服务器，可以带来缓存的好处。代理服务器可以缓存一些预计不会发生改变的数据，比如一些静态数据等</p></li><li><p>当客户端再次发送相同的请求时，代理服务器可以将缓存数据直接返回，而不用再次请求服务器，来降低请求延迟，减少网络流量的优点</p></li></ul><p><img src="/network/proxy-and-reverse-proxy/3.gif" alt="图片"></p><h3 id="匿名"><a href="#匿名" class="headerlink" title="匿名"></a>匿名</h3><ul><li>代理服务器还有另一个作用，就是可以<strong>在服务器端隐藏客户端的身份</strong>。服务端只能看到请求方是代理服务器，而不知道具体发出请求的客户端</li></ul><p><img src="/network/proxy-and-reverse-proxy/4.gif" alt="图片"></p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul><li>代理服务器还可以用来做一些访问控制。比如在公司的网络出口建立代理服务器，因为所有员工的客户端请求都会通过代理服务器访问外部网络服务，可以在代理服务器中阻止某些恶意网站的访问，保护客户端免受恶意网站的侵害</li></ul><p><img src="/network/proxy-and-reverse-proxy/5.gif" alt="图片"></p><h3 id="访问记录"><a href="#访问记录" class="headerlink" title="访问记录"></a>访问记录</h3><ul><li>同样，由于所有流量都通过代理，因此可以在代理服务器记录请求日志，这些日志可用于识别任何请求记录或对某些站点的缓存需求做出评估</li></ul><p><img src="/network/proxy-and-reverse-proxy/6.gif" alt="图片"></p><h1 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li><p>反向代理代表的是服务器，在客户端看来反向代理就是一个普通的服务器</p></li><li><p>反向代理将请求转发到一个或多个处理请求的普通服务器上。返回来自普通服务器的响应，就好像它直接来自原始服务器一样，让客户端不知道原始服务器的身份</p></li><li><p>在下图反向代理的示例中，反向代理服务器隐藏了最终给客户端提供服务的服务器身份。对于客户端来说，只能看到反向代理服务器</p></li></ul><p><img src="/network/proxy-and-reverse-proxy/7.gif" alt="图片"></p><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><h3 id="缓存-1"><a href="#缓存-1" class="headerlink" title="缓存"></a>缓存</h3><ul><li>反向代理服务器也可以在本地缓存那些不变的数据。因此，当另一个客户端发送对相同内容的请求时，它可以从其本地缓存中获取数据返回，而不用请求真实服务器。这样可以降低请求延迟、减少服务器负载</li></ul><p><img src="/network/proxy-and-reverse-proxy/8.gif" alt="图片"></p><h3 id="匿名-1"><a href="#匿名-1" class="headerlink" title="匿名"></a>匿名</h3><ul><li>代理最明显的作用就是匿名能力，反向代理也有匿名的作用</li><li>但是反向代理和代理的匿名有所区别，<strong>反向代理的匿名是为了让客户端不知道最终的目标服务器的身份</strong>。这种匿名能力可以保护服务端免受客户端的DDoS攻击等</li></ul><p><img src="/network/proxy-and-reverse-proxy/9.gif" alt="图片"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>反向代理还有一个很大的作用便是做服务器之间的负载均衡。反向代理可以使用一些负载均衡算法，帮助在服务器之间均匀分配流量，从而提高可靠性和可用性</li></ul><p><img src="/network/proxy-and-reverse-proxy/10.gif" alt="图片"></p><h3 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h3><ul><li>很多时候我们的项目在发布新功能时，并不会将新功能全量发布。比如掘金社区新增了某界面功能，但是不确定用户对新功能使用的反应，需要在一部分用户中进行测试，而通过反向代理服务器可以进行设置，按照特定的模式请求到不同的服务器上。比如10%的请求到新服务</li></ul><h3 id="路由功能"><a href="#路由功能" class="headerlink" title="路由功能"></a>路由功能</h3><ul><li>反向代理还可以作为微服务架构中的网关或路由。它可以将映射到正在运行的实际服务上，例如<ul><li>如果客户端要查询juejin.com的推荐文章，它会将请求路由到服务1，该服务器提供推荐文章查询服务</li><li>如果客户端是发布一篇新文章，则路由到服务器2，该服务提供文章发布功能</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 代理 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】08-高级设置</title>
      <link href="/tutorial/Hexo-08-advanced-setup/"/>
      <url>/tutorial/Hexo-08-advanced-setup/</url>
      
        <content type="html"><![CDATA[<h1 id="文章跳转"><a href="#文章跳转" class="headerlink" title="文章跳转"></a>文章跳转</h1><h2 id="文章内跳转"><a href="#文章内跳转" class="headerlink" title="文章内跳转"></a>文章内跳转</h2><ul><li>锚点 <code>[文章内跳转](#目标位置)</code></li><li>目标位置 <code>&lt;span id=&quot;目标位置&quot;&gt;&lt;/span&gt;</code></li></ul><h2 id="不同文章跳转"><a href="#不同文章跳转" class="headerlink" title="不同文章跳转"></a>不同文章跳转</h2><ul><li><p>格式：<code>&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</code></p></li><li><p>注</p><ul><li><p>文章标题不用写，会自动解析</p></li><li><p>不需要带后缀<code>.md</code></p></li><li><p>要跳转文章md文件名都在<code>_posts</code>文件夹下</p></li><li><p>如果<code>_posts</code>下有多级目录，如<code>tools</code>，相应要变成<code>&#123;% post_link tools/要跳转文章md文件名 %&#125;</code>，<font color="red">即根目录是_posts，其余子文件夹需要注明</font></p></li><li><p><font color="red">存在问题</font>：本地跳转不友好，后面看能不能解决</p></li></ul></li></ul><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><ol><li><p>安装<a href="https://github.com/PaicHyperionDev/hexo-generator-search">hexo-generator-search</a>：<code>npm install hexo-generator-search --save</code></p></li><li><p>修改主题配置文件，如修改<code>_config.butterfly.yml</code>，默认只有<code>enable</code>改成<code>true</code>即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span><span class="comment"># 是否开启本地搜索</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span><span class="comment"># 预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件</span></span><br><span class="line">  <span class="attr">CDN:</span><span class="comment"># 搜索文件的 CDN 地址（默认使用的本地链接）</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.jianshu.com/p/ad0d8cb0bb29">Hexo 高级设置</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】07-多终端同步</title>
      <link href="/tutorial/Hexo-07-multi-device-synchronize/"/>
      <url>/tutorial/Hexo-07-multi-device-synchronize/</url>
      
        <content type="html"><![CDATA[<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="PC1"><a href="#PC1" class="headerlink" title="PC1"></a>PC1</h2><ul><li><p><code>hexo</code>博客主要撰写的机器，即已经按照<a href="/tutorial/Hexo-01-build-the-blog/" title="【Hexo】01-搭建个人博客">【Hexo】01-搭建个人博客</a>完成基本环境配置，能够正常发布文章</p></li><li><p>找到并删除<code>hexo</code>文件夹中所有的<code>.git</code>文件夹（如主题文件会有<code>.git</code>文件夹）</p></li><li><p>远程仓库</p><ul><li>在<code>Github</code>创建远程仓库，考虑私密性可以设为私有</li></ul></li><li><p>本地文件夹（hexo文件夹）</p><ul><li><p>初始化仓库：<code>git init</code></p></li><li><p>编写<code>.gitignore</code>文件，参考如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li><li><p>关联远程仓库：<code>git remote add origin &lt;远程项目地址&gt;</code></p></li><li><p>添加文件到<code>缓冲区</code>：<code>git add .</code></p></li><li><p>添加文件到<code>仓库</code>：<code>git commit -m &quot;初始化项目&quot;</code></p></li><li><p>推送远程：<code>git push origin master</code></p></li></ul></li></ul><h2 id="PC2"><a href="#PC2" class="headerlink" title="PC2"></a>PC2</h2><ul><li>安装基础环境：<code>hexo</code>，<code>git</code>和<code>nodejs</code>，尽量保持版本一致，详见<a href="/tutorial/Hexo-01-build-the-blog/" title="【Hexo】01-搭建个人博客">【Hexo】01-搭建个人博客</a></li><li>克隆远程仓库：<code>git clone &lt;远程项目地址&gt;</code></li><li><font color="red">安装必要的插件</font>：<code>npm install</code><ul><li><code>npm install</code>命令会把X包安装到node_modules目录中，不会修改package.json，之后运行npm install命令时，不会自动安装X</li><li>如果没有这一步，如博客加密插件在本地测试时就会失效</li></ul></li><li>本地测试：<code>hexo g &amp;&amp; hexo s</code></li></ul><h1 id="日常同步"><a href="#日常同步" class="headerlink" title="日常同步"></a>日常同步</h1><ul><li>每次发生更改前：<code>git pull</code></li><li><font color="red">非必须但必要</font>：如果安装了新的插件，则需要<code>npm install</code>，否则没必要这一步</li><li>日常推送，见<a href="/tools/The-trick-of-git/" title="Git使用说明">Git使用说明</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/weixin_38254969/article/details/108323699">hexo博客多终端同步</a></li><li><a href="https://www.jianshu.com/p/937bda9123da">Hexo博客在多台终端同步管理</a></li><li><a href="https://baijiahao.baidu.com/s?id=1726819337007281373&wfr=spider&for=pc">npm install是什么命令</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 多终端 </tag>
            
            <tag> 同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站搭建（Windows及Linux）</title>
      <link href="/tutorial/how-to-build-a-website/"/>
      <url>/tutorial/how-to-build-a-website/</url>
      
        <content type="html"><![CDATA[<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ul><li><input checked disabled type="checkbox"> 将Apache和Nginx单独变成文档</li></ul><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul><li>Windows<ul><li>ISS，C#</li></ul></li><li>Linux<ul><li>LAMP（狭义）：Linux，Apache，MySQL，PHP</li><li>LNMP（狭义）：Linux，Nginx，MySQL，PHP</li><li>Apache + Nginx</li></ul></li></ul><h1 id="ISS（待完成）"><a href="#ISS（待完成）" class="headerlink" title="ISS（待完成）"></a>ISS（待完成）</h1><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><ul><li>可见<a href="/tools/The-trick-of-apache/" title="Apache使用说明">Apache使用说明</a></li></ul><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><ul><li>可见<a href="/tools/The-trick-of-nginx/" title="Nginx使用说明">Nginx使用说明</a></li></ul><h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><h2 id="Windows-ISS（待完成）"><a href="#Windows-ISS（待完成）" class="headerlink" title="Windows + ISS（待完成）"></a>Windows + ISS（待完成）</h2><ul><li>18机器网站</li></ul><h2 id="Linux-Apache（待完成）"><a href="#Linux-Apache（待完成）" class="headerlink" title="Linux + Apache（待完成）"></a>Linux + Apache（待完成）</h2><h2 id="Linux-Nginx"><a href="#Linux-Nginx" class="headerlink" title="Linux + Nginx"></a>Linux + Nginx</h2><ul><li>可见<a href="/tutorial/Linux-bt-thinkphp/" title="【Linux】宝塔 + thinkphp">【Linux】宝塔 + thinkphp</a></li></ul><h2 id="Linux-Apache-Nginx"><a href="#Linux-Apache-Nginx" class="headerlink" title="Linux + Apache + Nginx"></a>Linux + Apache + Nginx</h2><ul><li>55机器做法：Apache2 + Nginx</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有的会用apache去跑php，然后用nginx做反向代理，比如apache运行在8080端口，nginx在80端口，访问php文件时，反向代理到apache，静态页通过nginx处理。nginx支持高并发，apache对php的运行比较稳定</span><br></pre></td></tr></table></figure></blockquote><ul><li>两者默认都监听<code>80</code>端口，需要配置其中一个监听其他端口</li><li>然后在<code>Nginx</code>中使用端口转发到<code>Apache</code>服务</li></ul><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><ul><li>可见<a href="/tutorial/Hexo-06-hexo-with-custom-domain/" title="【Hexo】06-绑定私有域名">【Hexo】06-绑定私有域名</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.cyberciti.biz/faq/find-out-apache-version/">How To Find Out Apache Version Using Command</a></li><li><a href="https://www.cyberciti.biz/faq/unix-linux-bsd-display-nginx-version/">How To Find Out Nginx Version using command line</a></li><li><a href="https://httpd.apache.org/docs/current/">Apache HTTP 服务器 2.4 文档</a></li><li><a href="https://askubuntu.com/questions/248404/is-there-any-difference-between-apache2-and-httpd">Is there any difference between apache2 and httpd?</a></li><li><a href="http://www.differencebetween.info/difference-between-apache-and-apache-two">Difference between Apache and Apache 2</a></li><li><a href="https://httpd.apache.org/docs/2.0/upgrading.html">Upgrading to 2.0 from 1.3</a></li><li><a href="https://jingyan.baidu.com/article/6c67b1d6c978f16687bb1e90.html">iis配置端口号详细步骤</a></li><li><a href="https://www.656463.com/wenda/keyitongshizhuangapachehenginxme_58">可以同时装apache和nginx么</a></li><li><a href="https://zhuanlan.zhihu.com/p/447708937">关于Nginx与Apache共存的解决方法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Apache </tag>
            
            <tag> Nginx </tag>
            
            <tag> Windows </tag>
            
            <tag> 网站 </tag>
            
            <tag> ISS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】宝塔 + thinkphp</title>
      <link href="/tutorial/Linux-bt-thinkphp/"/>
      <url>/tutorial/Linux-bt-thinkphp/</url>
      
        <content type="html"><![CDATA[<h1 id="宝塔安装"><a href="#宝塔安装" class="headerlink" title="宝塔安装"></a>宝塔安装</h1><ol><li><p>安装命令，本次安装环境<code>Ubuntu 20.04</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">国内版需注册</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos安装命令：</span></span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu/Deepin安装命令：</span></span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian安装命令：</span></span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Fedora安装命令:</span></span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载命令</span></span><br><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh &amp;&amp; bash bt-uninstall.sh</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-bt-thinkphp/3XLFO2AIR%60%60O%25W2HA3K01IJ.png" alt="img"></p></li><li><p>安装成功，如下，保存相关信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==================================================================</span><br><span class="line">Congratulations! Installed successfully!</span><br><span class="line">==================================================================</span><br><span class="line">外网面板地址: http://202.xxx:8888/aaa</span><br><span class="line">内网面板地址: http://192.xxx:8888/aaa</span><br><span class="line">username: bbb</span><br><span class="line">password: ccc</span><br><span class="line">If you cannot access the panel,</span><br><span class="line">release the following panel port [8888] in the security group</span><br><span class="line">若无法访问面板，请检查防火墙/安全组是否有放行面板[8888]端口</span><br><span class="line">==================================================================</span><br><span class="line">Time consumed: 10 Minute!</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-bt-thinkphp/image-20221201211334870.png" alt="image-20221201211334870"></p></li><li><p>如果对应的端口没有开放，无法访问，使用下面的命令开放，<font color="red">来自参考2，未尝试</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加开放的端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=端口号/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>在浏览器输入外网&#x2F;内网地址，即可见到如下界面，使用用户名和密码进行登录，<font color="red">在内网Windows机器下，使用内网面板地址可用</font>，即宝塔搭建的IP为<code>192.168.31.1</code>时，我在<code>192.168.31.100</code>浏览器中输入<code>192.168.31.1:8888</code>能够访问到</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221201212004800.png" alt="image-20221201212004800"></p></li><li><p>进入后，同意许可协议，需拉到最下面才能同意</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221201212251026.png" alt="image-20221201212251026"></p></li><li><p>注册使用，<font color="red">目前没找到好用的绕过注册的方法，屈服</font></p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221201212333807.png" alt="image-20221201212333807"></p><ul><li>注册好后，自动调转到如下<a href="https://www.bt.cn/admin/servers#wcu">界面</a></li></ul><p><img src="/tutorial/Linux-bt-thinkphp/image-20221202155649080.png" alt="image-20221202155649080"></p></li><li><p>回到宝塔面板，绑定账号后，默认跳出以下界面，本例选择安装<code>LNMP</code>（都按照默认选择来的，有其他需求可更改）</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221202155945825.png" alt="image-20221202155945825"></p><ul><li><p>点击<strong>一键安装</strong>后，出现如下安装界面，等待安装完成即可，<font color="red">时间很久，去搞会别的</font></p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221202160101537.png" alt="image-20221202160101537"></p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221202163359966.png" alt="image-20221202163359966"></p></li></ul></li><li><p>至此，宝塔面板安装完成</p></li></ol><h1 id="thinkphp项目部署"><a href="#thinkphp项目部署" class="headerlink" title="thinkphp项目部署"></a>thinkphp项目部署</h1><h2 id="项目上传"><a href="#项目上传" class="headerlink" title="项目上传"></a>项目上传</h2><ol><li><p>选择文件上传位置，本例选择上传到<code>根目录/www/wwwroot</code>下，可自定义</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204164250865.png" alt="image-20221204164250865"></p></li><li><p>导入<code>thinkphp</code>项目压缩包，以<a href="https://gitee.com/xany/bestshop-php">萤火小程序商城</a>为例</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204165353629.png" alt="image-20221204165353629"></p></li><li><p>解压压缩包，选择解压路径，<font color="red">如果解压到不存在的路径，会失败，因此解压到特定文件夹前，确保已经创建好</font>，注意压缩包里面有没有一个整文件夹，如果没有需要自己创建一个，否则就会将很多文件放在当前目录下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204165532794.png" alt="image-20221204165532794"></p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204165833420.png" alt="image-20221204165833420"></p></li><li><p>解压完成后，如下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204165841657.png" alt="image-20221204165841657"></p></li></ol><h2 id="创建站点及数据库"><a href="#创建站点及数据库" class="headerlink" title="创建站点及数据库"></a>创建站点及数据库</h2><ol><li>创建站点</li></ol><p>   <img src="/tutorial/Linux-bt-thinkphp/image-20221204170120892.png" alt="image-20221204170120892"></p><ul><li>点击网站添加站点，填写本地域名就可以，根目录就是项目的目录</li><li>数据库和其他选择，按照需要进行添加即可</li></ul><ol start="2"><li><p>点击确认后，出现以下内容</p><ul><li><p>错误内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] open() &quot;/www/server/nginx/conf/enable-php.conf&quot; failed (2: No such file or directory) in /www/server/nginx/conf/nginx.conf:76</span><br><span class="line">nginx: configuration file /www/server/nginx/conf/nginx.conf test failed</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204170230471.png" alt="image-20221204170230471"></p></li><li><p>解决</p><ul><li><p>根据提示查看是否有<code>/www/server/nginx/conf/enable-php.conf</code>，发现并没有这个文件</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204172059949.png" alt="image-20221204172059949"></p></li><li><p>再根据提示找到<code>/www/server/nginx/conf/nginx.conf:76</code></p></li><li><p>修改<code>/www/server/nginx/conf/nginx.conf</code>，将76行修改为77行，即默认是<code>include enable-php.conf</code>，修改为<code>include enable-php-74.conf</code></p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204172141992.png" alt="image-20221204172141992"></p></li><li><p>再次尝试，成功</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204172239751.png" alt="image-20221204172239751"></p></li><li><p>此时不做任何设置，直接访问，如下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204172334460.png" alt="image-20221204172334460"></p></li></ul></li></ul></li><li><p>创建数据库</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204172709755.png" alt="image-20221204172709755"></p></li><li><p>完成后，如下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204172813640.png" alt="image-20221204172813640"></p></li><li><p>导入数据，<a href="https://gitee.com/xany/bestshop-php">萤火小程序商城</a>数据库文件位于<code>doc/database/install.sql</code>，等待导入即可</p></li></ol><p>   <img src="/tutorial/Linux-bt-thinkphp/image-20221204173149418.png" alt="image-20221204173149418"></p><p>   <img src="/tutorial/Linux-bt-thinkphp/image-20221204173246746.png" alt="image-20221204173246746"></p><ol start="6"><li><p>修改配置文件<code>source/application/database.php</code>，即下图红框内容修改为<a href="#%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93">创建站点及数据库步骤3</a>相应内容</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204195513895.png" alt="image-20221204195513895"></p></li><li><p>设置网站运行目录为 web</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204200001355.png" alt="image-20221204200001355"></p></li><li><p>访问项目地址：<code>http://你的域名/index.php?s=store/passport/login</code>，<font color="red">项目地址根据实际而定</font>，也可能是<code>http://你的域名/index.php/aaa/bbb/ccc.html</code>之类的。如下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204200221012.png" alt="image-20221204200221012"></p><ul><li><p>网站安装<code>php 7.3</code>，并在<code>网站</code>修改站点的php版本为7.3</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204201337898.png" alt="image-20221204201337898"></p></li><li><p>再次访问，成功，默认账号密码为：admin和yinghuo</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204201305322.png" alt="image-20221204201305322"></p></li></ul></li><li><p>登陆成功界面</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221204201450650.png" alt="image-20221204201450650"></p></li></ol><h1 id="不同端口对应不同网站"><a href="#不同端口对应不同网站" class="headerlink" title="不同端口对应不同网站"></a>不同端口对应不同网站</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p>想在本地服务器下搭建多个站点，用不同端口标识不同网站，但是总会遇到<strong>您添加的站点已存在</strong>这个现象</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205205218720.png" alt="image-20221205205218720"></p></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li><p>在<code>添加站点</code>时，随意输入一个域名，如<code>test1.com</code>（之前没用过的就行），提交后正常创建</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205205351977.png" alt="image-20221205205351977"></p></li></ul><ol start="2"><li><p>配置刚添加的网站</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205205514142.png" alt="image-20221205205514142"></p></li><li><p>添加一个新的域名</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205205700843.png" alt="image-20221205205700843"></p></li><li><p>删除<code>test1.com</code></p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205205730746.png" alt="image-20221205205730746"></p></li><li><p>再次用<code>域名 + 端口</code>访问，如下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205205813419.png" alt="image-20221205205813419"></p></li><li><p>由于第二次添加的是<a href="https://gitee.com/xany/bestshop-php">萤火小程序商城</a>，按照<a href="#%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93">创建站点及数据库</a>做好相应配置后，访问登陆页面如下</p><p><img src="/tutorial/Linux-bt-thinkphp/image-20221205210008926.png" alt="image-20221205210008926"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.bt.cn/bbs/thread-79460-1-1.html">官方安装文档</a></li><li><a href="http://e.betheme.net/article/show-82691.html?action=onClick">Windows的Linux子系统（ubuntu 20.04）中安装宝塔面板</a></li><li><a href="http://www.yaotu.net/biancheng/50430.html">安装宝塔面板（详细教程）</a></li><li><a href="https://blog.csdn.net/github_35856054/article/details/118765635">无效：绕过宝塔面板强制登录注册的方法，宝塔不想注册的可以收藏</a></li><li><a href="https://blog.csdn.net/weixin_51964175/article/details/121161931">宝塔面板安装部署ThinkPhP项目（lnmp环境）全网最详细</a></li><li><a href="https://www.kancloud.cn/manual/thinkphp5">ThinkPHP5.0完全开发手册</a></li><li><a href="https://blog.csdn.net/qq_37363320/article/details/125966445">请求报错：Array and string offset access syntax with curly braces is deprecated</a></li><li><a href="https://blog.csdn.net/qq_43554674/article/details/127750034">宝塔面板如何用一IP不同端口创建不同的网站(“您添加的站点已存在”)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> Nginx </tag>
            
            <tag> PHP </tag>
            
            <tag> thinkphp </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh使用说明</title>
      <link href="/tools/The-trick-of-ssh/"/>
      <url>/tools/The-trick-of-ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>查看是否已经安装<code>openssh</code>：<code>dpkg -l | grep openssh</code></p><ul><li><p>如果有以下内容安装成功，直接进行<a href="#%E6%B5%8B%E8%AF%95">测试</a></p><p><img src="/tools/The-trick-of-ssh/image-20221201170108092.png" alt="image-20221201170108092"></p></li><li><p>如果没有任何输出，需要进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update# 更新软件列表</span><br><span class="line">sudo apt install openssh-client # 安装SSH客户端</span><br><span class="line">sudo apt install openssh-server # 安装SSH服务器</span><br><span class="line">sudo systemctl start sshd# 启动</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看状态：<code>sudo systemctl status sshd</code></p><p><img src="/tools/The-trick-of-ssh/image-20221201170625923.png" alt="image-20221201170625923"></p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>假设A主机ip为<code>192.168.31.1</code>，用户名为<code>a</code>，B主机ip为<code>192.168.31.2</code>，用户名为<code>b</code></li><li>在A主机远程连接B主机：<code>ssh b@192.168.31.2</code>，即可成功登录</li></ul><h1 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h1><ol><li><p>查看是否已经安装<code>dpkg -l | grep xrdp</code>，如未安装，则安装：<code>sudo apt install -y xrdp </code>，安装成功如下</p><p><img src="/tools/The-trick-of-ssh/image-20221201170358869.png" alt="image-20221201170358869"></p></li><li><p>查看状态：<code>sudo systemctl status xrdp</code>，如未启动，则使用<code>sudo systemctl start xrdp</code>启动服务</p><ul><li><p>未启动</p><p><img src="/tools/The-trick-of-ssh/image-20221201170703330.png" alt="image-20221201170703330"></p></li><li><p>启动</p><p><img src="/tools/The-trick-of-ssh/image-20221201170813907.png" alt="image-20221201170813907"></p></li></ul></li><li><p>在windows底部的搜索栏输入远程桌面连接，进行连接</p></li></ol><h1 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h1><ol><li><p>假设A主机ip为<code>192.168.31.1</code>，用户名为<code>a</code>，B主机ip为<code>192.168.31.2</code>，用户名为<code>b</code>，以下实现主机 A 登录主机 B 操作，如果需要双向登录，对于主机 B 需要做类似操作</p></li><li><p>主机 A 执行命令: <code>ssh-keygen -t ed25519 -C &quot;Host A&quot;</code>，在 <code>~/.ssh</code>下生成公私钥，假设为<code>id_ed25519</code> 和 <code>id_ed25519.pub</code></p><ul><li><code>-t</code>指定加解密算法，默认为&#96;RSA&#96;&#96;</li><li>&#96;&#96;-C&#96;指定注释</li></ul></li><li><p>将公钥复制到主机B中</p><ul><li>方法一: <code>ssh-copy-id -i ~/.ssh/id_ed25519 b@192.168.31.2</code></li><li>方法二: 将 <code>~/.ssh/id_ed25519.pub</code>中内容直接拷贝到主机B中 <code>~/.ssh/authorized_keys</code>中</li></ul></li><li><p>在主机 A 执行 <code>ssh b@192.168.31.2</code>，首次登录需输入 <code>yes</code>，后续则直接免密登录</p></li><li><p>如果在 步骤一 中，设置了 <code>passphrase</code>，则配置免密登录后，仍需要输入 <code>passphrase</code>，可用 <code>ssh-agent</code> 简化操作，即当前终端输入一次 <code>passphrase</code>后，后续连接无须再次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.bashrc 或 ~/.zshrc 中加入以下内容</span></span><br><span class="line">alias ssha=&#x27;eval $(ssh-agent) &amp;&amp; ssh-add&#x27;</span><br></pre></td></tr></table></figure></li></ol><h1 id="config文件（未完成）"><a href="#config文件（未完成）" class="headerlink" title="config文件（未完成）"></a>config文件（未完成）</h1><h1 id="known-hosts文件"><a href="#known-hosts文件" class="headerlink" title="known_hosts文件"></a>known_hosts文件</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p><code>known_hosts</code> 文件<strong>存储用户访问的主机的公钥</strong>。它通过将用户的身份保存到本地系统来确保用户连接到合法的服务器。这也有助于避免中间人攻击</p><p><img src="/tools/The-trick-of-ssh/1c80c140-4fc8-11ed-a3b6-dac502259ad0.png" alt="1c80c140-4fc8-11ed-a3b6-dac502259ad0.png"></p></li><li><p>当你通过SSH连接到一个新的远程服务器时，系统会提示你是否要将远程主机添加到 known_hosts 文件，选择 yes，服务器的连接信息会保存在你的系统中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The authenTIcity of host &#x27;194.195.118.85 (194.195.118.85)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:wF2qILJg7VbqEE4/zWmyMTSwy3ja7be1jTIg3WzmpeE.</span><br><span class="line">This key is not known by any other names</span><br><span class="line">Are you sure you want to conTInue connecTIng (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure></li><li><p>如果远程服务器的公钥发生了更改，你的系统会根据 known_hosts 文件中存储的信息记录此次更改，你也会收到此更改的通知</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@ WARNING: POSSIBLE DNS SPOOFING DETECTED!</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">The RSA host key for xyz remote host has changed,and the key for the corresponding IP address xxx.yy.xxx.yy is unknown. This could either mean that DNS SPOOFING is happening or the IP address for the host and its host key have changed at the same time.</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that the RSA host key has just been changed.</span><br><span class="line">The fingerprint for the RSA key sent by the remote host is</span><br><span class="line">69bb6ae307b441d8:9c.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /home/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending key in /home/.ssh/known_hosts:1</span><br><span class="line">Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>获取远程系统详细信息：<code>ssh-keygen -l -F [主机名或IP地址]</code></p></li><li><p>删除信息：<code>ssh-keygen -R [主机名或IP地址]</code>，此时会生成一个<code>known_hosts.old</code>文件</p><ul><li>如远程机器重装后，公钥发送改变，用之前的ssh就会认为是中间人不安全，不能继续ssh</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.ssh.com/">ssh官网</a></li><li><a href="https://en.wikipedia.org/wiki/Secure_Shell">wikipedia: Secure Shell</a></li><li><a href="https://blog.csdn.net/m0_50679156/article/details/124892300">远程ssh连接和远程桌面连接</a></li><li><a href="https://www.elecfans.com/emb/202210201908054.html">Linux系统SSH中的known_hosts文件是什么</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP、域名和DNS</title>
      <link href="/network/ip-domain-dns/"/>
      <url>/network/ip-domain-dns/</url>
      
        <content type="html"><![CDATA[<h1 id="概述（待完成）"><a href="#概述（待完成）" class="headerlink" title="概述（待完成）"></a>概述（待完成）</h1><h1 id="一个域名对应多个IP"><a href="#一个域名对应多个IP" class="headerlink" title="一个域名对应多个IP"></a>一个域名对应多个IP</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>每次域名请求时DNS会根据<strong>负载均衡算法</strong>返回不同的ip地址</p></li><li><p>负载均衡之DNS解析原理图</p><p><img src="/network/ip-domain-dns/1122279-20211228151938510-394538857.png" alt="img"></p><center><a href="https://www.cnblogs.com/yang5726685/p/15740760.html">（图片来源）</a></center></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><strong>DNS 解析时多添加几个不同IP的A记录</strong></li></ul><h1 id="一个IP对应多个域名"><a href="#一个IP对应多个域名" class="headerlink" title="一个IP对应多个域名"></a>一个IP对应多个域名</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><ul><li>不同域名对应不同的网站空间，能通过<strong>不同域名</strong>访问位于<strong>同一台机器（即IP相同）</strong>上的<strong>不同网站</strong></li><li>据<a href="https://superuser.com/questions/577070/is-it-possible-for-many-domain-names-to-share-one-ip-address">参考2</a>，直接在浏览器输入<code>IP</code>不能得到网址，这个还没测试，不过<font color="red">应该是IP + 端口即可实现域名的功能</font></li></ul><h2 id="实现（待完成）"><a href="#实现（待完成）" class="headerlink" title="实现（待完成）"></a>实现（待完成）</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.cnblogs.com/yang5726685/p/15740760.html">一个域名如何解析到多个ip地址</a></li><li><a href="https://superuser.com/questions/577070/is-it-possible-for-many-domain-names-to-share-one-ip-address">Is it possible for many domain names to share one IP address?</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP </tag>
            
            <tag> 域名 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现简易网页倒计时</title>
      <link href="/other/countdown/"/>
      <url>/other/countdown/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><ul><li>实现倒计时类的功能，记录过期时间</li><li><font color="red">注意：把代码放入md文档时，删除多余的空行，否则看起来格式错乱</font>，<strong>未特殊说明，均为实现中最后一个版本</strong></li></ul><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li><input checked disabled type="checkbox"> 倒计时</li><li><input checked disabled type="checkbox"> 标签id与中文对应</li><li><input checked disabled type="checkbox"> 批量新增</li><li><input checked disabled type="checkbox"> 少于3天即标红</li><li><input checked disabled type="checkbox"> 配合加密插件使用</li><li><input checked disabled type="checkbox"> 批量增加<code>div</code>标签</li><li><input checked disabled type="checkbox"> 汇总需要修改的变量（统一位置方便修改）</li><li><input disabled type="checkbox"> 自动发送邮件</li><li><input disabled type="checkbox"> 解决版本七和版本八bug</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h2><ul><li>简易实现版本，能在页面展示倒计时</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js简单时分秒倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">do_countTime</span>(<span class="string">&#x27;_n&#x27;</span>, <span class="string">&#x27;2022/12/1 00:00:00&#x27;</span>, <span class="string">&#x27;_d&#x27;</span>, <span class="string">&#x27;_h&#x27;</span>, <span class="string">&#x27;_m&#x27;</span>, <span class="string">&#x27;_s&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">do_countTime</span>(<span class="string">&#x27;_n2&#x27;</span>, <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>, <span class="string">&#x27;_d2&#x27;</span>, <span class="string">&#x27;_h2&#x27;</span>, <span class="string">&#x27;_m2&#x27;</span>, <span class="string">&#x27;_s2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">nn, endDate, dd, hh, mm, ss</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str= endDate;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end-now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d,h,m,s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime&gt;=<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>%<span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime/<span class="number">1000</span>/<span class="number">60</span>%<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime/<span class="number">1000</span>%<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(nn).<span class="property">innerHTML</span> = nn+<span class="string">&quot;:&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(dd).<span class="property">innerHTML</span> = d+<span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hh).<span class="property">innerHTML</span> = h+<span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(mm).<span class="property">innerHTML</span> = m+<span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ss).<span class="property">innerHTML</span> = s+<span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;/head &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;countTime()&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h2><ul><li>实现标签中文名，不便于新增</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> id2name = <span class="keyword">new</span> <span class="title class_">Map</span>([</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n1&#x27;</span>, <span class="string">&#x27;考试&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n2&#x27;</span>, <span class="string">&#x27;放假&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        ]);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> list_map = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript">        list_map.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;_n1&#x27;</span>, <span class="attr">endDate</span>: <span class="string">&#x27;2022/12/1 00:00:00&#x27;</span>, <span class="attr">day</span>: <span class="string">&#x27;_d1&#x27;</span>, <span class="attr">hour</span>: <span class="string">&#x27;_h1&#x27;</span>, <span class="attr">min</span>: <span class="string">&#x27;_m1&#x27;</span>, <span class="attr">sec</span>: <span class="string">&#x27;_s1&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        list_map.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;_n2&#x27;</span>, <span class="attr">endDate</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>, <span class="attr">day</span>: <span class="string">&#x27;_d2&#x27;</span>, <span class="attr">hour</span>: <span class="string">&#x27;_h2&#x27;</span>, <span class="attr">min</span>: <span class="string">&#x27;_m2&#x27;</span>, <span class="attr">sec</span>: <span class="string">&#x27;_s2&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list_map.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(list_map[i].<span class="property">name</span>, list_map[i].<span class="property">endDate</span>, list_map[i].<span class="property">day</span>, list_map[i].<span class="property">hour</span>, list_map[i].<span class="property">min</span>, list_map[i].<span class="property">sec</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">nn, endDate, dd, hh, mm, ss</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = endDate;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(nn).<span class="property">innerHTML</span> = id2name.<span class="title function_">get</span>(nn) + <span class="string">&quot;: &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(dd).<span class="property">innerHTML</span> = d + <span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hh).<span class="property">innerHTML</span> = h + <span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(mm).<span class="property">innerHTML</span> = m + <span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ss).<span class="property">innerHTML</span> = s + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;countTime()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s2&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本三"><a href="#版本三" class="headerlink" title="版本三"></a>版本三</h2><ul><li>统一命名规则，使用<code>map</code>存储数据，使用<code>for-loop</code>新增元素，尽可能减少改动的地方</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> total = <span class="keyword">new</span> <span class="title class_">Map</span>([</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n0&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;考试&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2022/12/1 00:00:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n1&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;放假&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">        ]);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> totalSiz = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> list_map = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalSiz; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        list_map.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;_n&#x27;</span> + i, <span class="attr">day</span>: <span class="string">&#x27;_d&#x27;</span> + i, <span class="attr">hour</span>: <span class="string">&#x27;_h&#x27;</span> + i, <span class="attr">min</span>: <span class="string">&#x27;_m&#x27;</span> + i, <span class="attr">sec</span>: <span class="string">&#x27;_s&#x27;</span> + i &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list_map.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(list_map[i].<span class="property">name</span>, list_map[i].<span class="property">day</span>, list_map[i].<span class="property">hour</span>, list_map[i].<span class="property">min</span>, list_map[i].<span class="property">sec</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">nn, dd, hh, mm, ss</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = total.<span class="title function_">get</span>(nn).<span class="property">date</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(nn).<span class="property">innerHTML</span> = total.<span class="title function_">get</span>(nn).<span class="property">name</span> + <span class="string">&quot;: &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(dd).<span class="property">innerHTML</span> = d + <span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hh).<span class="property">innerHTML</span> = h + <span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(mm).<span class="property">innerHTML</span> = m + <span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ss).<span class="property">innerHTML</span> = s + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;countTime()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本四"><a href="#版本四" class="headerlink" title="版本四"></a>版本四</h2><ul><li>解决<code>map</code>获取长度问题</li><li>设置当时间<strong>小于3天</strong>，字体颜色变红</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> total = <span class="keyword">new</span> <span class="title class_">Map</span>([</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n0&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;考试&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2022/11/28 16:56:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n1&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;放假&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">        ]);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> totalSiz = total.<span class="property">size</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> list_map = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalSiz; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        list_map.<span class="title function_">push</span>(&#123;<span class="attr">dcolor</span>: <span class="string">&#x27;_c&#x27;</span> + i, <span class="attr">name</span>: <span class="string">&#x27;_n&#x27;</span> + i, <span class="attr">day</span>: <span class="string">&#x27;_d&#x27;</span> + i, <span class="attr">hour</span>: <span class="string">&#x27;_h&#x27;</span> + i, <span class="attr">min</span>: <span class="string">&#x27;_m&#x27;</span> + i, <span class="attr">sec</span>: <span class="string">&#x27;_s&#x27;</span> + i &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list_map.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(list_map[i].<span class="property">dcolor</span>, list_map[i].<span class="property">name</span>, list_map[i].<span class="property">day</span>, list_map[i].<span class="property">hour</span>, list_map[i].<span class="property">min</span>, list_map[i].<span class="property">sec</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">cc, nn, dd, hh, mm, ss</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = total.<span class="title function_">get</span>(nn).<span class="property">date</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 其他属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = total.<span class="title function_">get</span>(nn).<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(nn).<span class="property">innerHTML</span> = name + <span class="string">&quot;: &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(dd).<span class="property">innerHTML</span> = d + <span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hh).<span class="property">innerHTML</span> = h + <span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(mm).<span class="property">innerHTML</span> = m + <span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ss).<span class="property">innerHTML</span> = s + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 时间少于三天，标红</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (d &lt; <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cc).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;countTime()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_c0&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_c1&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本五"><a href="#版本五" class="headerlink" title="版本五"></a>版本五</h2><ul><li><font color="red">之前版本不能搭配加密插件hexo-blog-encrypt使用</font>，此版本修复</li><li>曲线救国，通过添加一个按钮，触发<code>onclick</code>事件，从而实现<code>js脚本</code>加载</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#_hidediv</span>&#123;<span class="attribute">display</span>: none;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.499</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.015</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.015</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">645</span>, .<span class="number">045</span>, .<span class="number">355</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">645</span>, .<span class="number">045</span>, .<span class="number">355</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            -webkit-user-select: none;</span></span><br><span class="line"><span class="language-css">            -moz-user-select: none;</span></span><br><span class="line"><span class="language-css">            -ms-user-select: none;</span></span><br><span class="line"><span class="language-css">            user-select: none;</span></span><br><span class="line"><span class="language-css">            -ms-touch-action: manipulation;</span></span><br><span class="line"><span class="language-css">            touch-action: manipulation;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.65</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#d9d9d9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ant-btn-red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#FF5A44</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#FF5A44</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.045</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.045</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 预处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> total = <span class="keyword">new</span> <span class="title class_">Map</span>([</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n0&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;考试&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2022/11/28 16:56:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n1&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;放假&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">        ]);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> totalSiz = total.<span class="property">size</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> list_map = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalSiz; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        list_map.<span class="title function_">push</span>(&#123;<span class="attr">dcolor</span>: <span class="string">&#x27;_c&#x27;</span> + i, <span class="attr">name</span>: <span class="string">&#x27;_n&#x27;</span> + i, <span class="attr">day</span>: <span class="string">&#x27;_d&#x27;</span> + i, <span class="attr">hour</span>: <span class="string">&#x27;_h&#x27;</span> + i, <span class="attr">min</span>: <span class="string">&#x27;_m&#x27;</span> + i, <span class="attr">sec</span>: <span class="string">&#x27;_s&#x27;</span> + i &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 展开标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;_hidediv&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;_bt&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">countTime</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 倒计时脚本</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list_map.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(list_map[i].<span class="property">dcolor</span>, list_map[i].<span class="property">name</span>, list_map[i].<span class="property">day</span>, list_map[i].<span class="property">hour</span>, list_map[i].<span class="property">min</span>, list_map[i].<span class="property">sec</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">cc, nn, dd, hh, mm, ss</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = total.<span class="title function_">get</span>(nn).<span class="property">date</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 其他属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = total.<span class="title function_">get</span>(nn).<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(nn).<span class="property">innerHTML</span> = name + <span class="string">&quot;: &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(dd).<span class="property">innerHTML</span> = d + <span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hh).<span class="property">innerHTML</span> = h + <span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(mm).<span class="property">innerHTML</span> = m + <span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ss).<span class="property">innerHTML</span> = s + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 时间少于三天，标红</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (d &lt; <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cc).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;_bt&#x27;</span>, <span class="attr">onclick</span>=<span class="string">&#x27;run()&#x27;</span>, <span class="attr">class</span>=<span class="string">&#x27;ant-btn ant-btn-red&#x27;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;_hidediv&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_c0&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_c1&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本六"><a href="#版本六" class="headerlink" title="版本六"></a>版本六</h2><ul><li><p>修改倒计时归零产生的<code>undefined</code>输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#_hidediv</span>&#123;<span class="attribute">display</span>: none;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.499</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.015</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.015</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">645</span>, .<span class="number">045</span>, .<span class="number">355</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">645</span>, .<span class="number">045</span>, .<span class="number">355</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            -webkit-user-select: none;</span></span><br><span class="line"><span class="language-css">            -moz-user-select: none;</span></span><br><span class="line"><span class="language-css">            -ms-user-select: none;</span></span><br><span class="line"><span class="language-css">            user-select: none;</span></span><br><span class="line"><span class="language-css">            -ms-touch-action: manipulation;</span></span><br><span class="line"><span class="language-css">            touch-action: manipulation;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.65</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#d9d9d9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ant-btn-red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#FF5A44</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#FF5A44</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.045</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.045</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 预处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> total = <span class="keyword">new</span> <span class="title class_">Map</span>([</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n0&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;考试&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2022/11/28 16:56:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;_n1&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;放假&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">        ]);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> totalSiz = total.<span class="property">size</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> list_map = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalSiz; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        list_map.<span class="title function_">push</span>(&#123;<span class="attr">dcolor</span>: <span class="string">&#x27;_c&#x27;</span> + i, <span class="attr">name</span>: <span class="string">&#x27;_n&#x27;</span> + i, <span class="attr">day</span>: <span class="string">&#x27;_d&#x27;</span> + i, <span class="attr">hour</span>: <span class="string">&#x27;_h&#x27;</span> + i, <span class="attr">min</span>: <span class="string">&#x27;_m&#x27;</span> + i, <span class="attr">sec</span>: <span class="string">&#x27;_s&#x27;</span> + i &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 展开标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;_hidediv&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;_bt&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">countTime</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 倒计时脚本</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list_map.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(list_map[i].<span class="property">dcolor</span>, list_map[i].<span class="property">name</span>, list_map[i].<span class="property">day</span>, list_map[i].<span class="property">hour</span>, list_map[i].<span class="property">min</span>, list_map[i].<span class="property">sec</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">cc, nn, dd, hh, mm, ss</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = total.<span class="title function_">get</span>(nn).<span class="property">date</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 其他属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = total.<span class="title function_">get</span>(nn).<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                h = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                m = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                s = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(nn).<span class="property">innerHTML</span> = name + <span class="string">&quot;: &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(dd).<span class="property">innerHTML</span> = d + <span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hh).<span class="property">innerHTML</span> = h + <span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(mm).<span class="property">innerHTML</span> = m + <span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ss).<span class="property">innerHTML</span> = s + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 时间少于三天，标红</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (d &lt; <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cc).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;_bt&#x27;</span>, <span class="attr">onclick</span>=<span class="string">&#x27;run()&#x27;</span>, <span class="attr">class</span>=<span class="string">&#x27;ant-btn ant-btn-red&#x27;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;_hidediv&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_c0&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s0&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_c1&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_n1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_d1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_m1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;_s1&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="版本七"><a href="#版本七" class="headerlink" title="版本七"></a>版本七</h2><ul><li><p>实现根据输入参数批量增加<code>div</code>和<code>span</code>标签</p></li><li><p>重复性操作使用循环替代</p></li><li><p>目前只需要修改<code>total</code>即可完成更新</p></li><li><p><font color="red">目前存在的问题</font>：需要输入密码才能显示<code>show</code>按钮时，点击<code>show</code>无法查看结果，需要主动刷新一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#_hidediv</span>&#123;<span class="attribute">display</span>: none;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.499</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.015</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.015</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">645</span>, .<span class="number">045</span>, .<span class="number">355</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">645</span>, .<span class="number">045</span>, .<span class="number">355</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            -webkit-user-select: none;</span></span><br><span class="line"><span class="language-css">            -moz-user-select: none;</span></span><br><span class="line"><span class="language-css">            -ms-user-select: none;</span></span><br><span class="line"><span class="language-css">            user-select: none;</span></span><br><span class="line"><span class="language-css">            -ms-touch-action: manipulation;</span></span><br><span class="line"><span class="language-css">            touch-action: manipulation;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.65</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#d9d9d9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ant-btn-red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#FF5A44</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#FF5A44</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.045</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.045</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 预处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 只需要修改这个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> total = [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;考试&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2022/11/28 16:56:00&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;放假&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 只需要修改这个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> totalSiz = total.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 待生成div标签的数量及span标签数量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> divSize = totalSiz;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> spanSize = <span class="number">5</span>; </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// span时间标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> labels = [</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;: &quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;时&quot;</span>, <span class="string">&quot;分&quot;</span>, <span class="string">&quot;秒&quot;</span></span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取要添加div标签的父元素   </span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> parentElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;_hidediv&quot;</span>); </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 循环生成div标签并添加到父元素中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divSize; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                newDiv.<span class="property">id</span> = <span class="string">&quot;_d&quot;</span> + i;</span></span><br><span class="line"><span class="language-javascript">                parentElement.<span class="title function_">appendChild</span>(newDiv);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; spanSize; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> newSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    newSpan.<span class="property">id</span> = <span class="string">&quot;_s&quot;</span> + <span class="string">&quot;_&quot;</span> + i + <span class="string">&quot;_&quot;</span> + j;</span></span><br><span class="line"><span class="language-javascript">                    newSpan.<span class="property">textContent</span> = <span class="string">&quot;00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    newDiv.<span class="title function_">appendChild</span>(newSpan);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 展开标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;_hidediv&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;_bt&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">countTime</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 倒计时脚本</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalSiz; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(i);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">idx</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = total[idx].<span class="property">date</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 其他属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = total[idx].<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                h = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                m = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                s = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> resTime = [name, d, h, m, s]</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> cc = <span class="string">&quot;_d&quot;</span> + idx;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; spanSize; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> cId = <span class="string">&quot;_s&quot;</span> + <span class="string">&quot;_&quot;</span> + idx + <span class="string">&quot;_&quot;</span> + i;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cId).<span class="property">innerHTML</span> = resTime[i] + labels[i];                </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 时间少于三天，标红</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (d &lt; <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cc).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加密插件的缘故，暂时采用button方案 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;_bt&#x27;</span>, <span class="attr">onclick</span>=<span class="string">&#x27;run()&#x27;</span>, <span class="attr">class</span>=<span class="string">&#x27;ant-btn ant-btn-red&#x27;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_hidediv&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="版本八"><a href="#版本八" class="headerlink" title="版本八"></a>版本八</h2><ul><li><p>去除<code>button</code>使用，任可使用</p></li><li><p><font color="red">目前存在的问题</font>：仍然需要主动刷新才会显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 预处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 只需要修改这个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> total = [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;考试&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2022/11/28 16:56:00&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;放假&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2023/7/17 00:00:00&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 只需要修改这个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> totalSiz = total.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 待生成div标签的数量及span标签数量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> divSize = totalSiz;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> spanSize = <span class="number">5</span>; </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// span时间标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> labels = [</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;: &quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;时&quot;</span>, <span class="string">&quot;分&quot;</span>, <span class="string">&quot;秒&quot;</span></span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取要添加div标签的父元素   </span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> parentElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;_hidediv&quot;</span>); </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 循环生成div标签并添加到父元素中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divSize; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                newDiv.<span class="property">id</span> = <span class="string">&quot;_d&quot;</span> + i;</span></span><br><span class="line"><span class="language-javascript">                parentElement.<span class="title function_">appendChild</span>(newDiv);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; spanSize; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> newSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    newSpan.<span class="property">id</span> = <span class="string">&quot;_s&quot;</span> + <span class="string">&quot;_&quot;</span> + i + <span class="string">&quot;_&quot;</span> + j;</span></span><br><span class="line"><span class="language-javascript">                    newSpan.<span class="property">textContent</span> = <span class="string">&quot;00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    newDiv.<span class="title function_">appendChild</span>(newSpan);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">countTime</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 倒计时脚本</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalSiz; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">do_countTime</span>(i);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归每秒调用countTime方法，显示动态时间效果 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(countTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">do_countTime</span>(<span class="params">idx</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置截止时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = total[idx].<span class="property">date</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> end = endDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 其他属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = total[idx].<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间差</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> leftTime = end - now;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> d, h, m, s;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                d = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                h = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                m = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                s = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> resTime = [name, d, h, m, s]</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将倒计时赋值到div中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> cc = <span class="string">&quot;_d&quot;</span> + idx;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; spanSize; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> cId = <span class="string">&quot;_s&quot;</span> + <span class="string">&quot;_&quot;</span> + idx + <span class="string">&quot;_&quot;</span> + i;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cId).<span class="property">innerHTML</span> = resTime[i] + labels[i];                </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 时间少于三天，标红</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (d &lt; <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(cc).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;_hidediv&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.cnblogs.com/-wenli/p/13083858.html">JS倒计时两种种实现方式</a></li><li><a href="https://www.shuzhiduo.com/A/amd0mBW2zg/">js 创建List<Map> 这种格式的集合</Map></a></li><li><a href="https://www.cnblogs.com/sws-kevin/p/16385126.html">JS Map对象与map方法</a></li><li><a href="https://blog.csdn.net/feichangwurao/article/details/88716824">小程序系列：onLoad，onReady和onShow等生命周期函数的区别和使用</a></li><li><a href="https://www.php.cn/js-tutorial-473589.html">javascript如何显示和隐藏div</a></li><li><a href="https://www.jianshu.com/p/c793fc0a5413">html5 好看的input&#x2F;button样式</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 倒计时 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【力扣】面试题17.18.最短超串</title>
      <link href="/algorithm/lc-shortest-supersequence-lcci/"/>
      <url>/algorithm/lc-shortest-supersequence-lcci/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="/algorithm/lc-shortest-supersequence-lcci/image-20221125203733786.png" alt="image-20221125203733786"></p><ul><li><a href="https://leetcode.cn/problems/shortest-supersequence-lcci/">原题链接</a></li><li>同类型题<ul><li><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></li></ul></li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="双指针-hash表"><a href="#双指针-hash表" class="headerlink" title="双指针 + hash表"></a>双指针 + hash表</h2><ul><li>要求一个范围符合要求的答案，可以优先想到<strong>双指针</strong></li><li>又需要一个包含的要求（长数组包含短数组所有元素），所以需要用<strong>hash表来计数</strong></li><li><code>cnt</code>代表<code>[i, j]</code>区间中符合要求的元素个数，当<code>cnt == small.size()</code>时<ul><li>长数组已经包含了短数组所有的元素</li><li>但此时<strong>可能存在一些不需要的元素</strong>，所以要缩小左边界，直到找到符合要求的最短</li></ul></li><li>双指针也可以看成是<strong>滑动窗口</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">shortestSeq</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; big, vector&lt;<span class="type">int</span>&gt;&amp; small)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashS;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : small) ++hashS[v];</span><br><span class="line">        <span class="type">int</span> n = big.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">-1</span>, right = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashB;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> cur = big[j];</span><br><span class="line">            hashB[cur]++;</span><br><span class="line">            <span class="keyword">if</span> (hashB[cur] &lt;= hashS[cur]) cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt == small.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; hashB[big[i]] &gt; hashS[big[i]]) &#123;</span><br><span class="line">                    hashB[big[i]]--;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; &quot;, j = &quot; &lt;&lt; j &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">if</span> (left == <span class="number">-1</span> || (right - left) &gt; (j - i)) &#123;</span><br><span class="line">                    left = i;</span><br><span class="line">                    right = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">-1</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;left, right&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 双指针 + hash表</span></span><br></pre></td></tr></table></figure><p><img src="/algorithm/lc-shortest-supersequence-lcci/image-20221125203615258.png" alt="image-20221125203615258"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】01-基础命令</title>
      <link href="/database/mysql-01-basic-command/"/>
      <url>/database/mysql-01-basic-command/</url>
      
        <content type="html"><![CDATA[<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure></li><li><p>查看已有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><ul><li><p>插入一条新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [ <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> [ , … <span class="operator">&lt;</span>列名n<span class="operator">&gt;</span>] ] <span class="keyword">VALUES</span> (值<span class="number">1</span>) [… , (值n) ];</span><br></pre></td></tr></table></figure></li><li><p>插入一条新数据（指定某些列，其余为默认值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>值<span class="number">1</span><span class="operator">&gt;</span>,</span><br><span class="line">    <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>值<span class="number">2</span><span class="operator">&gt;</span>,</span><br><span class="line">     …</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名称</span><br></pre></td></tr></table></figure></li></ul><h1 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h1><h2 id="导入xxx-sql"><a href="#导入xxx-sql" class="headerlink" title="导入xxx.sql"></a>导入<code>xxx.sql</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 登入MySQL后</span><br><span class="line"># 查看已有的数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 创建一个新的数据库，如bl</span><br><span class="line">create database bl;</span><br><span class="line"></span><br><span class="line"># 使用创建的数据库</span><br><span class="line">use bl;</span><br><span class="line"></span><br><span class="line"># 导入数据库，注意用绝对路径：如果报错无法打开，可能是sql文件权限不够，用chmod 777 xxx.sql修改权限</span><br><span class="line">source [sql路径]</span><br><span class="line"></span><br><span class="line"># 查看已有的表</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="/database/mysql-01-basic-command/image-20221125150228663.png" alt="image-20221125150228663"></p><h1 id="字符集设置"><a href="#字符集设置" class="headerlink" title="字符集设置"></a>字符集设置</h1><h2 id="修改默认字符集"><a href="#修改默认字符集" class="headerlink" title="修改默认字符集"></a>修改默认字符集</h2><ul><li><p>默认字符集通常是<code>latin1</code>，对中文支持不友好，因此设置为<code>UTF8MB4</code></p></li><li><p>步骤如下（以<a href="/tutorial/Linux-install-MySQL-in-Linux/" title="【Linux】MySQL安装">【Linux】MySQL安装</a>中<strong>命令行安装</strong>路径为例，其余修改对应的配置文件即可）</p><ol><li><p>修改<code>/etc/mysql/my.cnf</code>为以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">collation_server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure></li><li><p>重启 <code>mysql</code> 服务：<code>sudo service mysql restart</code></p><ul><li>注：如果启动失败，使用<code>ps aux | grep mysql</code>查看现有的进程并杀掉</li></ul></li><li><p>进入<code>mysql</code>后，查看现有字符集：<code>SHOW VARIABLES LIKE &#39;character_set%&#39;;</code></p><p><img src="/database/mysql-01-basic-command/image-20230827155329647.png" alt="image-20230827155329647"></p></li></ol></li></ul><h2 id="修改已有数据库-数据表字符集"><a href="#修改已有数据库-数据表字符集" class="headerlink" title="修改已有数据库&#x2F;数据表字符集"></a>修改已有数据库&#x2F;数据表字符集</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 修改数据库的字符集</span><br><span class="line">ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line">-- 修改表的字符集</span><br><span class="line">ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.jb51.net/article/254317.htm">mysql查看表结构的三种方法总结</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【力扣】面试题17.22.单词转换</title>
      <link href="/algorithm/lc-word-transformer-lcci/"/>
      <url>/algorithm/lc-word-transformer-lcci/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="/algorithm/lc-word-transformer-lcci/image-20221124193303858.png" alt="image-20221124193303858"></p><ul><li><a href="https://leetcode.cn/problems/word-transformer-lcci/">原题链接</a></li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><ul><li>题目要求要到一条路径从<code>beginWord</code>到<code>endWord</code>，且路径单词需在<code>wordList</code>中</li><li><strong>经典DFS</strong>题目，即枚举下一个可能的单词，直到找到正确答案即返回</li><li>用<code>unordered_set</code>来记录遍历过的单词<ul><li>防止重复遍历</li><li>只需要加入，不需要弹出，因为一旦有某个单词无法继续推进，后续用到此单词的情况也不可能继续推进</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(string&amp; s, string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != word[i]) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(string&amp; beginWord, string&amp; endWord, vector&lt;string&gt;&amp; wordList, unordered_set&lt;string&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(beginWord);</span><br><span class="line">        visited.<span class="built_in">insert</span>(beginWord);</span><br><span class="line">        <span class="keyword">if</span> (beginWord == endWord) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从beginword出发，枚举后面可能的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : wordList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">count</span>(s)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 查找哪一个是和我们当前的begunword只有一字之差</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(s, beginWord)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(s, endWord, wordList, visited)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findLadders</span><span class="params">(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; visited;</span><br><span class="line">        <span class="built_in">dfs</span>(beginWord, endWord, wordList, visited);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/algorithm/lc-word-transformer-lcci/image-20221124194114689.png" alt="image-20221124194114689"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><img src="/algorithm/lc-word-transformer-lcci/image-20221124194144682.png" alt="image-20221124194144682"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 面试题 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【力扣】面试题17.23.最大黑方阵</title>
      <link href="/algorithm/lc-max-black-square-lcci/"/>
      <url>/algorithm/lc-max-black-square-lcci/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="/algorithm/lc-max-black-square-lcci/image-20221123200508883.png" alt="image-20221123200508883"></p><ul><li><a href="https://leetcode.cn/problems/max-black-square-lcci/">原题链接</a></li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="预处理数组"><a href="#预处理数组" class="headerlink" title="预处理数组"></a>预处理数组</h2><ul><li><p>由于只需要求<strong>边全为0</strong>的情况，所以可以用两个数组来分别存某个坐标连续0的长度</p><ul><li>right: 表示从当前点开始，往右最长连续0的数量</li><li>down: 表示从当前点开始，往下最长连续0的数量</li></ul></li><li><p>有了这两个数组之后，之后只需要枚举可能的长度即可</p></li><li><p>即通过固定<strong>左上角坐标</strong>来查看<strong>右上角坐标down数组的值rs</strong>和<strong>左下角坐标right数组的值ds</strong></p></li><li><p><font color="red">需要特别注意边界情况的考虑</font></p><ul><li><p>比如<code>rs</code>和<code>ds</code>需要求一个小值（因为是正方形，多求无意义且可能越界），且遇到不满足的情况应该跳过，否则将错过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// case 1</span><br><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br><span class="line">    </span><br><span class="line">// case 2</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 0 1 1 1</span><br><span class="line">0 1 1 1 0</span><br><span class="line">1 1 1 1 1</span><br></pre></td></tr></table></figure></li><li><p>坐标求法：在长度基础上减一（代码中<code>rj</code>和<code>di</code>）</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">right</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            right[i][n - <span class="number">1</span>] = matrix[i][n - <span class="number">1</span>] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                right[i][j] = matrix[i][j] == <span class="number">0</span> ? <span class="number">1</span> + right[i][j + <span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">down</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            down[m - <span class="number">1</span>][j] = matrix[m - <span class="number">1</span>][j] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                down[i][j] = matrix[i][j] == <span class="number">0</span> ? <span class="number">1</span> + down[i + <span class="number">1</span>][j] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="comment">// 固定左上角，尝试不同长度的右上和左下是否达标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> r = right[i][j];</span><br><span class="line">                <span class="type">int</span> d = down[i][j];</span><br><span class="line">                <span class="type">int</span> siz = <span class="built_in">min</span>(r, d);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">1</span>; s &lt;= siz; s++) &#123;</span><br><span class="line">                    <span class="type">int</span> ri = i, rj = j + s - <span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span> rs = down[ri][rj];</span><br><span class="line">                    <span class="type">int</span> di = i + s - <span class="number">1</span>, dj = j;</span><br><span class="line">                    <span class="type">int</span> ds = right[di][dj];</span><br><span class="line">                    <span class="comment">// break 换 continue</span></span><br><span class="line">                    <span class="comment">// 跳过此次比较，长度更长的还是有可能的</span></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; s || ds &lt; s) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="built_in">empty</span>() || res[<span class="number">2</span>] &lt; s) &#123;</span><br><span class="line">                        res = &#123;i, j, s&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/algorithm/lc-max-black-square-lcci/image-20221123201533286.png" alt="image-20221123201533286"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】06-绑定私有域名</title>
      <link href="/tutorial/Hexo-06-hexo-with-custom-domain/"/>
      <url>/tutorial/Hexo-06-hexo-with-custom-domain/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5e155bcc971bf56d90dc0f2523f7b6aad15c45dcefe7c7f1f7faf3756c662496"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">please enter the password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> hexo </tag>
            
            <tag> 加密 </tag>
            
            <tag> Cloudflare </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【力扣】891.子序列宽度之和</title>
      <link href="/algorithm/lc-897-sum-of-subsequence-widths/"/>
      <url>/algorithm/lc-897-sum-of-subsequence-widths/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="/algorithm/lc-897-sum-of-subsequence-widths/image-20221118141403898.png" alt="image-20221118141403898"></p><ul><li><a href="https://leetcode.cn/problems/sum-of-subsequence-widths/">原题链接</a></li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="朴素思路（超时）"><a href="#朴素思路（超时）" class="headerlink" title="朴素思路（超时）"></a>朴素思路（超时）</h2><ul><li>通过回溯找到所有可能性，然后求解</li><li>套用回溯模板求解</li><li><font color="red">此题范围过大，肯定超时</font></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; total;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            total.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="built_in">process</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubseqWidths</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">process</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; path : total) &#123;</span><br><span class="line">            <span class="type">int</span> mi = path[<span class="number">0</span>], mx = path[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : path) &#123;</span><br><span class="line">                mi = <span class="built_in">min</span>(mi, v);</span><br><span class="line">                mx = <span class="built_in">max</span>(mx, v);</span><br><span class="line">            &#125;</span><br><span class="line">            res += (mx - mi);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><ul><li><p>考虑到<strong>宽度的定义为序列中最大值和最小值的差值</strong>，因此可以考虑每个数字对于最终结果的贡献</p><ul><li>当数字作为最大值时，为正向贡献</li><li>当数字作为最小值时，为负向贡献</li><li>只需要计算出有多少种可能性即可</li></ul></li><li><p>既然<strong>只需要关心数组nums中数字的大小而不需要关心它所在的位置</strong>了，所以先排序，方便进行计算可能性</p><p><img src="/algorithm/lc-897-sum-of-subsequence-widths/1668734560-rIhRDo-image.png" alt="image.png"></p></li><li><p>排序之后，我们随便找一个下标为<code>i</code>的元素，可以找到以下规律</p><ul><li>作为最大值：因为除下标为$i$的元素必选外，其余元素共$i$个（0和1），每个位置有两种可能性（选或者不选），因此结果为$2^i$</li><li>作为最大值：因为除下标为$i$的元素必选外，其余元素$n - i - 1$（3,4,6,7），每个位置有两种可能性（选或者不选），因此结果为$2^{n - i - 1}$</li></ul><p><img src="/algorithm/lc-897-sum-of-subsequence-widths/image-20221118142024185.png" alt="image-20221118142024185"></p><ul><li><p>以<code>nums[i]</code>和<code>其左侧所有元素</code>拼装组合成的<strong>子序列</strong>示例：</p><p><img src="/algorithm/lc-897-sum-of-subsequence-widths/1668734575-NuDBPx-image.png" alt="image.png"></p></li></ul></li><li><p>最终贡献即为两者之和</p></li><li><p><font color="red">以上图片来自参考1</font></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubseqWidths</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 预存2的幂次</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pow2</span><span class="params">(n)</span></span>;</span><br><span class="line">        pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) pow2[i] = pow2[i - <span class="number">1</span>] * <span class="number">2</span> % MOD;</span><br><span class="line">        <span class="comment">// long防止溢出</span></span><br><span class="line">        <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res += <span class="built_in">long</span> (pow2[i] - pow2[n - <span class="number">1</span> - i]) * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 减法，可能有负数，消除负数影响</span></span><br><span class="line">        <span class="keyword">return</span> (res % MOD + MOD) % MOD; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/algorithm/lc-897-sum-of-subsequence-widths/image-20221118143545813.png" alt="image-20221118143545813"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://leetcode.cn/problems/sum-of-subsequence-widths/solution/by-muse-77-f6s5/">【爪哇缪斯】图解LeetCode</a></li><li><a href="https://leetcode.cn/problems/sum-of-subsequence-widths/solution/by-endlesscheng-upd1/">计算每个元素对答案的贡献，多解法（Python&#x2F;Java&#x2F;C++&#x2F;Go）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go】02-逃逸分析(escape analysis)——未完</title>
      <link href="/codeLang/Go-02-escape-analysis/"/>
      <url>/codeLang/Go-02-escape-analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h2><ul><li>函数返回<code>局部变量</code>：在C&#x2F;C++中，一个函数可以直接返回函数中定义的局部变量，这里返回的是<strong>局部变量的副本（拷贝）</strong>。因为局部变量是分配在<code>栈空间</code>，因此在函数返回后，局部变量是被系统自动回收的，</li><li>函数返回<code>局部变量地址</code>：局部变量内存分配在栈空间，因为函数返回后，系统自动回收了函数里定义的局部变量，所以运行时去访问一个被系统回收后的地址空间，一定就会发生段错误，这是C&#x2F;C++语言的特点。内存空间分配在<code>堆空间</code>中即可</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">fun</span>();</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">// segment fault</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><ul><li>不同于C&#x2F;C++，Go中函数内部局部变量，无论是动态new出来的变量还是创建的局部变量，它被分配在堆还是栈，是由<strong>编译器</strong>做<code>逃逸分析(Escape Analysis)</code>之后做出的决定</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun</span><span class="params">()</span></span> *<span class="type">int</span> &#123; </span><br><span class="line">    tmp := <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> &amp;tmp      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line">    p = fun()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d&quot;</span>, *p) <span class="comment">//这里不会像C/C++，报错段错误提示，而是成功返回变量V的值1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Go内存分配"><a href="#Go内存分配" class="headerlink" title="Go内存分配"></a>Go内存分配</h1><h2 id="堆空间"><a href="#堆空间" class="headerlink" title="堆空间"></a>堆空间</h2><ul><li>全局堆空间用来<strong>动态</strong>分配内存；堆区的内存一般由<strong>编译器和工程师</strong>自己共同进行管理分配，交给 <code>Runtime GC</code> 来释放</li><li>堆上分配必须找到一块足够大的内存来存放新的变量数据；后续释放时，垃圾回收器扫描堆空间寻找不再被使用的对象</li></ul><h2 id="栈空间"><a href="#栈空间" class="headerlink" title="栈空间"></a>栈空间</h2><ul><li>每个 <code>goroutine</code> 都有的自身栈空间</li><li>栈区的内存一般由<strong>编译器</strong>自动进行分配和释放，其中存储着函数的入参以及局部变量，这些参数会随着函数的创建而创建，函数的返回而销毁（即 CPU push &amp; release</li></ul><h2 id="分配规则"><a href="#分配规则" class="headerlink" title="分配规则"></a>分配规则</h2><ul><li><p><strong>由编译器做逃逸分析决定</strong></p></li><li><p><a href="https://golang.google.cn/doc/faq#stack_or_heap">Go: Frequently Asked Questions (FAQ) </a></p><blockquote><p>How do I know whether a variable is allocated on the heap or the stack?</p><p>From a correctness standpoint, you don’t need to know. Each variable in Go exists as long as there are references to it. The storage location chosen by the implementation is irrelevant to the semantics of the language.</p><p>The storage location does have an effect on writing efficient programs. When possible, the Go compilers will allocate variables that are local to a function in that function’s stack frame. However, if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the garbage-collected heap to avoid dangling pointer errors. Also, if a local variable is very large, it might make more sense to store it on the heap rather than the stack.</p><p>In the current compilers, if a variable has its address taken, that variable is a candidate for allocation on the heap. However, a basic escape analysis recognizes some cases when such variables will not live past the return from the function and can reside on the stack.</p></blockquote></li></ul><h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><strong>编译器</strong>决定内存分配位置的方式，就称之为<code>逃逸分析(escape analysis)</code>。逃逸分析由编译器完成，作用于<strong>编译阶段</strong></li><li>引起内存逃逸的关键：<strong>编译器在编译的时候无法确定确定变量的生命周期，只能在运行时控制了</strong></li><li>在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针；再往简单的说，Go是通过在编译器里做逃逸分析（escape analysis）来决定一个对象放栈上还是放堆上，<strong>不逃逸的对象放栈上，可能逃逸的放堆上</strong><ul><li>发现<code>变量</code>在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配和回收比堆上快很多</li><li>函数内的普通变量经过<code>逃逸分析</code>后，发现在函数退出后<code>变量</code>还有在其他地方上引用，那就将<code>变量</code>分配在堆上。做到按需分配</li></ul></li></ul><h2 id="为什么需要逃逸分析"><a href="#为什么需要逃逸分析" class="headerlink" title="为什么需要逃逸分析"></a>为什么需要逃逸分析</h2><ul><li>减少 <code>GC</code> 压力，栈上的变量，随着函数退出后系统直接回收，不需要 <code>GC</code> 标记后再清除</li><li>减少内存碎片的产生</li><li>减轻分配堆内存的开销，提高程序的运行速度</li></ul><h2 id="查看对象是否发生逃逸"><a href="#查看对象是否发生逃逸" class="headerlink" title="查看对象是否发生逃逸"></a>查看对象是否发生逃逸</h2><ul><li><p>在<code>Go</code>中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go build也可以</span></span><br><span class="line"><span class="keyword">go</span> run -gcflags <span class="string">&#x27;-m -l&#x27;</span> main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><ul><li><code>-m</code> 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 <code>-m</code>，但是信息量较大，一般用 1 个就可以了</li><li><code>-l</code> 会禁用函数内联，在这里禁用掉<code>内联</code>能更好的观察逃逸情况，减少干扰</li></ul></li><li><p>示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun</span><span class="params">()</span></span> *<span class="type">int</span> &#123; </span><br><span class="line">    tmp := <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> &amp;tmp      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">val := <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line">    p = fun()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d&quot;</span>, *p)</span><br><span class="line">t := fun2()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d&quot;</span>, t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line"><span class="comment">./main.go:5:6: can inline fun</span></span><br><span class="line"><span class="comment">./main.go:10:6: can inline fun2</span></span><br><span class="line"><span class="comment">./main.go:17:12: inlining call to fun</span></span><br><span class="line"><span class="comment">./main.go:18:15: inlining call to fmt.Printf</span></span><br><span class="line"><span class="comment">./main.go:19:11: inlining call to fun2</span></span><br><span class="line"><span class="comment">./main.go:20:12: inlining call to fmt.Printf</span></span><br><span class="line"><span class="comment">./main.go:6:5: moved to heap: tmp</span></span><br><span class="line"><span class="comment">./main.go:18:15: ... argument does not escape</span></span><br><span class="line"><span class="comment">./main.go:18:22: *p escapes to heap</span></span><br><span class="line"><span class="comment">./main.go:20:12: ... argument does not escape</span></span><br><span class="line"><span class="comment">./main.go:20:13: t escapes to heap</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>其中<code>moved to heap: tmp</code>和<code>xxx escapes to heap</code>即发生逃逸，分配在堆上</li></ul></li></ul><h2 id="引发逃逸的情形"><a href="#引发逃逸的情形" class="headerlink" title="引发逃逸的情形"></a>引发逃逸的情形</h2><ul><li><p>总结：<strong>多级间接赋值容易导致逃逸</strong></p><ul><li><p>这里的多级间接指的是，<strong>对某个引用类对象中的引用类成员进行赋值</strong>。Go 语言中的引用类数据类型有 <code>func</code>, <code>interface</code>, <code>slice</code>, <code>map</code>, <code>chan</code>, <code>*Type(指针)</code></p></li><li><p>记住公式 <code>Data.Field = Value</code>，如果 Data, Field 都是引用类的数据类型，则会导致 Value 逃逸。这里的等号 &#x3D; 不单单只赋值，也表示参数传递</p></li><li><p>假设一个变量 <code>data</code> 是以下几种类型，相应的可得出结论</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[]interface&#123;&#125;: data[0] = 100 会导致 100 逃逸</span><br><span class="line">map[string]interface&#123;&#125;: data[&quot;key&quot;] = &quot;value&quot; 会导致 &quot;value&quot; 逃逸</span><br><span class="line">map[interface&#123;&#125;]interface&#123;&#125;: data[&quot;key&quot;] = &quot;value&quot; 会导致 key 和 value 都逃逸</span><br><span class="line">map[string][]string: data[&quot;key&quot;] = []string&#123;&quot;hello&quot;&#125; 会导致切片逃逸</span><br><span class="line">map[string]*int: 赋值时 *int 会 逃逸</span><br><span class="line">[]*int: data[0] = &amp;i 会使 i 逃逸</span><br><span class="line">func(*int): data(&amp;i) 会使 i 逃逸</span><br><span class="line">func([]string): data([]&#123;&quot;hello&quot;&#125;) 会使 []string&#123;&quot;hello&quot;&#125; 逃逸</span><br><span class="line">chan []string: data &lt;- []string&#123;&quot;hello&quot;&#125; 会使 []string&#123;&quot;hello&quot;&#125; 逃逸</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="内存逃逸的弊端"><a href="#内存逃逸的弊端" class="headerlink" title="内存逃逸的弊端"></a>内存逃逸的弊端</h2><ul><li><p>提问：函数传递指针真的比传值效率高吗？</p></li><li><p>我们知道传递指针可以减少底层值的拷贝，可以提高效率，但是如果<strong>拷贝的数据量小，由于指针传递会产生逃逸，可能会使用堆，也可能会增加GC的负担，所以传递指针不一定是高效的</strong></p></li></ul><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li><input disabled type="checkbox"> 编译器如何实现逃逸分析</li><li><input disabled type="checkbox"> 逃逸与否的性能比较</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.huati365.com/566e3dfac2847178">Go语言—函数返回局部变量地址</a></li><li><a href="https://www.jianshu.com/p/863e64d72dd0">golang笔记——Goroutine栈与逃逸分析</a></li><li><a href="https://www.cnblogs.com/chenpingzhao/p/16759575.html">【Golang】关于Go语言中逃逸分析 </a></li><li><a href="https://blog.csdn.net/qq_42849214/article/details/124478252">go 内存逃逸</a></li><li><a href="https://mojotv.cn/2019/07/21/golang-escape">Go 逃逸分析</a></li><li><a href="https://www.cnblogs.com/ling11/p/16318258.html">【详细】go内存逃逸</a></li></ol><h1 id="待看"><a href="#待看" class="headerlink" title="待看"></a>待看</h1><ol><li><a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html">Language Mechanics On Escape Analysis</a></li><li><a href="https://harveyli.me/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B1/">GO学习笔记之（一） Stack Or heap? 这是一个问题</a></li><li><a href="https://geektutu.com/post/hpg-escape-analysis.html">Go 逃逸分析</a></li><li><a href="https://www.sobyte.net/post/2021-12/golang-stack-management/">Stack memory and escape analysis in Go language</a></li><li><a href="https://medium.com/a-journey-with-go/go-introduction-to-the-escape-analysis-f7610174e890">Go: Introduction to the Escape Analysis</a></li><li><a href="https://blog.devgenius.io/in-depth-analysis-of-golang-memory-escape-edfbfb856913">Golang Memory Escape In-Depth Analysis</a></li><li><a href="https://mayurwadekar2.medium.com/escape-analysis-in-golang-ee40a1c064c1">Escape Analysis in Golang</a></li><li><a href="https://stackoverflow.com/questions/69259045/why-the-below-two-code-cause-escape-in-golang">why the below two code cause escape in golang</a></li><li><a href="https://www.qycn.com/xzx/article/7695.html">Golang的逃逸分析怎么实现，方法和操作是怎样</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】挂载新硬盘</title>
      <link href="/tutorial/Linux-mount-a-new-disk/"/>
      <url>/tutorial/Linux-mount-a-new-disk/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="disk-drive-and-UUID"><a href="#disk-drive-and-UUID" class="headerlink" title="disk, drive and UUID"></a>disk, drive and UUID</h2><ul><li><p>以下内容，均来自于<a href="https://unix.stackexchange.com/questions/64457/uuid-of-a-drive-that-wont-show-up-in-dev-disk-by-uuid-or-blkid">参考1</a>，整理格式，不翻译直接看</p></li><li><p>There are two colloquial uses of the term <code>disk</code> or <code>drive</code> in play here</p><ul><li>the first one refers to a <em>physical</em> device such as a usb stick. Device nodes like <code>/dev/sda</code> refer to the first sense (physical devices); </li><li>The second refers to <em>a filesystem partition</em>, of which there may be several on one physical device. Device nodes like <code>/dev/sda1</code> refer to the second (filesystem partitions). </li><li>sda1 is a filesystem partition on physical disk sda. It is possible to format an entire device with one partition, but that is unusual, so in general, <code>/dev/sda</code> will never have a UUID.</li></ul></li><li><p>Filesystem partitions have UUIDs, physical devices <strong>do not</strong>.</p></li><li><p>keep in mind the UUID is created <em>when the partition is formatted</em>. When you partition a disk (eg, with fdisk), you are not formatting anything, you are just setting the partition type (and size, etc) in the partition table, so the new unformatted partitions do not have a UUID.</p></li></ul><h2 id="查看UUID"><a href="#查看UUID" class="headerlink" title="查看UUID"></a>查看UUID</h2><ol><li><p><code>sudo blkid</code></p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114174202617.png" alt="image-20221114174202617"></p></li><li><p><code>lsblk -f</code></p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114174319688.png" alt="image-20221114174319688"></p></li><li><p><code>ll /dev/disk/by-uuid/</code></p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114174510025.png" alt="image-20221114174510025"></p></li></ol><h2 id="MBR-and-GPT"><a href="#MBR-and-GPT" class="headerlink" title="MBR and GPT"></a>MBR and GPT</h2><ul><li><code>MBR</code><ul><li>MBR分区表，即主引导记录</li><li>所支持的最大卷：2T，而且对分区有限制：最多4个主分区或3个主分区加一个扩展分区</li></ul></li><li><code>GPT</code><ul><li>GPT（即GUID分区表）</li><li>是源自EFI标准的一种较新的磁盘分区表结构的标准，是未来磁盘分区的主要形式</li><li>与MBR分区方式相比，具有如下优点<ul><li>突破MBR 4个主分区限制，每个磁盘最多支持128个分区</li><li>支持大于2T的分区，最大卷可达18EB</li></ul></li></ul></li><li>Linux中<code>fdisk</code>分区工具支持MBR分区，<code>parted</code>支持MBR和GPT分区表</li></ul><h2 id="fdisk常用命令"><a href="#fdisk常用命令" class="headerlink" title="fdisk常用命令"></a>fdisk常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">权限不够加sudo</span><br><span class="line">参数：</span><br><span class="line">      -v    打印 fdisk 的版本信息并退出．</span><br><span class="line">      -l    列出指定设备的分区表信息并退出。如果没有给出设备，那么使用那些在/proc/partitions （如果存在）提到的．</span><br><span class="line">      -u    以扇区数而不是以柱面数的形式显示分区表中各分区的信息．</span><br><span class="line">      -s 分区将分区的大小（单位为块）信息输出到标准输出</span><br></pre></td></tr></table></figure><h2 id="parted常用命令"><a href="#parted常用命令" class="headerlink" title="parted常用命令"></a>parted常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">权限不够加sudo</span><br><span class="line">参数：</span><br><span class="line">    -a --align alignment-type：为新创建的分区设置对齐方式</span><br><span class="line">    -h：显示帮助信息；</span><br><span class="line">    -i：交互式模式；</span><br><span class="line">    -s, --script：脚本模式，不提示用户；</span><br><span class="line">    -v, --version：显示版本号。</span><br><span class="line">    -l, --list  列出所有块设备上的分区布局。</span><br><span class="line">    -m, --machine 显示机器可解析的输出</span><br></pre></td></tr></table></figure><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>找到新加入的硬盘：<code>lsblk -f</code>，由于新硬盘没有<code>UUID</code>，所以可以通过查看是否存在<code>UUID</code>来进行定位，如此处添加的硬盘是<code>/dev/sdc</code></p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114174319688.png" alt="image-20221114174319688"></p></li><li><p>将新添加的硬盘分区：<code>sudo fdisk /dev/sdc</code>，图中红字因为磁盘太大有4T，因此需要先进行3，再添加分区</p><blockquote><p>当在linux中使用fdisk对大于2T的硬盘进行分区的时候，只能使用其中的2T，剩余的就无法分区挂载，可使用parted命令进行对2T以上硬盘进行分区: <a href="https://blog.csdn.net/u013378306/article/details/88360198">参考4</a></p></blockquote><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114175111917.png" alt="image-20221114175111917"></p></li><li><p>分区大硬盘：<code>sudo parted /dev/sdc</code></p><ul><li><p>如果提示不存在，则先进行安装<code>sudo apt-get install parted</code>，安装时如果出现下图红框错误，可以修改<code>/etc/apt/sources.list</code>，将<code>https</code>修改成<code>http</code>，然后执行<code>sudo apt update</code>，再次执行安装操作即可成功</p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114181816724.png" alt="image-20221114181816724"></p></li><li><p>设置分区类型为gpt：<code>mklabel gpt</code>（无事发生，可能是因为我的空白盘）和设置分区：<code>mkpart</code>，完成后<code>q</code>退出</p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114182753964.png" alt="image-20221114182753964"></p></li></ul></li><li><p>格式化分区：<code>sudo mkfs.ext4 -T largefile /dev/sdc</code></p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114183030394.png" alt="image-20221114183030394"></p></li><li><p>此时用<code>lsblk -f</code>，已经可以看到<code>UUID</code>了</p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114183244868.png" alt="image-20221114183244868"></p></li><li><p>挂载分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载点，我这里挂载到/home3下面</span></span><br><span class="line">sudo mkdir /home3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置自动挂载，sudo mount /dev/sdc /home3这种方式在重启后会取消挂载</span></span><br><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据格式添加内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;file system&gt; &lt;mount point&gt;   &lt;<span class="built_in">type</span>&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114183555773.png" alt="image-20221114183555773"></p></li><li><p>重新加载配置：<code>mount -a</code>，重新查看<code>lsblk</code>发现已经挂载成功</p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114202758275.png" alt="image-20221114202758275"></p></li><li><p><font color="red">卸载硬盘</font>：<code>umount /dev/sdc </code></p></li></ol><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><ol><li><p>超过2T的大硬盘使用<code>fdisk</code>进行分区，结果如下</p><p><img src="/tutorial/Linux-mount-a-new-disk/image-20221114175653976.png"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><p><a href="https://unix.stackexchange.com/questions/64457/uuid-of-a-drive-that-wont-show-up-in-dev-disk-by-uuid-or-blkid">UUID Of A drive that won’t show up in &#x2F;dev&#x2F;disk&#x2F;by-uuid or blkid</a></p></li><li><p><a href="https://blog.csdn.net/m0_73423426/article/details/126966461">Linux如何查看磁盘&#x2F;分区的UUID</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1813949?from=15425">linux 挂载新的硬盘</a></p></li><li><p><a href="https://blog.csdn.net/u013378306/article/details/88360198">2T以上硬盘分区的问题</a></p></li><li><p><a href="https://blog.51cto.com/woonli/1612850">Linux 硬盘分区</a></p></li><li><p><a href="https://commandnotfound.cn/linux/1/398/parted-%E5%91%BD%E4%BB%A4">parted 命令详解</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> 硬盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】05-博客加密</title>
      <link href="/tutorial/Hexo-05-hexo-blog-encrypt/"/>
      <url>/tutorial/Hexo-05-hexo-blog-encrypt/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="acf8b4f30a5671b1da5fba0047ca654a82b4ac28b239864d4c70b15b192138b2">165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f3333c2badb544bf426ebd9ead656001fbecb7b332d96cc74bd2da29c448b94ee3718231a8275de0e6066bdf0aec45b89bdd501ef755afaf83c1e7b97cbdad4e0391ff4ce199e97481256448cf34ff420c04866898faa6f3129030410d17c22a33839e554da2719fe52c1706a789d8a3141086bd4ae9c147e9f008a0d879580db98fe1d9dd6008fbfc9ef2c379770a8e50f313c20f32df91af9c165e84579d628b468aeb6329ea42fe232f07802cd1cbb0d7b36a11600d6ad0c5f56f0f9591e4ea33d52600b9ddc51dc0759e7cae2f06fb8266b3ef4859d1ce24750cf6a4e9f390b3de9f3f310ca1c38fe4ef2be565224baf561b4c26626b2b12d2bb9965f858c355824b9e5644cfa1ceb9bd4cba18fc0026b6ab94b3fb2e0d882b361f2ac871afe473a06844361567a5d745f897a4d74b762390819c3fb0a8f6c727863df1748d70c5a0f7a6acd392e3d8136481b889912820ca0e0f2ec31c1a48c7cf553d19927ad86a16a06640d9b7526d37e0ba35b73f64010dc792d93111b4db5f73cee85f8e121907469bf019c3f97540a1f225fa3a149c43d8ceea04da66ea5462f2b0bf71e3cf5087752e13164b83d0d053b644b7650336f662d67dcc4dfe94c5f4a88524ea205a0ace056cf2154a2196bee03bb9fdcbeb12b984da44186952e6575fabed83f61d0456f01d10ac0829e899f2a8346851f6813395ccd20830903f8dfa5974f748f29eedf7e0e4e35ad4162e10bdb9f314cfb6a19096f0f248b3a8f4e88eff5893543ff0abdf640ac7d1466292a695ebec1144c88f9334a4cef6ac5d6eb8a7ff269d9df72ab8db636ae5355146c89eb50268be98093bff3d6742eb9660f4ecfb6334427570a623b5ea35829146710fa77b89823f05005569423abc9db70c96d0d2a8411ec0d4d0c3eb6e082e595f24c61ffa06dd0c8c6bee19b02f6e466498d7e2545024bde1a17b7dfc02f5bea89cb47921c303b0cbe44b2aaf93511ff23421659d084932b85bcb02260668bfffe6f5dd54ddc7fbd8b6ca940b51417504259347a0746af4edc58051dbfb3d9572ae0c901684177bc9377758a9549f6b3612a9c1d79bd96e09865222b3d0fdda9b6a1789055ebe744eab04be7f860073c601290c9889a14b40418dcfafbae1d017988e2ad3a687d46fbc11e5dbfad348a12a47a9c28e28148fff1ad0c1b043c505aa93a51bfcc2b10bd58244bd78dd33003fab4ee2dd52b4409ab1413ea0d698647002d5aa8b4401c480c46e6690cb4c3a2204f7e8eb58c7e44689befe569890e9584f89b0425ce1122575b406172b857c2b63d0771465c40b6945e1574a0d5473e5c604f6c01df5b6caf4b506f915778eb847808971df35b94b12f64f45eed8d966176e37aca48145d9f31b8d93a7ecb5aff92dfb40bea076f7399ca78bf2610a6eb6fc716fb4dfe245f46f7d2bf414ed7d00ec621b946dd3efaefffb4c258249a26c63296e0197b020f13c59a0c772daea56195accfa46bad2d31d07d74afac55b0fd75693bdac93e9cf073f64d417cf81811590f72bd43cc89e3d0f1a3b9bf598a2fddf2f6de299733ce0e9ad519ad6eed4124d910c0aca2ef28e48890e809babe4683e86ef9c1a86d0e73fd176f105a426bd0cb4b24f60498ac0292570990aaf53bcb2a49b55dff8a175ebfc2477e98e715987d38e10e197bfa4354f5bed101ac773c468be3b1325f28a45b6753f526fb6569b65de2f662d9f844979bc374a940e89b7f5c8abae831af59d58c5898c15a62e921e3fc2b208f35321a37d717831eaee17cb337ed6a24f2149f69cd8a33c1ad6675b72cfc799da6aa1a3834fff704615b8ca4c7fa2e3c8fa487cfbb8a6643a3119a9e6414f0c29707cb62ef5121be5ccf4f235e9f1f72dad152c521342db349de9dd7cd8b3e9fb1349aa21408a70777848109187605a129ddf51a68ae04201ae93afb6b588953475651205c1f7c84f99228ce3de3d4329df33c0663dae3473d38e46f50d389f78dcb9d9bc35815991bb7e52df05210fd90bccc759f1a4c7453bc29615c816f46d8fbff0f793f747ddace4754280a6da91fee8c42e25f5112c37940dbe348c2513e4604ab38b02243bc7f7397f9fe7038823573e7640209f3188295b339bf0f3abe2af94bfb09d75739b56f52d47d0449ce093d69c211a263e733db440629c183c74b84b3e24218909c076d0270109f5d1ea7db362129614611d56fb3b38787abc0495dd80561630818d6270d2c9bbd2ccdb886727d36c705376951d572f92fbebd4483d0d065d80eaa6b00fe9af9d821d93cca05f733510a1d72108db092375b4b266f83610f1032b3f660771d53eb9e0edd335f46622feb90bd7dabbe4305e6617d6175949d34c6b58481c563c85b90b3207d862aae176941a1d2e309d9bc79080033721f28fe51ba7e48c8407a1c97e551a64fb657258ea50942147f93891ec20006f38e46433106ed6f848150971dc511f66ab1585fd15e30727cbae6db4cdf55050daf5f012d3e26456c810a50c7a3da4796b4c6b17c7ae5b446f3b02f45cc7a2c425137cc90ca6a70c3070e39ec1b33796a3428a67c853154974ce8d18d41f922947e3aff4c9fc006f0dc003d712aa6f3bdb6d5e5720ef19a6c8c1bb6941ef842837d555a0702558025ffff4f2230bf96994373ce167d4ff8a5283557330c6d14600b4e09af3b2cc840b61f9f0d9f2de642024d460b4c0a651ddc17ab94222b84e43ab111d86f96a52b8c9fae25581f5fed8ee09f0b0b3aa4e99a65da3c150525e1cc8c1421b59842f407aeab5b7ba9c0f3ab86a2e0b909bad0cc5fc323b499c79974353e2e248191521b4ea3efca608266afd1514f8f931eb3709baf7b6c0caf4f260e1733797c8185a033a01e8d553684d7ce6a975b00f3ea028906d40a4388a2109f520a2d1054ea78d593e67d96a5d99913ebf3eea8049c1c16f567fa4f767de01855b4765bd2821f7e2d2287a33939ccb730eec674c4b68bc9ba52f2cc3fb4cef43330a609b51c27c5b0f885651c591eb4ff6098bd456d80509fac2e74c765afb79160546647c33df1c5485ad380afb1b0dc5e691faeeea94adfaee682b9ca8a12460afcf1615da35a60a8ff8374f8899eb95196e91974aab3244aef24b3ced1a140da1f718a61021514ed4d1d33dd9aaca57998c3425ea0c95b48787bc5d8e2f8941c609de0132bc74ad5db43b2cdace2fb7ca8e49e1881df6144959456bc2370ac7c11bb86d6b1c101f9062040f5653cc0dd0c8ec542bf5a4853bfd500938a83c8d058af8dc73427e553ac2657319abd5f21906629541cf250e752ebebd5fb617240536132e33cb59bd2b209460719bb3342037add176efae84165f6996a590fee8ea97865297a366075ca51cd8dc0717417617a66004cf33fa467832045bd303c8fbe49f3cccfd74ab7d648ec00a6264066c89f09f5c57c4052c1c8d7c07fef6a7ca426e002c52332647d21ba65bc7dc8db0995e4b45fcd43c9986fc2a0f466465d9d220b75290782059608297cb8bf51ad540ba4773779e509c85287c60c12033a88051e1a72e3e4915867bf71f51a5193e9bfb5f157bd580e5f18e7b68d4ce73e6e84fd085b98cedfc4bd86d5e654c6ce2cdc7cedd73b3de8ae1b31e623084bb2faad2f5b22a8677fd04821ab41522cd4d57cb5127ae443c21715e17a36ce8e6759447374be31d13bed0e0b8e37f9746379b9037ddf18a159889bfe61cb73b1b945eec950bb6f465050ba83fc40d43c75a700e5efed2f2ed7c71802fdd06e72ff9e93043fb9bcc1429f62adaa67aa8f8a1da34167137ab65dd08263fd8096d5b439e6520bb8f8fa137848da2ba064f0e2d06cf1f2526f6649553692fa5c04a998a24ee58a56cc1e3d8eb8de9503960655</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入123查看内容</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Go安装</title>
      <link href="/tutorial/Linux-install-Go-in-Linux/"/>
      <url>/tutorial/Linux-install-Go-in-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><p>环境：Windows子系统WSL并安装zsh，原生Linux安装步骤类似</p><p><img src="/tutorial/Linux-install-Go-in-Linux/image-20221107102735527.png" alt="image-20221107102735527"></p></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>检查是否已经安装过Go，输入<code>go version</code>，如果出现以下类似内容，说明未安装过</p><p><img src="/tutorial/Linux-install-Go-in-Linux/image-20221107103230373.png" alt="image-20221107103230373"></p></li><li><p>去<a href="https://golang.google.cn/dl/">官网</a>下载需要的Go版本，此次安装版本为<code>1.19.3</code>，即下图中红框所示部分，可通过命令下载<code>wget https://golang.google.cn/dl/go1.19.3.linux-amd64.tar.gz</code></p><p><img src="/tutorial/Linux-install-Go-in-Linux/image-20221107103320681.png" alt="image-20221107103320681"></p></li><li><p>将压缩包解压到<code>/usr/local</code>下：<code>sudo tar -zxvf go1.19.3.linux-amd64.tar.gz -C /usr/local</code></p></li><li><p>将<code>/usr/local/go/bin</code>添加到环境变量中，由于本例用的是<code>zsh</code>，故修改的是<code>~/.zshrc</code>，如果是<code>bash</code>，则修改<code>~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br><span class="line"><span class="comment"># 在最后一行添加</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="comment"># 保存退出后，执行以下命令使其生效</span></span><br><span class="line"><span class="built_in">source</span>  ~/.zshrc</span><br></pre></td></tr></table></figure><p><img src="/tutorial/Linux-install-Go-in-Linux/image-20221107103922643.png" alt="image-20221107103922643"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/qq_44847649/article/details/123048329">linux安装go环境</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows】Go安装</title>
      <link href="/tutorial/Windows-install-Go-in-Windows/"/>
      <url>/tutorial/Windows-install-Go-in-Windows/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>以下演示为通过安装包安装，也可下载压缩版，解压缩再配置环境变量即可</p><blockquote><p>环境变量新增 GOROOT 和 GOPATH，GOROOT 为 go 解压缩路径，GOPATH 任意设置路径即可</p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>检查是否已经安装过Go，打开命令行（<code>Win + R</code>后输入<code>cmd</code>回车），运行<code>go version</code>，如果出现以下界面，说明未安装过</p><p><img src="/tutorial/Windows-install-Go-in-Windows/image-20221107095330539.png" alt="image-20221107095330539"></p></li><li><p>去<a href="https://golang.google.cn/dl/">官网</a>下载需要的Go版本，此次安装版本为<code>1.19.3</code>，即下图中红框所示部分</p><p><img src="/tutorial/Windows-install-Go-in-Windows/image-20221107095532201.png" alt="image-20221107095532201"></p></li><li><p>下载完成后，双击运行，出现以下界面，根据提示安装即可</p><p><img src="/tutorial/Windows-install-Go-in-Windows/image-20221107095945652.png" alt="image-20221107095945652"></p></li><li><p><strong>重新打开一个命令行</strong>，再次输入<code>go version</code>，可以看到，已经安装成功</p><p><img src="/tutorial/Windows-install-Go-in-Windows/image-20221107100341196.png" alt="image-20221107100341196"></p></li><li><p>设置国内代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新设置成七牛镜像源（推荐）或阿里镜像源（用原有的会比较慢）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认为 GOPROXY=https://proxy.golang.org,direct</span></span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭包的MD5校验</span></span><br><span class="line">go env -w GOSUMDB=off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看环境变量</span></span><br><span class="line">go env</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><p><a href="https://www.yshuq.com/?p=16083">如何在 WINDOWS 上安装 GO</a></p></li><li><p><a href="https://blog.x2b.net/4130112683/">Go 语言环境安装配置</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 安装 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go】01-基础概念</title>
      <link href="/codeLang/Go-01-basic-concept/"/>
      <url>/codeLang/Go-01-basic-concept/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>Go是一种<code>静态强类型</code>，<code>编译型</code>，<code>并发型</code>并且具有<code>垃圾回收</code>的编程语言</p></blockquote><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><ul><li><a href="https://golang.google.cn/">Go官网</a></li><li><a href="https://go-zh.org/">https://go-zh.org/</a></li><li><a href="https://learnku.com/go/wikis">https://learnku.com/go/wikis</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><a href="/tutorial/Windows-install-Go-in-Windows/" title="【Windows】Go安装">【Windows】Go安装</a></li><li><a href="/tutorial/Linux-install-Go-in-Linux/" title="【Linux】Go安装">【Linux】Go安装</a></li></ul><h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><ul><li>以下说明以Linux为例，Windows同理</li></ul><ol><li><p>创建文件夹并进入：<code>mkdir goTest</code></p></li><li><p>初始化：<code>go mod init test1</code>，此时会生成<code>go.mod</code>文件，内容如下</p><p><img src="/codeLang/Go-01-basic-concept/image-20221107104635882.png" alt="image-20221107104635882"></p></li><li><p>创建一个新文件：<code>vim main.go</code>，内容如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行：<code>go run main.go</code></p><p><img src="/codeLang/Go-01-basic-concept/image-20221107104658600.png" alt="image-20221107104658600"></p></li></ol><h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><ul><li><p>为什么Go的声明不同于C风格的声明？</p><ul><li>更加直观</li><li><a href="https://blog.go-zh.org/gos-declaration-syntax">Go’s Declaration Syntax</a></li></ul></li><li><p>Defer, Panic, and Recover</p><ul><li><p>Defer：更好的回收资源（当存在异常退出时）</p></li><li><p>Panic, and Recover：发生错误时，能够正常退出并给出错误位置</p><blockquote><p>The convention in the Go libraries is that even when a package uses panic internally, its external API still presents explicit error return values.</p></blockquote></li><li><p><a href="https://blog.go-zh.org/defer-panic-and-recover">Defer, Panic, and Recover</a></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AlgorithmUp】Binary Indexed Tree（Fenwick tree）</title>
      <link href="/algorithm/AlgorithmUp-indexTree/"/>
      <url>/algorithm/AlgorithmUp-indexTree/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>给定一个数组，有以下两个操作要实现</p><ol><li><code>query</code>：能够计算前i个数的和；查询<code>区间和</code></li><li><code>update</code>：支持<code>单点更新</code></li></ol><h2 id="方案1：暴力法"><a href="#方案1：暴力法" class="headerlink" title="方案1：暴力法"></a>方案1：暴力法</h2><ul><li><code>query</code>：用for循环求解，时间复杂度<code>O(N)</code></li><li><code>update</code>：直接赋值，时间复杂度<code>O(1)</code></li></ul><h2 id="方案2：前缀和数组"><a href="#方案2：前缀和数组" class="headerlink" title="方案2：前缀和数组"></a>方案2：前缀和数组</h2><ul><li><code>query</code>：用额外的空间存储，时间复杂度<code>O(1)</code></li><li><code>update</code>：赋值后，需要重新计算前缀和数组，时间复杂度<code>O(N)</code></li></ul><h2 id="折中方案"><a href="#折中方案" class="headerlink" title="折中方案"></a>折中方案</h2><ul><li><p><code>Binary Indexed Tree</code>和<code>Segment Tree</code></p></li><li><p>查找和修改时间复杂度均为<code>O(logN)</code></p></li><li><p><code>Binary Indexed Tree</code>：更少的空间，更易实现</p></li><li><p><code>Segment Tree</code>：更大的使用范围</p></li></ul><blockquote><ul><li>The BIT is specifically used for Dynamic - Cumulative stuffs, whereas the Segment tree is more general and can be used in all those situations where, the divide and conquer paradigm can be applied over queried interval.</li><li>All the jobs doable by BIT can essentially be done by segment tree but not vice-versa</li><li><a href="https://www.hackerearth.com/practice/notes/binary-indexed-tree-or-fenwick-tree/">参考2：评论区</a></li></ul></blockquote><h1 id="定义及实现"><a href="#定义及实现" class="headerlink" title="定义及实现"></a>定义及实现</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>任意整数可以表示用二进制的位组合表示</li></ul><blockquote><p>Each integer can be represented as a sum of powers of two. In the same way, a cumulative frequency can be represented as a sum of sets of subfrequencies</p></blockquote><ul><li>假设某一个index的二进制表示形式为<code>01100</code>，index为BIT数组中的下标i，那么index位置的值表示记录原数组哪些范围的值呢？<ul><li>最后一个1拆开的<strong>第一个数</strong>开始01001(9)~它自己(12)</li><li>因此重点是找到最后一个1的位置，利用<code>lowbit</code>函数进行快速查找</li></ul></li><li><font color="red">注：除原数组外，下标表示从1开始</font></li></ul><h2 id="lowbit函数"><a href="#lowbit函数" class="headerlink" title="lowbit函数"></a>lowbit函数</h2><ul><li><p><code>lowbit(i)</code>：代表i这个数字，二进制表示的最后一位1的位权（最低为为1）</p></li><li><p>例如（<code>()</code>内数字代表二进制，反之为10进制）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">十进制</span><span class="string">二进制   只保留最低位1</span></span><br><span class="line"><span class="attr">lowbit(8)</span> =<span class="string">&gt; (1000) =&gt; (1000) =&gt; 8</span></span><br><span class="line"><span class="attr">lowbit(6)</span> =<span class="string">&gt; (0110) =&gt; (0010) =&gt; 2</span></span><br><span class="line"><span class="attr">lowbit(12)</span>=<span class="string">&gt; (1100) =&gt; (0100) =&gt; 4</span></span><br><span class="line"><span class="attr">lowbit(7)</span> =<span class="string">&gt; (0111) =&gt; (0001) =&gt; 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>lowbit</code>实现</p><ol><li><code>x &amp; (-x)</code></li><li><code>x &amp; (~x + 1)</code></li></ol></li></ul><h2 id="改进前缀和"><a href="#改进前缀和" class="headerlink" title="改进前缀和"></a>改进前缀和</h2><ul><li><p><code>C[i]</code>： 代表原数组中<code>a</code>第i位 的前lowbit(i)项 之和</p></li><li><p>例如</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lowbit(10) = 2，所以是从10开始（含），一共两项</span></span><br><span class="line"><span class="attr">lowbit(10)</span> = <span class="string">2, C[10] = a[10] + a[9]</span></span><br><span class="line"><span class="comment"># lowbit(12) = 4，所以是从12开始（含），一共四项</span></span><br><span class="line"><span class="attr">lowbit(12)</span> = <span class="string">4, C[12] = a[12] + a[11] + a[10] + a[9]</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/algorithm/AlgorithmUp-indexTree/image-4-1024x496.png" alt="img"></p><h2 id="query：前缀和查询"><a href="#query：前缀和查询" class="headerlink" title="query：前缀和查询"></a>query：前缀和查询</h2><ul><li><p><code>S[i] = S[i – lowbit(i)] + C[i]</code></p></li><li><p>例如</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">S[7]</span> = <span class="string">s[7 - lowbit(7)] + c[7] = S[6] + C[7] = S[4] + C[6] + C[7] = C[4] + C[6] + C[7]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">S[12]</span> = <span class="string">s[12 - lowbit(12)] + c[12] = S[8] + C[12] = C[8] + C[12]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="update：单点更新"><a href="#update：单点更新" class="headerlink" title="update：单点更新"></a>update：单点更新</h2><ul><li>假设修改<code>a[j]</code>，那么显然需要更新<code>c[j]</code>，然后需要修改包含<code>c[j]</code>的区间，即<code>c[i + lowbit(i)]</code></li></ul><h2 id="一维BIT"><a href="#一维BIT" class="headerlink" title="一维BIT"></a>一维BIT</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; (-x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FenwickTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 下标上限</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c; <span class="comment">// 树状数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="comment">// 注意这里是n + 1</span></span><br><span class="line">    <span class="built_in">FenwickTree</span>(<span class="type">int</span> size) : <span class="built_in">n</span>(size), <span class="built_in">c</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对原数组进行单点增加 第i位的值增加x</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= n) c[i] += x, i += <span class="built_in">lowbit</span>(i); <span class="comment">// 向上更新</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询原数组 ind位置的值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">at</span><span class="params">(<span class="type">int</span> ind)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(ind) - <span class="built_in">query</span>(ind - <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询原数组 ind位置前缀和 </span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> ind)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ind) sum += c[ind], ind -= <span class="built_in">lowbit</span>(ind);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询原数组 [left, right]区间和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(right) - <span class="built_in">query</span>(left - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下非关键内容，仅为测试用</span></span><br><span class="line">    <span class="comment">// 测试输出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            len += <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, i); <span class="comment">// 打印坐标位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len + <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, c[i]); <span class="comment">// 打印树状数组 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, <span class="built_in">query</span>(i) - <span class="built_in">query</span>(i - <span class="number">1</span>)); <span class="comment">// 打印原数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">FenwickTree <span class="title">tree</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        tree.<span class="built_in">add</span>(i, a);</span><br><span class="line">    &#125;</span><br><span class="line">    tree.<span class="built_in">output</span>();</span><br><span class="line">    <span class="type">int</span> ind, val;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ind &gt;&gt; val) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;change &quot;</span> &lt;&lt; ind &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// add函数是单点增加，所以需要求变化量</span></span><br><span class="line">        tree.<span class="built_in">add</span>(ind, val - tree.<span class="built_in">at</span>(ind)); <span class="comment">// 将原数组ind位置的值 改为val</span></span><br><span class="line">        tree.<span class="built_in">output</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;range sum 1-3: &quot;</span> &lt;&lt; tree.<span class="built_in">queryRange</span>(<span class="number">1</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;range sum 2-3: &quot;</span> &lt;&lt; tree.<span class="built_in">queryRange</span>(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;range sum 2-4: &quot;</span> &lt;&lt; tree.<span class="built_in">queryRange</span>(<span class="number">2</span>, <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维BIT"><a href="#二维BIT" class="headerlink" title="二维BIT"></a>二维BIT</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; (-x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FenwickTree2</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 行下标上限</span></span><br><span class="line">    <span class="type">int</span> m;  <span class="comment">// 列下标上限</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; c;  <span class="comment">// 树状数组</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; a;  <span class="comment">// 原始数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="comment">// 注意这里是n + 1</span></span><br><span class="line">    <span class="built_in">FenwickTree2</span>(<span class="type">int</span> n_, <span class="type">int</span> m_) : <span class="built_in">n</span>(n_), <span class="built_in">m</span>(m_), <span class="built_in">c</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>)), <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对原数组进行单点增加 第i位的值增加x</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        a[i - <span class="number">1</span>][j - <span class="number">1</span>] += x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row = i; row &lt;= n; row += <span class="built_in">lowbit</span>(row)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> col = j; col &lt;= m; col += <span class="built_in">lowbit</span>(col)) &#123;</span><br><span class="line">                c[row][col] += x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询原数组 ind位置的值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">at</span><span class="params">(<span class="type">int</span> ind, <span class="type">int</span> jnd)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(ind, jnd) - <span class="built_in">query</span>(ind - <span class="number">1</span>, jnd - <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询原数组 ind位置前缀和 </span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> ind, <span class="type">int</span> jnd)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row = ind; row &gt; <span class="number">0</span>; row -= <span class="built_in">lowbit</span>(row)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> col = jnd; col &gt; <span class="number">0</span>; col -= <span class="built_in">lowbit</span>(col)) &#123;</span><br><span class="line">                sum += c[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询原数组 从[row1, col1]到[row2, col2]区间和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(row2, col2) - <span class="built_in">query</span>(row1 - <span class="number">1</span>, col2) - <span class="built_in">query</span>(row2 - <span class="number">1</span>, col1) + <span class="built_in">query</span>(row1 - <span class="number">1</span>, col1 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下非关键内容，仅为测试用</span></span><br><span class="line">    <span class="comment">// 测试输出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            len += <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, i); <span class="comment">// 打印坐标位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len + <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, c[i][j]); <span class="comment">// 打印树状数组 </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, a[i - <span class="number">1</span>][j - <span class="number">1</span>]); <span class="comment">// 打印原数组</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">FenwickTree2 <span class="title">tree</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            tree.<span class="built_in">add</span>(i, j, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tree.<span class="built_in">output</span>();</span><br><span class="line">    <span class="type">int</span> ind, jnd, val;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ind &gt;&gt; jnd &gt;&gt; val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ind &lt;= <span class="number">0</span> || jnd &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;change &quot;</span> &lt;&lt; ind &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; jnd &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// add函数是单点增加，所以需要求变化量</span></span><br><span class="line">        tree.<span class="built_in">add</span>(ind, jnd, val - tree.<span class="built_in">at</span>(ind, jnd)); <span class="comment">// 将原数组ind位置的值 改为val</span></span><br><span class="line">        tree.<span class="built_in">output</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> row, col;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; row &gt;&gt; col) &#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt;= <span class="number">0</span> || col &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;query [1, 1] =&gt; [&quot;</span>&lt;&lt; row &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; col &lt;&lt; <span class="string">&quot;] &quot;</span> &lt;&lt; tree.<span class="built_in">query</span>(row, col) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/">Binary Indexed Tree or Fenwick Tree</a></li><li><a href="https://www.hackerearth.com/practice/notes/binary-indexed-tree-or-fenwick-tree/">Binary Indexed Tree or Fenwick Tree</a></li><li><a href="https://www.topcoder.com/thrive/articles/Binary%20Indexed%20Trees">BINARY INDEXED TREES</a></li><li><a href="https://hitris.club/?p=317">前缀和&#x2F;树状数组</a></li><li><a href="https://blog.csdn.net/xiaolu567/article/details/125308780">index Tree</a></li><li><a href="https://juejin.cn/post/7102262513969922062">IndexTree</a></li><li><a href="https://blog.csdn.net/qq_52670477/article/details/125469103">IndexTree以及应用</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 树 </tag>
            
            <tag> Binary Indexed Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八股汇总</title>
      <link href="/interview/Knowledge/"/>
      <url>/interview/Knowledge/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><p>采用折叠语法，方便复习，涉及图片时，采用正常语法，使用<code>&lt;br&gt;</code>在标签内换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>题目描述<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">    答案</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>尽可能的延伸题目，发散思维</p></li><li><p>关键词之间通过<code>&amp;</code>连接</p></li><li><p>整理到418</p></li></ul><h1 id="C-C"><a href="#C-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><details>    <summary>new & malloc</summary><pre><code>1. new/delete是C++关键字，需要编译器支持。malloc/free是库函数，需要头文件支持2. new申请内存不需要指定大小，malloc需要（以字节为单位）3. new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，无须进行类型转换，故new是符合类型安全性的操作符。而malloc内存分配成功则是返回void * ，需要通过强制类型转换将void*指针转换成我们需要的类型。4. new内存分配失败时，会抛出bad_alloc异常。malloc分配内存失败时返回NULL。（在operator new抛出异常以反映一个未获得满足的需求之前，它会先调用一个用户指定的错误处理函数，这就是new-handler）5. new会先调用operator new函数，申请足够的内存（通常底层使用malloc实现）。然后调用类型的构造函数，初始化成员变量，最后返回自定义类型指针。delete先调用析构函数，然后调用operator delete函数释放内存（通常底层使用free实现）。malloc/free是库函数，只能动态的申请和释放内存，无法强制要求其做自定义类型对象构造和析构工作6. placement new：使用已有的内存空间并进行对象的初始化工作7. 已分配内存的扩充：new没有办法，malloc可以使用remalloc</code></pre></details><details>    <summary>const（部分完成）</summary><pre><code>修饰全局变量<br>修饰局部变量<br>修饰普通函数<br>修饰类成员函数（this指针）1. 成员函数后加const后我们称为这个函数为常函数2. 用`const`修饰成员函数时，`const`修饰this指针指向的内存区域，成员函数体内不可以修改本类中的任何普通成员变量3. 成员属性声明时加关键字mutable后，在常函数中才可以修改4. 原理：this指针（this的本质：是指针常量，指针常量的指向是不可以修改的。即谁调用，指向谁，生成对象时，就已经决定了，即this相当于：Person* const this;），因此加了const后变成const Person* const this，值也无法改变<br>修饰类对象（this指针）：<a href="https://blog.nowcoder.net/n/283db3b0a1964a669dace7f2873d3f3e">常量对象只能调用常成员函数 原因分析</a>1. 使用const修饰类的实例化对象2. 常对象只能调用`const`的成员函数（防止成员函数中修改成员变量）3. 常对象可访问`const`或`非const`数据成员，不能修改任何变量，除非成员用`mutable`修饰4. 原理：    1. 常量对象传入函数的是const指针，普通对象传入的为普通指针，普通指针能向常量指针转换而常量指针无法向普通指针转换，即*p能够向const *p转换，但const *p(常量指针)类型无法转换到*p类型(普通指针)    2. 类中函数都隐式传入了this指针，而常函数的作用就是修饰*this不能被修改，也就是 type fun(class *this) const就相当于type fun(const class *this)</code></pre></details><details>    <summary>atomic</summary><pre><code>1. atomic对int、char、bool等数据结构进行了原子性封装，在多线程环境中，对std::atomic对象的访问不会造成竞争-冒险。利用std::atomic可实现数据结构的无锁设计</code></pre></details><details>    <summary>static</summary><pre><code>static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0<br>全局变量1. 全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同2. 区别在于非静态全局变量的作用域是整个源程序，静态全局变量则限制了其作用域， 即只在定义该变量的源文件内有效， 在同一源程序的其它源文件中不能使用它（这一现象发生在多个文件同时编译时，如gcc 1.c 2.c -o 2）3. 普通全局变量，加extern能够被其他使用，static全局变量不能<br>局部变量1. 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期<br>普通函数1.  static函数与普通函数作用域不同,仅在本文件2.  static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝<br>类成员变量1. 静态数据成员可以实现多个对象之间的数据共享，它是类的所有对象的共享成员，它在内存中只占一份空间，如果改变它的值，则各对象中这个数据成员的值都被改变2. 静态数据成员是在程序开始运行时被分配空间，到程序结束之后才释放，只要类中指定了静态数据成员，即使不定义对象，也会为静态数据成员分配空间3. 静态数据成员可以被初始化，但是只能在类体外进行初始化，若未对静态数据成员赋初值，则编译器会自动为其初始化为04. 静态数据成员既可以通过对象名引用，也可以通过类名引用<br>类成员函数1. 静态成员函数和静态数据成员一样，他们都属于类的静态成员，而不是对象成员2. 非静态成员函数有this指针，而静态成员函数没有this指针3. 静态成员函数主要用来访问静态数据成员而不能访问非静态成员</code></pre></details><details>    <summary>final</summary><pre><code>1. 禁止继承：C++11中允许将类标记为final，方法时直接在类名称后面使用关键字final，如此，意味着继承该类会导致编译错误2. 禁用重写：C++中还允许将方法标记为fianal，这意味着无法再子类中重写该方法。这时final关键字至于方法参数列表后面</code></pre></details><details>    <summary>thread_local</summary><pre><code>1. 线程间隔离，线程内共享2. <a href="https://zhuanlan.zhihu.com/p/77585472">C++ 11 关键字：thread_local</a></code></pre></details><h2 id="指针相关"><a href="#指针相关" class="headerlink" title="指针相关"></a>指针相关</h2><details>    <summary>数组 & 指针</summary><pre><code>问题1. 作为函数入参的区别，用sizeof求的话大小是多少？2. 在作为函数入参，两者有区别嘛？3. 数组能够直接传入而不变成指针形式嘛？4. 会改变之前数组的内容嘛？<br>答案1. 作为函数入参，数组会退化成指针，所以大小都为4（32位）2. 没有区别，因为数组会退化成指针，退化为指针是为了高效，因为指针在固定操作系统下长度固定，更加高效3. 不行，一维数组会退化成一级指针，多维数组退化成数组指针4. 可以，因为是地址传递</code></pre></details><details>    <summary>值传递和引用传递</summary><pre><code>1. 当实参的值被拷贝给形参时，实参和形参是两个独立的变量，我们说实参被值传递或者函数被传值调用2. 将形参绑定到实参，对引用的操作实际上是作用在引用所引的对象上</code></pre></details><details>    <summary>三大智能指针（概述）</summary><pre><code>unique_ptr：持有对对象的独有权——两个unique_ptr不能指向一个对象，即 unique_ptr 不共享它所管理的对象。它无法复制到其他 unique_ptr，无法通过值传递到函数，也无法用于需要副本的任何标准模板库 （STL）算法。只能移动 unique_ptr，即对资源管理权限可以实现转移<br>shared_ptr：是一个标准的共享所有权的智能指针，允许多个指针指向同一个对象，在使用引用计数的机制上提供了可以共享所有权的智能指针<br>weak_ptr：它不具有普通指针的行为，没有重载 operator* 和 operator->，表明其是功能较弱的智能指针。它协助 shared_ptr 工作，可获得资源的观测权，像旁观者那样观测资源的使用情况。观察者意味着 weak_ptr 只对 shared_ptr 进行引用，而不改变其引用计数，当被观察的 shared_ptr 失效后，相应的 weak_ptr 也相应失效。 weak_ptr 可用于打破循环引用。引用计数是一种便利的内存管理机制，但它有一个很大的缺点，那就是不能管理循环引用的对象</code></pre></details><details>    <summary>防止循环引用手段</summary><pre><code>1. 当只剩下最后一个引用的时候需要手动打破循环引用释放对象2. 当parent的生存期超过children的生存期的时候，children改为使用一个普通指针指向parent3. 使用弱引用的智能指针（weak_ptr）打破这种循环引用。,虽然通过弱引用指针可以有效的解除循环引用，但这种方式必须在程序员能预见会出现循环引用的情况下才能使用，也可以是说这个仅仅是一种编译期的解决方案，如果程序在运行过程中出现了循环引用，还是会造成内存泄漏的。因此，不要认为只要使用了智能指针便能杜绝内存泄漏</code></pre></details><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><details>    <summary>虚函数 & 纯虚函数</summary><pre><code>1. 虚函数是为了实现动态编联产生的，目的是通过基类类型的指针/引用指向不同对象时，自动调用相应的、和基类同名的函数（使用同一种调用形式，既能调用派生类又能调用基类的同名函数）2. 纯虚函数只是相当于一个接口名，带纯虚函数的类叫抽象类，含有纯虚函数的类不能够实例化，“=”3. 都有关键字virtual，虚函数表4. 子类继承抽象类也必须实现其中的纯虚函数才能实例化对象</code></pre></details><details>    <summary>虚函数是怎么实现的？</summary><pre><code>1. 主要通过虚函数指针（vfptr）和虚函数表（vftable）实现2. 当父类中有了虚函数后，内部结构就发生了改变，多了一个vfptr，vfptr指向vftable，表中存放虚函数的地址3. 子类会继承父类的虚函数指针vfptr和虚函数表(vftable)，构造函数中会将虚函数指针指向自己的虚函数表4. 出于效率的考虑，该指针通常放在对象实例最前面的位置（第一个slot处）。每一个class所关联的type_info信息也由virtual table指出（通常放在表格的最前面）</code></pre></details><details>    <summary>构造函数 & 虚函数表</summary><pre><code>B继承A，调用B b<br>1. 调用B的构造函数，先调用A的构造函数2. 调用A的构造函数，先按照A对象的内存布局进行初始化3. 因为虚表指针是放在顶部的，先初始化虚表指针，指向虚表（虚表在编译期就生成），之后按照声明顺序初始化成员变量。最后调用构造函数&#123; &#125;中的代码3. 由此可见调用this->fun( )时已经设定好虚表指针，所以调用不会有任何问题。之后B将虚表指针指向自己的虚表，初始化自己的成员变量，最后调用B()&#123; &#125;中的代码this->fun( )，这个时候对象顶部的虚表指针指向B的虚表，调到的自然是B::fun( )。4. 析构函数完全相反，先调用析构函数&#123; &#125;中的代码。</code></pre></details><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><details>    <summary>vector底层实现</summary><pre><code>1. 底层有三个指针(start, finish, capacity)，分别指向申请空间的起始位置，目前数组容量位置（即下一个元素放的位置）以及最大空间位置2. 如果空间不够(finish=capacity)，就会触发扩容机制，申请一块新的空间，并将之前的内容进行拷贝，销毁旧的空间3. 扩容机制在GCC下是两倍增长，在VS下是1.5倍增长</code></pre></details><details>    <summary>vector扩容机制</summary><pre><code>通过求移动元素次数/元素总数求得平均时间复杂度（详见<a href="https://blog.csdn.net/qq_44918090/article/details/120583540">博客</a>）1. 以等长个数进行扩容：平均时间复杂度O(n)，假设每次扩容k个，那第i次扩容就需要移动ki个元素2. 以倍数方式进行扩容：平均时间复杂度O(1)，假设每次倍增m倍，那么n个元素，只需要log以m为底n的对数扩容次数即可达到要求3. 最好的扩容方式：后面申请的空间能够利用上之前已经释放的空间4. 两者的差别，1.5倍在空间上更友好（有几率复用之前的空间），2倍时间上更友好5 其实2倍都有点不满足，所以超过更加不满足了，过大会导致空间浪费可能会比较高，无法使用到前面已释放的内存6. 最好的方式X(n-2)+X(n-1)>=X(n)，又因为要在时间上满足X(n-2)+X(n-1)=X(n)，即斐波拉契数列，所以最佳为1.618倍增长</code></pre></details><details>    <summary>hashtable</summary><pre><code>1. hashtable是STL中的一种底层容器，源码中是使用vector进行实现，每个位置是一个链表节点2. 基本原理是把关键字Key通过一个固定的算法函数即所谓的哈希函数（散列函数）转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的list空间里</code></pre></details><details>    <summary>说说hashtable的增删查时间复杂度</summary><pre><code>都是O(1)，因为都是通过哈希函数算出来结果</code></pre></details><details>    <summary>解决hashtable地址冲突的方法</summary><pre><code>1. 线性探测：找X+1，X+2，X+i位置是否可行2. 二次探测：找X+1²，X+2²，X+i²位置是否可行3. 开链法</code></pre></details><details>    <summary>hashtable线性探测法和开链法的性能差异*</summary><pre><code>感觉用开链法的原因是确保查找达到O(1)，如果是线性探测之类的，可能找起来比较麻烦</code></pre></details><details>    <summary>STL是否线程安全</summary><pre><code>一般说来，STL对于多线程的支持仅限于下列两点：(貌似Effective STL中有描述)1.多个读取者是安全的。即多个线程可以同时读取一个容器中的内容。 即此时多个线程调用容器的不涉及到写的接口都可以 eg find, begin, end 等.2.对不同容器的多个写入者是安全的。即多个线程对不同容器的同时写入合法。 但是对于同一容器当有线程写，有线程读时，如何保证正确? 需要程序员自己来控制，比如：线程A读容器某一项时，线程B正在移除该项。这会导致一下无法预知的错误。 通常的解决方式是用开销较小的临界区（CRITICAL_SECTION）来做同步。<br>以下列方式同步基本上可以做到线程安全的容器(就是在有写操作的情况下仍能保证安全)。1.每次调用容器的成员函数的期间需要锁定2.每个容器容器返回迭代器的生存期需要锁定3.每个容器在调用算法的执行期需要锁定<br>1. All container functions are safe to be called concurrently on different objects of the same container type (i.e. it is safe to use two different std::vector instances on two different threads2. All const member functions can be called concurrently by different threads3. Containers can be safely read from multiple threads if no thread is making asynchronous writes4. Different elements in the same container can be modified concurrently, except for the elements of std::vector<bool>.5. If an object is written to by one thread and read by other threads, the object must be protected6. In general, iterator operations read from a container, but do not modify it, so they are thread-safe. Container operations that invalidate iterators are NOT thread-safe, as they modify the container</bool></code></pre></details><details>    <summary>vector&ltbool&gt的线程安全性：<a href="https://stackoverflow.com/questions/33617421/write-concurrently-vectorbool">stackoverflow</a></summary><pre><code>1. 对容器中不同元素同时写，不是线程安全的2. 因为底层实现上，读取一个byte但是只会修改一个bit，多线程同时写，会出现覆盖的行为，不安全</code></pre></details><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><details>    <summary>定义空类时，会创建哪些函数</summary><pre><code>1. 默认构造函数(无参，函数体为空)2. 默认析构函数(无参，函数体为空)3. 默认拷贝构造函数，对类中非静态成员属性简单值拷贝4. 默认operator=重载函数(赋值运算符重载)，实现简单的值传递</code></pre></details><details>    <summary>什么是构造函数</summary><pre><code>1.构造函数是类的成员函数，其名称与类相同2.构造函数是类的一种特殊类型的成员函数，它初始化类的对象。在 C++ 中，创建对象（类的实例）时会自动调用构造函数3.在创建对象时调用构造函数。它构造值，即为对象提供数据，这就是它被称为构造函数的原因4.构造函数没有返回值，因此它们没有返回类型。5.构造函数可以重载6.构造函数不能被声明为虚拟的</code></pre></details><details>    <summary>什么是析构函数</summary><pre><code>1. 与类同名的一个函数，前面需要加~号2. 销毁对象时，将自动调用析构函数，完成一些清理工作，比如：释放内存等3. 不能将其声明为static或const=>static修饰的是类共享（即没有this指针），const修饰无法修改非静态成员（即限制this指针值不能改变）4. 析构函数没有参数，它没有返回类型，甚至没有void修饰5. 具有析构函数的类的对象不能成为联合的成员=>联合体共有空间，而构造和析构将会导致空间增加或减小（堆），规定不可用，<a href="https://blog.csdn.net/qq_29344757/article/details/78060189">当c++中的联合体遇到类的构造函数</a>8. 析构函数应在该类的公共部分中声明9. 程序员无法访问析构函数的地址</code></pre></details><details>    <summary>构造函数 & 虚函数</summary><pre><code>1. 构造函数不可以是虚函数2. 当类中声明虚函数时，编译器会在类中生成一个虚函数表，虚函数表是一个存储成员函数指针的数据结构3. 虚函数表是由编译器自动生成与维护的，virtual成员函数会被编译器放入虚函数表中，当存在虚函数时，每个对象都有一个指向虚函数的指针（vptr指针）。在实现多态的过程中，父类和派生类都有vptr指针4. vptr的初始化：当对象在创建时，由编译器对vptr指针进行初始化。在定义子类对象时，vptr先指向父类的虚函数表，在父类构造完成之后，子类的vptr才指向自己的虚函数表5. 如果构造函数时虚函数，那么调用构造函数就需要去找vptr，而此时vptr还没有初始化6. 因此，构造函数不可以是虚函数</code></pre></details><details>    <summary>构造函数 & 异常</summary><pre><code>1. 理论上可以，因为C++并没有禁止这一行为的发生，但是一般不抛出异常2. 构造函数中抛出异常，会导致析构函数不能被调用，所以可能会造成内存泄露或系统资源未被释放</code></pre></details><details>    <summary>析构函数 & 异常</summary><pre><code>1. 理论上可以，因为C++并没有禁止这一行为的发生，但是一般不抛出异常2. 这样会导致程序过早结束或出现不明确的行为</code></pre></details><details>    <summary>C++异常</summary><pre><code>1. C++中使用try_catch进行捕获异常2. 将可能抛出异常的程序段放到try块之中3. catch语句会根据出现的先后顺序被检查，匹配的catch语句捕获并处理异常(或继续通过throw操作创建一个异常对象并抛出异常)4. 如果在try段执行期间没有引起异常，那么跟在try后面的catch语句就不会执行5. 如果匹配的处理未找到，则运行函数terminate将自动被调用，其缺省功能调用abort终止程序6. 处理不了的异常，可以在catch的最后一个分支，使用throw，向上抛7. 异常被抛出后，从进入try块起，到异常被抛出前，这期间在栈上构造的所有对象，都会被自动析构。析构的顺序与构造的顺序相反，这一过程称为栈的解旋(unwinding)</code></pre></details><details>    <summary>重载和重写</summary><pre><code>1. 重载是指不同的函数使用相同的函数名，但是函数的参数个数或类型不同。调用的时候根据函数的参数来区别不同的函数2. c++实现多态时会用到。函数重写，也被称为覆盖，是指子类重新定义父类中有相同名称和参数的虚函数，主要在继承关系中出现</code></pre></details><details>    <summary>模板</summary><pre><code>1. 编译器并不是把函数模板处理成能够处理任何类型的函数(比如结构体)2. 函数模板通过具体类型产生不同的函数，由此产生的函数称为模板函数，模板不能直接调用，生成后的模板函数才可以调用3. 编译器会对函数模板进行两次编译，在声明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译</code></pre></details><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><details>    <summary>进程 & 线程 & 协程</summary><pre><code>1. 进程是资源调度的基本单位，运行一个可执行程序会创建一个或多个进程，进程就是运行起来的可执行程序2. 线程是程序执行的基本单位，是轻量级的进程。每个进程中都有唯一的主线程，且只能有一个，主线程和进程是相互依存的关系，主线程结束进程也会结束3. 协程是用户态的轻量级线程，线程内部调度的基本单位</code></pre></details><details>    <summary>进程切换 & 线程切换</summary><pre><code>1. 进程切换涉及到虚拟地址空间的切换而线程切换则不会2. 因为每个进程都有自己的虚拟地址空间，而线程是共享所在进程的虚拟地址空间的，因此同一个进程中的线程进行线程切换时不涉及虚拟地址空间的转换</code></pre></details><details>    <summary>判断死锁</summary><pre><code>1. 用资源分配图判断系统是否死锁，即排除已经分配的资源剩余的资源是否满足进程所需要的需求2. GDB调试分析死锁</code></pre></details><details>    <summary>线程调度策略</summary><pre><code>1. 先来先服务2. 短作业优先算法3. 高优先权优先调度算法4. 高响应比优先调度算法5. 时间片轮转法6. 多级反馈队列调度算法</code></pre></details><details>    <summary>虚拟内存</summary><pre><code>1. 为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是操作系统就为每个进程独⽴分配⼀套虚拟地址空间，虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存2. 操作系统引⼊了虚拟内存，进程持有的虚拟地址会通过 CPU 芯⽚中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存（MMU的主要功能有两项，一个是用来将虚拟地址转换成物理地址，一个是转换的同时检查对应的页是否有执行权限）3. 分段、分页和段页式4. 分段：将虚拟地址分成四段（栈、堆、数据和代码），并使用段表（段选择因子和段内偏移量）与物理地址进行映射5. 分段->外部碎片（产生了多个不连续的小物理内存）->内存交换（将某个程序占用的内存先写到硬盘，然后紧挨其他分配的位置再写回内存）6. 分页->为了解决内存分段带来的外部碎⽚和内存交换效率低的问题7. 分页：分⻚是把整个虚拟和物理内存空间切成⼀段段固定尺⼨的⼤⼩（Linux下一页为4KB），并使用页表（页号与页内偏移）与物理地址进行映射，页表存在于进程的内存之中，MMU收到虚拟地址之后查询Page Table来获取物理地址8. 单级页表：32位下，共4G虚拟内存(2^32)，每个页为4KB(2^12)，故一共100万个页(2^20)，每个页表项需要四字节，故一个进程需要4MB(2^22)来存储，那么100个应用程序就需要400MB=>比较占空间9. 多级页表：简单分页比较占用空间，多级页表只有在需要的时候才会创建下面的页表（即如果一级页面没用到，就不需要创建后面的页表了）10. 多级页表转换速度读（要按次序查页表）->TLB（页表缓存）</code></pre></details><details>    <summary>解引用空指针</summary><pre><code>1. 现代操作系统提供了虚拟内存的概念，所以在访问空指针时，编译器把空指针当做虚拟内存中的虚拟地址 0 对待，并让你去访问空指针2. 然后通过页表去查找相应的地址是否在物理内存中出现，发现没有，触发缺页异常3. 缺页异常处理程序发现你没有访问的权限（Linux 中，每个进程空间的 0x0 虚拟地址开始的线性区(memory region)都会被映射到一个用户态没有访问权限的页上。通过这样的映射，内核可以保证没有别的页会映射到这个区域）4. 内核发送 SIGSEGV 信号给进程，该信号默认是让进程自杀</code></pre></details><details>    <summary>mmap</summary><pre><code>1. 进程启动映射过程，并在虚拟地址空间中为映射创建虚拟映射区域2. 调用内核空间的系统调用函数mmap（不同于用户空间函数），实现文件物理地址和进程虚拟地址的一一映射关系注：前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时3.进程发起对这片映射空间的访问，引发缺页异常，实现文件内容到物理内存（主存）的拷贝</code></pre></details><details>    <summary>缺页异常</summary><pre><code>Page fault（硬错误、硬中断、分页错误、寻页缺失、缺页中断、页故障等)指的是当软件试图访问已映射在虚拟地址空间中，但是目前并未被加载在物理内存中的一个分页时，由中央处理器的内存管理单元所发出的中断<br>行为1. 假如目标内存页在物理内存中没有对应的页帧或者存在但无对应权限，CPU 就无法获取数据，这种情况下CPU就会报告一个缺页错误2. 由于CPU没有数据就无法进行计算，CPU罢工了用户进程也就出现了缺页中断，进程会从用户态切换到内核态，并将缺页中断交给内核的 Page Fault Handler 处理<br>缺页异常的几种情况（口述版）：1. 分为有效缺页异常（硬缺页错误和软缺页错误）和无效缺页异常（无效缺页错误）2. Hard Page Fault 也被称为Major Page Fault，翻译为硬缺页错误/主要缺页错误，这时物理内存中没有对应的页帧，需要CPU打开磁盘设备读取到物理内存中，再让MMU建立VA和PA的映射3. Soft Page Fault 也被称为Minor Page Fault，翻译为软缺页错误/次要缺页错误，这时物理内存中是存在对应页帧的，只不过可能是其他进程调入的，发出缺页异常的进程不知道而已，此时MMU只需要建立映射即可，无需从磁盘读取写入内存，一般出现在多进程共享内存区域4. Invalid Page Fault 翻译为无效缺页错误，比如进程访问的内存地址越界访问，又比如对空指针解引用内核就会报segment fault，并会升级触发SIGSEGV信号结束进程<br>缺页异常的几种情况（源码版）：1. 当 MMU 中没有创建虚拟页物理页映射关系，并且在该虚拟地址之后没有当前进程的线性区 vma 的时候，肯定这编码错误，将杀掉进程；2. 当 MMU 中没有创建虚拟页物理页映射关系，并且在该虚拟地址之后存在当前进程的线性区 vma 的时候，可能是栈溢出导致的缺页异常；3. 使用 malloc/mmap 等希望访问物理空间的库函数 / 系统调用后，linux 并未真正给新创建的 vma 映射物理页   1. 若先进行写操作，如上面的 2 的情况产生缺页异常   2. 若先进行读操作，虽也会产生缺页异常，将被映射给默认的零页 (zero_pfn)，等再进行写操作时，仍会产生缺页异常，进入写时复制的流程；4. 使用 fork 等系统调用创建子进程，子进程不论有无自己的 vma，“它的”vma 都有对于物理页的映射，但它们共同映射的这些物理页属性为只读，即 linux 并未给子进程真正分配物理页，当父子进程任何一方要写相应物理页时，导致缺页异常的写时复制；</code></pre></details><details>    <summary>遍历数组和链表性能为什么差那么多</summary><pre><code>1. cpu读取数据是按照缓存行读取到缓存的，简单来说就是cpu会把需要的数据加载到缓存中，查找数据时，会先从缓存找，找不到再到内存找2. 而数组作为连续内存，cpu缓存会把一片连续的内存空间读入，这样连续内存的数组会更易于整块读取到缓存中，当进行遍历时，直接命中缓存3. 链表是跳跃式的地址，很轻易就会跳出缓存，跑到内存中去查找数据。所以会慢很多</code></pre></details><details>    <summary>使用fprintf时操作系统做了什么？*</summary><pre><code>个人理解（暂时没找到）：1. 用户应用进程调用fprintf函数，是一个输出的操作，所以应该会调用C库中的write函数，然后向操作系统发起IO调用，上下文从用户态转为内核态2. CPU将用户缓冲区中的数据，拷贝到需要输出的文件缓冲区中3. 执行完一系列操作以后，再由内核态切换成用户态</code></pre></details><details>    <summary>IO多路复用（select，poll，epoll）</summary><pre><code>概念I/O多路复用（multiplexing）的本质是通过一种机制（系统内核缓冲I/O数据），让单个进程可以监视多个文件描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。（包括select、poll、epoll）<br>select1. select实现了IO多路复用的基本要求，但是只会通知有几个任务可用，但不知道具体哪几个任务，还需遍历2. 每次调用select，都需要把fd集合（文件描述符集合）从用户态拷贝到内核态，这个开销在fd很多时会很大3. 同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大4. select支持的文件描述符数量太小了，默认是10245. 文件描述符集合不能重用，每次都需要重置<br>poll1. 在select的基础上进行改进，用一个结构体记录文件描述符集合，并记录用户态状态和内核态状态2. 解决了：(1)select支持的文件描述符数量太小了，默认是1024;(2)fds集合不能重用，每次都需要重置3. 问题依旧：（1）每次调用poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大；（2）同时每次调用poll都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大<br>epoll1. 直接在内核态创建 eventpoll实例(结构体)，通过epoll提供的API操作该实例，比如使用epoll_ctl维护等待队列，再调用epoll_wait阻塞进程2. 结构体中有红黑树和双链表，分别用来存储需要检测的文件描述符和存储已经发生改变的文件描述符3. 因为像select和poll这种都是只能返回有几个文件描述符发生了改变，所以还需要遍历整个数组，而epoll维护的就绪队列就可以很快的进行操作</code></pre></details><details>    <summary>epoll中LT与ET区别</summary><pre><code>水平触发(level triggered, LT)1. epoll的缺省的工作方式，并且同时支持 block 和 non-block socket2. 在LT下，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的 fd 进行 IO 操作。如果你不作任何操作，内核还是会继续通知你的<br>边沿触发(edge triggered, ET)1. 是高速工作方式，只支持 non-block socket，需要对监听文件描述符设置才能实现2. 只会通知一次<br>两者的区别1. ET 模式在很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高2. epoll工作在 ET 模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死（因为需要循环读取，如果缓冲区没数据了，那么就会卡在那，配合EAGAIN退出循环）3. 所以如果使用ET且缓冲区内容不能一次性读完，需要写一个循环将内容全部读取，且需要将套接字设置为非阻塞</code></pre></details><details>    <summary>epoll中红黑树和链表怎么协作？</summary><pre><code>1. 首先通过epoll_ctl将要监听的文件描述符放到红黑树上面2. 当socket收到数据后，中断程序会给eventpoll的“就绪列表”添加socket引用3. 节点会同时存在红黑树和链表里面嘛？：其实是会的，当某个socket读取到数据，那么就会给一个引用放到双向链表里面，也就是就绪队列</code></pre></details><details>    <summary>函数调用行为（普通函数，普通成员函数，虚函数）</summary><pre><code>1. 栈帧，也就是stack frame，其本质就是一种栈，只是这种栈专门用于保存函数调用过程中的各种信息（参数，返回地址，本地变量等）=>（栈帧也叫过程活动记录，是编译器用来实现过程/函数调用的一种数据结构。简言之，栈帧就是利用EBP（栈帧指针，请注意不是ESP）寄存器访问局部变量、参数、函数返回地址等的手段）2. 普通函数调用流程：假设main函数（A）中调用func函数（B）      1. 当A调用B时，会把返回地址压入栈中，指明B返回时，要从A的哪个位置继续执行，这一步属于A的栈帧      2. 扩展当前栈的空间，为B开辟栈帧空间      3. 函数参数从右至左进行压栈（可能通过寄存器传递，如果参数小于6个）      4. 函数局部变量进行压栈，注意静态变量是不入栈的3. 普通成员函数调用流程（大体）：1. 由于函数地址在编译期间已确定，所以直接找到该函数地址，2. this指针，作为隐含参数传入该函数，3. 之后的调用和普通函数调用方式一致，4. 注意：如果该函数中，使用了实例的成员变量，由于this指针为null，程序会报错=》感觉说的是没有实例化对象的时候？4. 虚函数调用流程（大体）：1. 查找this指针（也就是实例）的地址，2. 根据this指针，查找虚函数表（函数指针数组）的地址，3. 从虚函数表中，取出相应的函数地址<br>为什么函数参数从右往左压栈？（https://blog.csdn.net/xxxxxx91116/article/details/40478173）1. 从右向左压栈的顺序是与C/C++支持可变参数有关的   可以举例printf("%d %d %d", 1, 2, 3)2. 从右到左的好处是，第一个参数就在栈顶，我们很方便就定位到了第一个参数的位置3. C方式参数入栈顺序(从右至左)的好处就是可以动态变化参数个数。通过栈堆分析可知，自左向右的入栈方式，最前面的参数被压在栈底。这样的话，除非知道参数个数，否则是无法通过栈指针的相对位移求得最左边的参数。这样就变成了左边参数的个数不确定，正好和动态参数个数的方向相反   </code>   </pre>   </details><details>    <summary>什么是线程安全？</summary><pre><code>1. 线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染2. 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据</code></pre></details><details>    <summary>什么情况会导致线程不安全</summary><pre><code>同一个程序运行在多个线程中本身不会有线程安全问题，问题在于多个线程访问共享资源时存在，如：类成员变量（普通或静态变量），系统共享资源（文件，数据库）等。</code></pre></details><details>    <summary>想在栈上动态分配内存</summary><pre><code>alloca函数：能够在栈上申请空间，但是可能引起爆栈，不推荐使用</code></pre></details><details>    <summary>可执行文件加载到内存中，描述地址分配情况（可执行程序的空间分布）</summary><pre><code>程序运行开始，由系统为进程地址空间中的text/data/bss段进行映射，由系统的缺页异常处理程序按需将磁盘上程序文件中的真正代码、数据写入进程。此外，bss区域中的所有变量都会被清零<br>代码段（.text）：指用来存放程序执行代码（汇编代码）的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读，某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等数据段（.data）：数据段(datasegment)通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配数据段（.bss）：BSS段(bsssegment)通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStarted by Symbol的简称。BSS段属于静态内存分配堆（heap）：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上(堆被扩张)；当利用free等函数释放内存时，被释放的内存从堆中被剔除(堆被缩减)栈（stack）：是用户存放程序临时创建的局部变量，也就是说我们函数括弧“&#123;&#125;”中定义的变量(但不包括static声明的变量，static意味着在数据段中存放变量)。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区常量段：常量段一般包含编译器产生的数据(与只读段包含用户定义的只读数据不同)。比如说由一个语句a=2+3编译器把2+3编译期就算出5，存成常量5在常量段中.rodata：存放C中的字符串和#define定义的常量<br>注意事项1. text和data段都在可执行文件中(在嵌入式系统里一般是固化在镜像文件中)，由系统从可执行文件中加载2. bss段不在可执行文件中，由系统初始化3. bss段(未手动初始化的数据)并不给该段的数据分配空间，只是记录数据所需空间的大小，具体体现为一个占位符4. bss是不占用.exe文件空间的，其内容由操作系统初始化(清零)；而.data却需要占用，其内容由程序初始化</code></pre></details><details>    <summary>动态库 & 静态库</summary><pre><code>概念1. 库文件是计算机上的一类文件，可以简单的把库文件看成一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类，库是特殊的一种程序，编写库的程序和编写一般的程序区别不大，只是库不能单独运行2. 静态库在程序的链接阶段被复制到了程序中3. 动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用<br>静态库优缺点优点1. 静态库被打包到应用程序中，所以加载速度更快2. 发布程序无需提供静态库，移植方便缺点1. 消耗系统资源，浪费内存2. 更新、部署、发布麻烦<br>动态库优缺点优点1. 可以实现进程间资源共享（共享库）2. 更新、部署、发布简单3. 可以控制何时加载动态库缺点1. 加载速度比静态库慢2. 发布程序时需要提供依赖的动态库</code></pre></details><details>    <summary>malloc底层实现（Linux）</summary><pre><code>1. 在用户态层面，进程使用库函数malloc分配的是虚拟内存，并且系统是延迟分配物理内存的，由缺页中断来完成分配在内核态层面，内核也需要物理内存，并且使用了另外一套不同于用户态的分配机制和系统调用函数Linux下用户态的进程通过库函数malloc来申请内存，malloc调用了brk/mmap（小于128KB和大于128KB）这两个系统调用，最终触达到伙伴系统实现内存分配2. malloc将内存分成了大小不同的chunk，malloc将相似大小的chunk用双向链表链接起来，这样一个链表被称为一个bin，malloc一共维护了128个bin，并使用一个数组来存储这些bin   1. bins[0]目前没有使用   2. bins[1]的链表称为unsorted_list，用于维护free释放的chunk。   3. bins[2,63]总计长度为62的区间称为small_bins，用于维护＜512B的内存块，其中每个bin中对应的链表中的chunk大小相同，相邻bin的大小相差8字节，范围为16字节到504字节   4. bins[64,126]总计长度为63的区间称为large_bins，用于维护大于等于512字节的内存块，每个元素对应的链表中的chunk大小不同，数组下标越大链表中chunk的内存越大，large bins中的每一个bin分别包含了一个给定范围内的chunk，其中的chunk按大小递减排序，最后一组的largebin链中的chunk大小无限制，该bins的使用频率低于small bins</code></pre></details><h1 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h1><details>    <summary>TCP三次握手-简</summary><pre><code>1. 客户端发送SYN和客户端随机序列号2. 服务端回SYN和ACK，确认序号和服务端随机序列号3. 客户端回ACK和确认序号</code></pre></details><details>    <summary>TCP三次握手（详细）</summary><pre><code>1. 一开始，客户端和服务端都处于 CLOSED 状态。先是服务端主动监听某个端口，处于 LISTEN 状态2. 客户端会产生随机初始化序号（client_isn），将此序号置于 TCP 首部的「序号」字段中，同时把 SYN 标志位置为 1 ，表示 SYN 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 SYN-SENT 状态3. 服务端收到客户端的 SYN 报文后，首先服务端也随机初始化自己的序号（server_isn），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 client_isn + 1, 接着把 SYN 和 ACK 标志位置为 1。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 SYN-RCVD 状态4. 客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 ACK 标志位置为 1 ，其次「确认应答号」字段填入 server_isn + 1 ，最后把报文发送给服务端，这次报文可以携带客户到服务器的数据，之后客户端处于 ESTABLISHED 状态5. 服务器收到客户端的应答报文后，也进入 ESTABLISHED 状态</code></pre></details><details>    <summary>TCP四次挥手</summary><pre><code>客户端和服务端都可以主动断开连接，我就说一下以客户端主动断开连接的过程1. 客户端主动发起断开连接请求，会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，也即 FIN 报文，客户端进入FIN_WAIT_1 状态2. 服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSED_WAIT 状态3. 客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态4. 等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态5. 客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态6. 服务器收到了 ACK 应答报文后，就进入了 CLOSED 状态，至此服务端已经完成连接的关闭7. 客户端在经过 2MSL 一段时间后，自动进入 CLOSED 状态，至此客户端也完成连接的关闭</code></pre></details><details>    <summary>TCP协议如何保证可靠传输</summary><pre><code>TCP 是通过序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输的</code></pre></details><details>    <summary>TCP网络拥塞算法</summary><pre><code>1. 慢启动2. 拥塞避免算法3. 当发生了「超时重传」，则就会使用拥塞发生算法4. 快速重传和快速恢复</code></pre></details><details>    <summary>get & post</summary><pre><code>1. Get ⽅法的含义是请求从服务器获取资源，这个资源可以是静态的⽂本、⻚⾯、图⽚视频等，GET把参数包含在URL中2. POST ⽅法向 URI 指定的资源提交数据，数据就放在报⽂的 body ⾥，POST通过request body传递参数3. GET安全且幂等，POST两者都不是4. GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。5. GET请求在URL中传送的参数是有长度限制。（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。6. GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100（指示信息—表示请求已接收，继续处理）continue，浏览器再发送data，服务器响应200 ok（返回数据）</code></pre></details><details>    <summary>TCP & UDP (概念对比)</summary><pre><code>1. TCP面向连接，UDP面向无连接2. TCP提供可靠的服务，UDP不保证可靠交互3. TCP面向字节流，UDP面向数据包4. TCP只能一对一，UDP可以一对一，一对多和多对多5. TCP首部开销20字节，UDP的首部开销小，只有8个字节6. TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</code></pre></details><details>    <summary>TCP & UDP (头部对比)</summary><pre><code>TCP头部- 源端口号：发送方端口号- 目的端口号：接收方端口号- 序号：本报文段的数据的第一个字节的序号- 确认号：期望收到对方下一个报文段的第一个数据字节的序号- 头部长度（数据偏移）：TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远，即首部长度。==单位：32位，即以 4 字节为计算单位==？？？- 保留：占 6 位，保留为今后使用，目前应置为 0- 紧急 `URG` ：此位置 1 ，表明紧急指针字段有效，它告诉系统此报文段中有紧急数据，应尽快传送- 确认 `ACK`：仅当 ACK=1 时确认号字段才有效，TCP 规定，在连接建立后所有传达的报文段都必须把 ACK 置1- 推送 `PSH`：当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能够收到对方的响应。在这种情况下，TCP 就可以使用推送（push）操作，这时，发送方TCP 把 PSH 置 1，并立即创建一个报文段发送出去，接收方收到 PSH = 1 的报文段，就尽快地（即“推送”向前）交付给接收应用进程，而不再等到整个缓存都填满后再向上交付- 复位 `RST`：用于复位相应的 TCP 连接- 同步 `SYN`：仅在三次握手建立 TCP 连接时有效。当 SYN = 1 而 ACK = 0 时，表明这是一个连接请求报文段，对方若同意建立连接，则应在相应的报文段中使用 SYN = 1 和 ACK = 1。因此，SYN 置1 就表示这是一个连接请求或连接接受报文- 终止 `FIN`：用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放运输连接- 窗口：指发送本报文段的一方的接收窗口（而不是自己的发送窗口）- 校验和：校验和字段检验的范围包括首部和数据两部分，在计算校验和时需要加上 12 字节的伪头部- 紧急指针：仅在 URG = 1 时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据），即指出了紧急数据的末尾在报文中的位置，注意：即使窗口为零时也可发送紧急数据- 选项：长度可变，最长可达 40 字节，当没有使用选项时，TCP 首部长度是 20 字节<br>UDP头部- 源端口号：发送方端口号- 目的端口号：接收方端口号- 长度：UDP用户数据报的长度，最小值是8（仅有首部）- 校验和：检测UDP用户数据报在传输中是否有错，有错就丢弃</code></pre></details><details>    <summary>浏览器输入baidu.com发生了什么</summary><pre><code>发送请求1. 首先浏览器做的第一步工作就是要对 URL 进行解析，从而生成发送给 Web 服务器的请求信息2. 通过DNS查询域名对应的IP地址（先找浏览器缓存、然后操作系统缓存，然后是hosts 文件看，如果缓存都没有，就询问本地DNS服务器，如果还是没有：根->顶级->权威）3. 往下传到达传输层，添加TCP头部，填写源端口（操作系统分配）和目的端口（特殊）4. 往下传到达网络层，添加IP头部，填写源IP和目的IP      源地址IP，即是客户端输出的 IP 地址，多个网卡的话，靠路由表进行查询，如果匹配得到就填写相应网段，如果匹配不到，就填写默认网关的网段      目标地址，即通过 DNS 域名解析得到的 Web 服务器 IP5. 然后达到网际接口层，填写源MAC和目的MAC，用于两点间传输，通过ARP广播获得（ARP缓存）6. 经过一系列封装，需要将数字信息转换为电信号，才能在网线上传输，网卡执行操作：网卡驱动从 IP 模块获取到包之后，会将其复制到网卡内的缓存区中，接着会在其开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列<br>接收请求交换机1. 电信号到达网线接口，交换机模块将电信号转换为数字信号，然后通过包末尾的 FCS 校验错误，如果没问题则放到缓冲区2. 然后交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相应的端口（如果表里面没有，那就广播，并缓存），交换机原样转发路由器3. 经过交换机之后，现在到达了路由器，并在此被转发到下一个路由器或目标设备。电信号到达网线接口部分，路由器中的模块会将电信号转成数字信号，然后通过包末尾的 FCS 进行错误校验，如果没问题则检查 MAC 头部中的接收方 MAC 地址，看看是不是发给自己的包，如果是就放到接收缓冲区中，否则就丢弃这个包4. 完成包接收操作之后，路由器就会去掉包开头的 MAC 头部，查询路由表确定输出端口。如果路由表中的网关列为空，到达目的地址，如果不为空，继续转发<br>面试官：主机决定用哪个MAC的时候靠路由表进行查询1. 如果目的IP和源IP在一个子网中，直接请求目的的ARP，并拿到MAC地址2. 如果目的IP和源IP不在一个子网中，请求的是本网段网关（交换机）的MAC地址</code></pre></details><details>    <summary>cookie & session</summary><pre><code>区别：1. Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份2. cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session3. 设置cookie时间可以使cookie过期4. session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie5. 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。(Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型)6. 一个是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，一个是预先设置的生存周期，或永久的保存于本地的文件。(cookie)<br>使用场景1. 客户端和服务器连接</code></pre></details><details>    <summary>OSI七层模型与五层模型</summary><pre><code>OSI七层：应用、表示、会话、传输、网络、数据链路、物理五层：应用、传输、网络、数据链路、物理<br>OSI七层模型各层的作用应用层：网络服务与最终用户的一个接口表示层：数据的表示、安全、压缩会话层：建立、管理、中止会话传输层：定义传输数据的协议号端口，以及流控和差错校验网络层：进行逻辑地址寻址，实现不同网络间的路径选择数据链路层：建立逻辑连接，进行硬件地址寻址，差错校验功能物理层：建立、维护、断开物理连接<br>应该是上三层（应用、表示、会话）在实际场景中不能或者不需要分得特别细吧？（没找到）</code></pre></details><details>    <summary>大报文传输</summary><pre><code>在IP 协议中的分片算法主要解决异种网最大传输单元(MTU) 的不同（http://blog.chinaunix.net/uid-26993600-id-3359402.html）<br>既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？=>IP层效率低1. 当如果一个 IP 分片丢失，整个 IP 报文的所有分片都得重传2.  IP 层本身没有超时重传机制，它由传输层的 TCP 来负责超时和重传3. 当接收方发现 TCP 报文（头部 + 数据）的某一片丢失后，则不会响应 ACK 给对方，那么发送方的 TCP 在超时后，就会重发「整个 TCP 报文（头部 + 数据）」<br>假设发送方发送一个 4000 字节的大数据报，若要传输在以太网链路，则需要把数据报分片成 3 个小数据报进行传输，再交由接收方重组成大数据报（经过分片之后的 IP 数据报在被重组的时候，只能由目标主机进行，路由器是不会进行重组的）<br>IP分片要修改IP数据报中的标志、分片偏移和总长度的值，其他的不变标志（flag）：目前只有两位有意义- 标志字段中的最低位记为 MF。MF = 1 即表示后面“还有分片”的数据报。MF = 0 表示这已是若干数据报片中的最后一个- 标志字段中间的一位记为 DF，意思是“不能分片”，只有当 DF = 0 时才允许分片片偏移：指出较长的分组在分片后，某片在源分组中的相对位置，也就是说，相对于用户数据段的起点，该片从何处开始。片偏移以 8 字节为偏移单位</code></pre></details><details>    <summary>IP分片 & 报文合并</summary><pre><code>IP分片标志（flag）：目前只有两位有意义- 标志字段中的最低位记为 MF。MF = 1 即表示后面“还有分片”的数据报。MF = 0 表示这已是若干数据报片中的最后一个- 标志字段中间的一位记为 DF，意思是“不能分片”，只有当 DF = 0 时才允许分片<br>报文合并- 本地流量，即已经到达目的端，需要进行重组，然后交给上层协议- 过路流量：根据是否允许分片分为两种情况（传输过程的MTU发生改变，所以可能还需要分片，IP分片就是为了这个设计的，如果不需要分片直接转发不用重组）  - 允许分片（DF=0）：中间路由器负责IP分片，分片到达目的地进行重组  - 不允许分片（DF=1）：中间路由器丢弃IP包，并发ICMP 消息给上一条，要求发送更小的IP数据包</code></pre></details><details>    <summary>IP层路由</summary><pre><code>1. 默认路由是一种特殊的静态路由，指的是当路由表中和包的目的地址之间没有匹配的表项时路由器能够做出的选择2. 如果没有默认路由器，那么目的地址在路由表中没有匹配表项的包将被丢弃3. 同一个子网下，但是没有MAC地址：ARP广播获得MAC地址</code></pre></details><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><details>    <summary>B+树介绍</summary><pre><code>1. B树和B+数都是多叉搜索树2. B树是为磁盘或其他直接存取的辅助存储设备而设计的一种平衡搜索树。B树类似于红黑树，但它们在降低磁盘I/O操作数方面要更好一些3. B+树是B树的一种变形，它把所有的数据都存储在叶节点中，内部节点只存放关键字和孩子指针</code></pre></details><details>    <summary>B+树只在叶子结点存数据有什么好处？</summary><pre><code>1. 索引结点中不存数据，只存键和指针，所以一个索引结点就可以存储大量的分支，而一个索引结点只需要一次IO即可读取到内存中2. 最大化了内部节点的分支因子，所以B+树的遍历也更加高效(B树需要以中序的方式遍历节点，而B+树只需把所有叶子节点串成链表就可以从头到尾遍历)</code></pre></details><details>    <summary>MySQL事务(ACID)</summary><pre><code>ACIDA：原子性（Atomicity），一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样C：一致性（Consistency）：数据库的完整性不会因为事务的执行而受到破坏，比如表中有一个字段为姓名，它有唯一约束，也就是表中姓名不能重复，如果一个事务对姓名字段进行了修改，但是在事务提交后，表中的姓名变得非唯一性了，这就破坏了事务的一致性要求，这时数据库就要撤销该事务，返回初始化的状态I：隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致D：持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失<br>InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？持久性是通过 redo log （重做日志）来保证的；原子性是通过 undo log（回滚日志） 来保证的；隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；一致性则是通过持久性+原子性+隔离性来保证；</code></pre></details><details>    <summary>脏读、不可重复读、幻读（严重性依次减弱）</summary><pre><code>简略脏读：读到其他事务未提交的数据；不可重复读：前后读取的数据不一致；幻读：前后读取的记录数量不一致<br>详细脏读：如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象不可重复读：在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象幻读：在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象</code></pre></details><details>    <summary>MySQL隔离级别</summary><pre><code>四种隔离级别读未提交（read uncommitted），指一个事务还没提交时，它做的变更就能被其他事务看到；读提交（read committed），指一个事务提交之后，它做的变更才能被其他事务看到；可重复读（repeatable read），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；串行化（serializable ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行<br>InnoDB默认隔离级别如何解决幻读？InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它通过next-key lock 锁（行锁和间隙锁的组合）来锁住记录之间的“间隙”和记录本身，防止其他事务在这个记录之间插入新的记录，这样就避免了幻读现象<br>四种隔离级别的实现原理对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View</code></pre></details><details>    <summary>MySQL的MVCC</summary><pre><code>当前读与快照读1. 当前读：它读取的数据库记录，都是当前最新的版本，会对当前读取的数据进行加锁，防止其他事务修改数据。是悲观锁的一种操作2. 快照读：快照读的实现是基于多版本并发控制，即MVCC，既然是多版本，那么快照读读到的数据不一定是当前最新的数据，有可能是之前历史版本的数据<br>MVCC=>快照读1. Multi-Version Concurrency Control，即多版本并发控制，主要是为了提高数据库的并发性能2. 同一行数据平时发生读写请求时，会上锁阻塞住。但MVCC用更好的方式去处理读-写请求，做到在发生读-写请求冲突时不用加锁（这个读是指的快照读，而不是当前读，当前读是一种加锁操作，是悲观锁）3. MVCC指的就是在使用READ COMMITTD（读提交）、REPEATABLE READ（可重复读）这两种隔离级别的事务在执行普通的SEELCT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能</code></pre></details><details>    <summary>数据库的设计中有哪些模块？——存储引擎、优化器</summary><pre><code>1. 连接层：最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信，主要完成一些类似于连接处理、授权认证、及相关的安全方案2. 服务层：第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等3. 引擎层：存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎4. 数据存储层，主要是将数据存储在文件系统之上，并完成与存储引擎的交互</code></pre></details><details>    <summary>MySQL索引</summary><pre><code>1. Primary Key（聚集索引）：InnoDB存储引擎的表会存在主键（唯一非null），如果建表的时候没有指定主键，则会使用第一非空的唯一索引作为聚集索引，否则InnoDB会自动帮你创建一个不可见的、长度为6字节的row_id用来作为聚集索引。2. 单列索引：单列索引即一个索引只包含单个列3. 组合索引：组合索引指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用。使用组合索引时遵循最左前缀集合4. Unique（唯一索引）：索引列的值必须唯一，但允许有空值。若是组合索引，则列值的组合必须唯一。主键索引是一种特殊的唯一索引，不允许有空值5. Key（普通索引）：是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值6. FULLTEXT（全文索引）：全文索引类型为FULLTEXT，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引可以在CHAR、VARCHAR或者TEXT类型的列上创建7. SPATIAL（空间索引）：空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING和POLYGON。MySQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类似的语法创建空间索引。创建空间索引的列必须声明为NOT NULL</code></pre></details><details>    <summary>MySQL优化技巧</summary><pre><code>1. 查看SQL执行频率：show [session|global] status 命令可以提供服务器状态信息2. 定位低效率执行SQL：慢查询日志、show processlist（慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化）3. explain分析执行计划4. show profile分析SQL</code></pre></details><details>    <summary>MySQL的回表机制</summary><pre><code>1. 先检查二级索引的 B+Tree 的索引值，找到对应的叶子节点，然后获取主键值2. 然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据3. 即要查两个 B+Tree 才能查到数据4. 在查询时使用了二级索引，如果查询的数据能在二级索引里查询的到，那么就不需要回表，这个过程就是覆盖索引5. 如果查询的数据不在二级索引里，就会先检索二级索引，找到对应的叶子节点，获取到主键值后，然后再检索主键索引，就能查询到数据了，这个过程就是回表</code></pre></details><details>    <summary>红黑树</summary><pre><code>红黑树概念：红黑二叉树(简称：红黑树)，它首先是一棵二叉树，同时也是一棵自平衡的排序二叉树1. 每个节点要么是红色，要么是黑色2. 根节点永远是黑色的。3. 所有的叶节点都是空节点(即 null)，并且是黑色的。4. 每个红色节点的两个子节点都是黑色。(从每个叶子到根的路径上不会有两个连续的红色节点)5. 从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点<br>系列问题1. 保证平衡性的好处：便于查找，红黑树的高度近似 log2n，所以它是近似平衡，插入、删除、查找操作的时间复杂度都是 O(logn)2. 是二叉树嘛？：是的3. 和B+树的区别：二叉树和多叉树，红黑树结构的数据常常存在于主存中，主要用于快速查找。树的每个节点存储的数据量比较小，cpu通过与主存少量的交互就能获取树的全部数据，并快速的查找到所需数据。而B+树形式的数据常常存在于SSD或磁盘中，由于树的深度比较小(一般3~4)，能够减少cpu于磁盘间的交互时间4. 缺点：二叉树导致树太高5. 并发调整会不会有影响：不是线程安全的</code></pre></details><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h1 id="情景设计"><a href="#情景设计" class="headerlink" title="情景设计"></a>情景设计</h1><details>    <summary>设计一个数据结构：线程间数据隔离、线程内数据共享</summary><pre><code>1. 有一个Person对象，通过入参的传递进行实现2. 使用map绑定线程ID和数据值3. C++11 thread_local</code></pre></details><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li><p>记录内容丰富，但暂未自己归纳的博客</p></li><li><p><a href="http://t.zoukankan.com/wkfvawl-p-11679062.html">操作系统——存储管理的概念</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左程云课程总结</title>
      <link href="/algorithm/Algorithm-zuo/"/>
      <url>/algorithm/Algorithm-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>记录一下左程云算法讲课的内容，方便查找</li><li><a href="https://www.bilibili.com/video/BV1YL4y1v7Hy">左程云：算法</a></li><li>基础提升<ul><li>哈希函数与哈希表：大文件限制内存求数字、哈希表与哈希函数性质、布隆过滤器与位图、一致性哈希</li><li>有序表与并查集：岛屿问题、并查集、KMP</li><li>KMP与Manacher：Manacher算法、窗口内最大值最小值更新结构、单调栈</li><li>滑动窗口与单调栈：树形DP、Morris遍历、大文件小内存问题</li><li>二叉树的Morris遍历：大数据题目解题技巧（大文件找中位数、重复数）、位运算（不使用比较进行比较、幂次判断、加减乘除）</li><li>大数据题目：暴力递归改动态规划（机器人移动，最少的硬币数）</li></ul></li><li>技巧<ul><li>中级提升班1：滑动窗口、打表优化、预处理、随机函数位运算</li><li>中级提升班2、3：递归转dp、遍历、哈希表、业务分析、dp、辅助栈、二叉树套路、右上角查找</li><li>中级提升班4：业务分析（考虑当前位置）、宏观调度（旋转打印类）</li></ul></li></ul><h1 id="基础提升-哈希函数与哈希表（P40）"><a href="#基础提升-哈希函数与哈希表（P40）" class="headerlink" title="基础提升-哈希函数与哈希表（P40）"></a>基础提升-哈希函数与哈希表（P40）</h1><h2 id="哈希函数性质介绍"><a href="#哈希函数性质介绍" class="headerlink" title="哈希函数性质介绍"></a>哈希函数性质介绍</h2><ul><li>视频：<code>0:02:40-0:21:00</code></li></ul><h2 id="求大文件中出现次数最多的数（内存限制1G）"><a href="#求大文件中出现次数最多的数（内存限制1G）" class="headerlink" title="求大文件中出现次数最多的数（内存限制1G）"></a>求大文件中出现次数最多的数（内存限制1G）</h2><ul><li>视频：<code>0:21:00-0:36:40</code></li><li>有一个大文件，里面数的范围是$[0, 2^{32}-1]$，数量为<code>40亿</code>，内存限制为<code>1G</code>，求<strong>出现次数最多的数</strong></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220415093025325.png" alt="image-20220415093025325"></p><h3 id="思路1——直接使用哈希表进行统计"><a href="#思路1——直接使用哈希表进行统计" class="headerlink" title="思路1——直接使用哈希表进行统计"></a><del>思路1——直接使用哈希表进行统计</del></h3><ul><li>这种方案不行，会爆内存</li><li>因为哈希表中一条记录至少<code>8字节</code>，还不考虑额外开销，<font color="red">当40亿个数都不相同时</font>，所占内存为<code>8字节 * 40亿 = 320亿字节 = 32G</code>(因为$1G &#x3D; 2^{30}字节\approx10亿$)</li></ul><h3 id="思路2——哈希表改进"><a href="#思路2——哈希表改进" class="headerlink" title="思路2——哈希表改进"></a>思路2——哈希表改进</h3><ul><li><font color="red">前置知识</font><ul><li>哈希表空间的使用只和<strong>不同数的种类有关</strong>，即假设1出现2次和3出现1w次，所占用的空间一样，都是8字节（不考虑额外开销，key和val都是int）</li><li>经过哈希函数计算后，数在$[0,S]$均匀分布，那么再模上一个M，最终在$[0,M-1]$均匀分布</li></ul></li><li>对文件中的每个数用一个<strong>哈希函数</strong>计算得到一个结果，然后<strong>对一个M取模</strong>（此处取M&#x3D;100），那么<strong>每个数</strong>会均匀分布在0-99号文件（相同的数会进同一个文件），即0-99号文件中，<strong>数的种类接近</strong></li><li>然后找到每个文件中出现次数最多的那个，合并100个结果，即可找到最终答案</li><li>由于分成了100个文件，那么每个文件所占用的空间只有<code>32G/100</code>，符合要求</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220415095421591.png" alt="image-20220415095421591"></p><h2 id="哈希表性质介绍"><a href="#哈希表性质介绍" class="headerlink" title="哈希表性质介绍"></a>哈希表性质介绍</h2><ul><li>视频：<code>0:36:40-0:54:20</code></li><li>哈希函数 + 开链法</li></ul><h2 id="设计RandomPool结构"><a href="#设计RandomPool结构" class="headerlink" title="设计RandomPool结构"></a>设计RandomPool结构</h2><ul><li>视频：<code>0:54:20-1:07:35</code></li><li><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/">380. O(1) 时间插入、删除和获取随机元素</a></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220415101001875.png" alt="image-20220415101001875"></p><h3 id="思路及代码"><a href="#思路及代码" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>哈希表+数组或者两个哈希表+数量size<ul><li>哈希表 + 数组：哈希表存<code>[字符串，下标]</code>，数组存<code>[下标，字符串]</code></li><li>两个哈希表：哈希表1存<code>[字符串，下标]</code>，哈希表2存<code>[下标，字符串]</code>，size即为元素个数</li></ul></li><li>删除时，和最后一个元素进行交换</li><li>等概率返回：使用随机生成器<code>rand()</code>得到<code>0-size-1</code>的数，返回即可</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// value对应的下标</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; valToIndex;</span><br><span class="line">    <span class="comment">// 存储value</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valToIndex.<span class="built_in">count</span>(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        valToIndex[val] = arr.<span class="built_in">size</span>();</span><br><span class="line">        arr.<span class="built_in">push_back</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!valToIndex.<span class="built_in">count</span>(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到对应元素的下标</span></span><br><span class="line">        <span class="type">int</span> index = valToIndex[val];</span><br><span class="line">        <span class="comment">// 把arr中对应的元素和arr中最后一个元素互换位置</span></span><br><span class="line">        valToIndex[arr.<span class="built_in">back</span>()] = index;</span><br><span class="line">        <span class="built_in">swap</span>(arr[index], arr.<span class="built_in">back</span>());</span><br><span class="line">        valToIndex.<span class="built_in">erase</span>(val);</span><br><span class="line">        arr.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="built_in">rand</span>() % arr.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet* obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="布隆过滤器与位图"><a href="#布隆过滤器与位图" class="headerlink" title="布隆过滤器与位图"></a>布隆过滤器与位图</h2><ul><li>视频：<code>1:07:35-1:55:40</code></li></ul><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><p>需要一个集合（有增加、查询功能，没有删除功能）</p><ul><li>如维护一个网址黑名单，存放<code>url</code>，每个<code>url</code>限制为64字，共100亿条数据</li><li>如爬虫去重问题：多线程时不想爬取同一个<code>url</code></li></ul></li><li><p>直接用<code>hashset</code>存，内存代价较高，即需要<code>64字节 * 100亿= 6400亿字节 = 640G</code></p></li><li><p><code>布隆过滤器</code>：放置在内存，但允许一定的失误率，失误率指<strong>不在黑名单，但误报了在里面</strong>（通过人为设计，可以降得很低）</p></li></ul><h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><ul><li><p><code>位图</code>：每个位置是<code>1 bit</code>，那么长度为100的共占<code>100 * 1/8 字节</code></p></li><li><p>实现：通过基础类型拼凑实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author       : 955nice</span></span><br><span class="line"><span class="comment"> * @Date         : 2022-04-15 10:40:48</span></span><br><span class="line"><span class="comment"> * @version      : 1.0</span></span><br><span class="line"><span class="comment"> * @LastEditors  : 955nice</span></span><br><span class="line"><span class="comment"> * @LastEditTime : 2022-04-15 10:57:41</span></span><br><span class="line"><span class="comment"> * @Description  : 基础类型实现bitmap</span></span><br><span class="line"><span class="comment"> * @FilePath     : /code/job/bitmap.cpp</span></span><br><span class="line"><span class="comment"> * Talk is cheap, Show me the code</span></span><br><span class="line"><span class="comment"> * @refer        : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;          <span class="comment">// 32bit:4byte * 8bit</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];        <span class="comment">// 320bit:4 byte * 8bit * 10</span></span><br><span class="line">    <span class="comment">// arr[0] int 0 ~ 31</span></span><br><span class="line">    <span class="comment">// arr[1] int 32 ~ 63</span></span><br><span class="line">    <span class="comment">// arr[2] int 64 ~ 95</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 想取得178bit的状态</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">178</span>;        </span><br><span class="line">    <span class="type">int</span> numIndex = <span class="number">178</span> / <span class="number">32</span>;</span><br><span class="line">    <span class="type">int</span> bitIndex = <span class="number">178</span> % <span class="number">32</span>;</span><br><span class="line">    <span class="comment">// 拿到第i位的状态</span></span><br><span class="line">    <span class="type">int</span> s = ((arr[numIndex] &gt;&gt; bitIndex) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 将第i位的状态修改为1</span></span><br><span class="line">    arr[numIndex] = arr[numIndex] | (<span class="number">1</span> &lt;&lt; bitIndex);</span><br><span class="line">    <span class="comment">// 将第i位的状态修改为0</span></span><br><span class="line">    arr[numIndex] = arr[numIndex] &amp; (~(<span class="number">1</span> &lt;&lt; bitIndex));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><ul><li><p>哈希函数 + 位图</p></li><li><p>每一个<code>url</code>使用<code>k</code>个哈希函数进行求值，求得的结果再模以<code>M</code>（位图长度），得到最终结果，将<code>位图</code>中这一位的状态修改为1（假设初始为0）</p></li><li><p>在查询某个<code>url</code>时，同样使用<code>k</code>个哈希函数进行求值，求得的结果再模以M，得到最终结果，如果和位图中这些位都为1，那么即存在在黑名单中</p><p><img src="/algorithm/Algorithm-zuo/image-20220415110611501.png" alt="image-20220415110611501"></p></li><li><p><strong>位图M越大，失误率越低</strong>，哈希函数数量k与数据和位图大小有关</p><p><img src="/algorithm/Algorithm-zuo/image-20220415110711862.png" alt="image-20220415110711862"></p></li></ul><h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><ul><li>使用前提<ul><li>符合集合查询的要求</li><li>要求知道<code>样本量n</code>和<code>失误率p</code></li><li>注：单样本大小不影响布隆过滤器设计</li></ul></li><li>公式1：$m &#x3D; -\frac{n*lnp}{(ln2)^2}$，计算位图大小，那么假设失误率<code>p=0.0001</code>，<code>n=100亿</code>，那么占用内存大约为<code>26G</code></li><li>公式2：$k &#x3D; ln2<em>\frac{m}{n} \approx 0.7</em>\frac{m}{n}$，计算哈希函数个数，约等于19（向上取整）</li><li>公式3：$p_{真}&#x3D;(1-e^{-\frac{n*k_{真}}{m_{真}}})^{k_{真}}$，如果实际内存可以更大，可以算出真实失误率</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220415111956140.png" alt="image-20220415111956140"></p><h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><ul><li>视频：<code>1:59:00-2:26:30</code></li><li><a href="https://mp.weixin.qq.com/s/hJHMlbQpANwMjx9BetwkUg">小林：一致性哈希</a></li></ul><h1 id="基础提升-有序表与并查集（P41）"><a href="#基础提升-有序表与并查集（P41）" class="headerlink" title="基础提升-有序表与并查集（P41）"></a>基础提升-有序表与并查集（P41）</h1><h2 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h2><ul><li>视频：<code>0:03:00-0:19:15</code></li><li><a href="https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/">参考：岛屿问题通解</a></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220422084336631.png" alt="image-20220422084336631"></p><h3 id="思路及代码-1"><a href="#思路及代码-1" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>标准<code>bfs</code>感染过程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; arr, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &lt;= n || arr[i][j] != <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    arr[i][j] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">bfs</span>(arr, m, n, i - <span class="number">1</span>, j);</span><br><span class="line">    <span class="built_in">bfs</span>(arr, m, n, i + <span class="number">1</span>, j);</span><br><span class="line">    <span class="built_in">bfs</span>(arr, m, n, i, j - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">bfs</span>(arr, m, n, i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = arr.<span class="built_in">size</span>(), n = arr[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="built_in">bfs</span>(arr, m, n, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><ul><li>视频：<code>0:25:00-1:05:50</code></li></ul><h3 id="思路及代码-2"><a href="#思路及代码-2" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>和视频略有不同，为C++标准版</li><li>代码为<a href="https://blog.csdn.net/weixin_42295205/article/details/111493421">LC1135：最低成本连通所有城市</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author       : 955nice</span></span><br><span class="line"><span class="comment"> * @Date         : 2022-04-01 10:04:34</span></span><br><span class="line"><span class="comment"> * @version      : 1.0</span></span><br><span class="line"><span class="comment"> * @LastEditors  : 955nice</span></span><br><span class="line"><span class="comment"> * @LastEditTime : 2022-04-01 11:06:27</span></span><br><span class="line"><span class="comment"> * @Description  : 并查集</span></span><br><span class="line"><span class="comment"> * @FilePath     : /code/job/union_search.cpp</span></span><br><span class="line"><span class="comment"> * Talk is cheap, Show me the code</span></span><br><span class="line"><span class="comment"> * @refer        : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量，记录合并后不同集合的数量</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化父亲为自己</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; father)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= father.<span class="built_in">size</span>(); i++) father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找x所在集合的根节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findFather</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; father, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = x;</span><br><span class="line">    <span class="comment">// 寻找根节点</span></span><br><span class="line">    <span class="keyword">while</span> (x != father[x]) &#123;</span><br><span class="line">        x = father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 路径压缩，只存每个节点的祖父</span></span><br><span class="line">    <span class="comment">// 此时x存放的是根节点，将路径上的所有节点的father都改成根节点</span></span><br><span class="line">    <span class="keyword">while</span> (a != father[a]) &#123;</span><br><span class="line">        <span class="type">int</span> z = a;                      <span class="comment">// 因为a会被father[a]覆盖，所以保存一下</span></span><br><span class="line">        a = father[a];                  <span class="comment">// a回溯父节点</span></span><br><span class="line">        father[z] = x;                  <span class="comment">// 将原先节点a的父亲修改为x</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minimumCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;conections, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 题目要求最小路径和，先根据路径和进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(conections.<span class="built_in">begin</span>(), conections.<span class="built_in">end</span>(), [&amp;](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;<span class="keyword">return</span> a[<span class="number">2</span>] &lt; b[<span class="number">2</span>];&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; conections.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; conections[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; conections[i][<span class="number">1</span>] &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; conections[i][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">father</span><span class="params">(n + <span class="number">1</span>)</span></span>;          <span class="comment">// 节点一般从1开始，所以数组开大一个</span></span><br><span class="line">    <span class="built_in">init</span>(father);                       <span class="comment">// 初始化</span></span><br><span class="line">    <span class="type">int</span> dis = <span class="number">0</span>;                        <span class="comment">// 最小通路路径</span></span><br><span class="line">    <span class="comment">// 根据规则建立并查集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; conections.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> a = conections[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> b = conections[i][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> distance = conections[i][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> faA = <span class="built_in">findFather</span>(father, a);</span><br><span class="line">        <span class="type">int</span> faB = <span class="built_in">findFather</span>(father, b);</span><br><span class="line">        <span class="comment">// 不是一个集合，进行合并</span></span><br><span class="line">        <span class="keyword">if</span> (faA != faB) &#123;</span><br><span class="line">            father[faA] = faB;</span><br><span class="line">            dis += distance;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果两点之间不在一个集合，说明不能连通</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">findFather</span>(father, i) != <span class="built_in">findFather</span>(father, i - <span class="number">1</span>)) &#123;</span><br><span class="line">            cnt = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// 自定义节点个数</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;                          </span><br><span class="line">    <span class="comment">// conections[i]表示conections[i][0]和conections[i][1]之间的距离是conections[i][2]</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; conections = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> dis = <span class="built_in">minimumCost</span>(conections, n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cnt = &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;, distance = &quot;</span> &lt;&lt; dis &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="岛进阶（并行算法）"><a href="#岛进阶（并行算法）" class="headerlink" title="岛进阶（并行算法）"></a>岛进阶（并行算法）</h2><ul><li>二维数组巨大，需要先进行分割计算然后合并结果&#x3D;&gt;<font color="red">并查集</font></li><li>视频：<code>1:05:50-1:20:40</code></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>记录切割边界信息（由哪个点感染得到）</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220422090003628.png" alt="image-20220422090003628"></p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><ul><li>视频：<code>1:28:00-3:15:20</code></li></ul><h3 id="思路及代码-3"><a href="#思路及代码-3" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><a href="./%E7%AE%97%E6%B3%95%E5%BF%83%E5%BE%97%EF%BC%9A%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95.md/">详细笔记：KMP</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getNext</span><span class="params">(string str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str2.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = str2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="comment">// 人为规定前两个的值</span></span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当前要求的next[i]</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 表示 i 前一个 i-1 位置最长前缀和后缀长度</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="comment">// 如果相等，那么next[i]就等于next[i-1] + 1</span></span><br><span class="line">        <span class="comment">// 注意此时的next[i - 1]中i - 1不一定是i前面的位置，所以这里使用cnt</span></span><br><span class="line">        <span class="keyword">if</span> (str2[i - <span class="number">1</span>] == str2[cnt]) &#123;</span><br><span class="line">            next[i++] = ++cnt;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果不等，且cnt还能往前跳，那么继续比较</span></span><br><span class="line">            cnt = next[cnt];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 比较到的第0个还不等，那么说明此时没有前后缀相等的情况</span></span><br><span class="line">            next[i++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strstr</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注意，这是特殊要求，其他题目不一定是这样</span></span><br><span class="line">    <span class="keyword">if</span> (str2.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当str1长度小于str2长度时，一定无法匹配</span></span><br><span class="line">    <span class="keyword">if</span> (str1.<span class="built_in">size</span>() &lt; str2.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// i 用于匹配 str1 中的字符</span></span><br><span class="line">    <span class="comment">// j 用于匹配 str2 中的字符</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当两者都不越界时</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; str1.<span class="built_in">size</span>() &amp;&amp; j &lt; str2.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="comment">// 如果比较的两个字符相等，那么都往右边移动</span></span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next[j] == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 j 比较到了位置0，还不想等，此时 j 不能往前跳了，所以只能 i 往下移动</span></span><br><span class="line">            <span class="comment">// 条件等价于j == 0</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果 i 或者 j 越界了</span></span><br><span class="line">    <span class="keyword">return</span> j == str2.<span class="built_in">size</span>() ? i - j : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础提升-KMP与Manacher（P42）"><a href="#基础提升-KMP与Manacher（P42）" class="headerlink" title="基础提升-KMP与Manacher（P42）"></a>基础提升-KMP与Manacher（P42）</h1><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><ul><li>视频：<code>0:02:35-1:40:00</code></li></ul><h3 id="思路及代码-4"><a href="#思路及代码-4" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><a href="./%E7%AE%97%E6%B3%95%E5%BF%83%E5%BE%97%EF%BC%9A%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95.md/">详细笔记：Manacher</a></li><li>下列代码与笔记略有不同，与视频讲解一致，区别在于一个求长度，一个求真正的串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxLcpsLength</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理原串，添加特殊字符</span></span><br><span class="line">        string cur = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">            <span class="comment">// 需要分行写，否则会乱码</span></span><br><span class="line">            cur += c;</span><br><span class="line">            cur += <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = cur.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pArr</span><span class="params">(n)</span></span>;        <span class="comment">// 回文半径数组</span></span><br><span class="line">        <span class="type">int</span> C = <span class="number">-1</span>;                 <span class="comment">// 中心</span></span><br><span class="line">        <span class="type">int</span> R = <span class="number">-1</span>;                 <span class="comment">// 回文右边界的再往右一个位置，最右的有效区是R - 1，实际代码为了简便，做了一点小改进</span></span><br><span class="line">        <span class="type">int</span> maxLen = INT_MIN;       <span class="comment">// 扩出来的最大值</span></span><br><span class="line">        <span class="comment">// 对每一个位置都求回文半径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// i至少的回文区域，先给pArr[i]</span></span><br><span class="line">            <span class="comment">// 下面这行整合了四种情况</span></span><br><span class="line">            <span class="comment">// 如果i在R外，那么至少有一个位置（本身）不需要考虑</span></span><br><span class="line">            <span class="comment">// 如果i在R内，那么两者中的最小值即为至少的回文区域</span></span><br><span class="line">            pArr[i] = R &gt; i ? <span class="built_in">min</span>(pArr[<span class="number">2</span> * C - i], R - i) : <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 看是否还能扩展</span></span><br><span class="line">            <span class="comment">// 针对情况1和情况2的情况3，可以扩展</span></span><br><span class="line">            <span class="comment">// 针对情况2的情况1和情况2，进行一次比较就会失败，不会影响复杂度</span></span><br><span class="line">            <span class="keyword">while</span> (i + pArr[i] &lt; n &amp;&amp; i - pArr[i] &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur[i + pArr[i]] == cur[i - pArr[i]]) &#123;</span><br><span class="line">                    pArr[i]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断此时的回文右边界是否已经超出之前的位置，如果是进行更新</span></span><br><span class="line">            <span class="keyword">if</span> (i + pArr[i] &gt; R) &#123;</span><br><span class="line">                R = i + pArr[i];</span><br><span class="line">                C = i;</span><br><span class="line">            &#125;</span><br><span class="line">maxLen = <span class="built_in">max</span>(maxLen, pArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxLen - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="窗口内最大值最小值更新结构——双端队列"><a href="#窗口内最大值最小值更新结构——双端队列" class="headerlink" title="窗口内最大值最小值更新结构——双端队列"></a>窗口内最大值最小值更新结构——双端队列</h2><ul><li>视频：<code>1:43:45-2:11:10</code></li><li><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59 - I. 滑动窗口的最大值</a></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220429201420122.png" alt="image-20220429201420122"></p><h3 id="思路及代码-5"><a href="#思路及代码-5" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>首先窗口左右边界<code>L</code>和<code>R</code>只能往右动，左边界永远不要超过右边界</p></li><li><p>求最<font color="red">大</font>值：保证双端队列是单调<font color="red">递减</font>的</p><blockquote><p>如果求最小值：<strong>保证双端队列是单调递增的</strong></p></blockquote></li><li><p>双端队列<code>deque</code>放<strong>下标</strong>（为了获得更多的信息）</p></li><li><p>时间复杂度：每个位置数最多进窗口一次，最多出窗口一次，双端队列的更新总代价为<code>O(n)</code>，一共n个数，所以<strong>单次的平均时间复杂度</strong>为<code>O(1)</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单调递减队列</span></span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; deq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果当前值比之前的大，那么在窗口内之前的必不可以为最大值</span></span><br><span class="line">            <span class="keyword">while</span> (!deq.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[deq.<span class="built_in">back</span>()]) deq.<span class="built_in">pop_back</span>();</span><br><span class="line">            deq.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans = &#123;nums[deq.<span class="built_in">front</span>()]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 如果当前值比之前的大，那么在窗口内之前的必不可以为最大值</span></span><br><span class="line">            <span class="keyword">while</span> (!deq.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[deq.<span class="built_in">back</span>()]) deq.<span class="built_in">pop_back</span>();</span><br><span class="line">            deq.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 如果窗口越界，一直弹出</span></span><br><span class="line">            <span class="keyword">while</span> (i - deq.<span class="built_in">front</span>() &gt;= k) deq.<span class="built_in">pop_front</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(nums[deq.<span class="built_in">front</span>()]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈*"></a>单调栈*</h2><ul><li>视频：<code>2:11:10-2:37:05</code></li><li><a href="https://leetcode-cn.com/problems/daily-temperatures/">739. 每日温度</a></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220429203236054.png" alt="image-20220429203236054"></p><h3 id="思路及代码-6"><a href="#思路及代码-6" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>无重复值：求左右比当前位置<font color="red">大</font>的最近位置：单调<font color="red">递减</font>栈</p></li><li><p>有重复值：单调栈每个元素时一个链表（相同数字串成链表）</p><p><img src="/algorithm/Algorithm-zuo/image-20220429204535765.png" alt="image-20220429204535765"></p></li></ul><h2 id="累计和与最小值乘积的最大值——单调栈"><a href="#累计和与最小值乘积的最大值——单调栈" class="headerlink" title="累计和与最小值乘积的最大值——单调栈*"></a>累计和与最小值乘积的最大值——单调栈*</h2><ul><li>视频：<code>2:37:05-2:47:55</code></li><li>数组中元素都为正数，子数组是连续的</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220429204727958.png" alt="image-20220429204727958"></p><h3 id="思路及代码-7"><a href="#思路及代码-7" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>要点：必须包含i位置的值，且i位置为子数组中的最小值，哪个子数组得到的指标A得到的结果最大</li><li>单调递增栈实现（即求出每个位置左右两边比当前位置小的范围）</li></ul><h1 id="基础提升——滑动窗口与单调栈（P43）"><a href="#基础提升——滑动窗口与单调栈（P43）" class="headerlink" title="基础提升——滑动窗口与单调栈（P43）"></a>基础提升——滑动窗口与单调栈（P43）</h1><h2 id="树形DP套路"><a href="#树形DP套路" class="headerlink" title="树形DP套路"></a>树形DP套路</h2><ul><li><p>使用前提</p><p><img src="/algorithm/Algorithm-zuo/image-20220430092551554.png" alt="image-20220430092551554"></p></li><li><p>步骤</p><p><img src="/algorithm/Algorithm-zuo/image-20220430092621169.png" alt="image-20220430092621169"></p></li></ul><h2 id="二叉树节点间的最大距离——树形DP"><a href="#二叉树节点间的最大距离——树形DP" class="headerlink" title="二叉树节点间的最大距离——树形DP"></a>二叉树节点间的最大距离——树形DP</h2><ul><li>视频：<code>0:03:05-0:21:35</code></li><li><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220430092708478.png" alt="image-20220430092708478"></p><h3 id="思路及代码-8"><a href="#思路及代码-8" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>考虑以<code>X</code>为头的数，两种情况</p><ul><li>最长距离和<code>X</code>有关，即路径经过<code>X</code></li><li>最长距离和<code>X</code>无关，即路径在<strong>左孩子</strong>上或路径在<strong>右孩子</strong>上</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220430093630400.png" alt="image-20220430093630400"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        <span class="type">int</span> maxDistance;</span><br><span class="line">        <span class="type">int</span> height;</span><br><span class="line">        <span class="built_in">Info</span>(<span class="type">int</span> dis, <span class="type">int</span> h):<span class="built_in">maxDistance</span>(dis), <span class="built_in">height</span>(h)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info* <span class="title">process</span><span class="params">(TreeNode* x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Info</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Info* leftInfo = <span class="built_in">process</span>(x-&gt;left);</span><br><span class="line">        Info* rightInfo = <span class="built_in">process</span>(x-&gt;right);</span><br><span class="line">        <span class="type">int</span> p1 = leftInfo-&gt;maxDistance;</span><br><span class="line">        <span class="type">int</span> p2 = rightInfo-&gt;maxDistance;</span><br><span class="line">        <span class="type">int</span> p3 = leftInfo-&gt;height + <span class="number">1</span> + rightInfo-&gt;height;</span><br><span class="line">        <span class="type">int</span> maxDistance = <span class="built_in">max</span>(p3, <span class="built_in">max</span>(p1, p2));</span><br><span class="line">        <span class="type">int</span> height = <span class="built_in">max</span>(leftInfo-&gt;height, rightInfo-&gt;height) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Info</span>(maxDistance, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(root)-&gt;maxDistance - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>附：全局变量记录法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来判断节点个数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">process</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">process</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">process</span>(root-&gt;right);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, left + right + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">process</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="排队最大快乐值"><a href="#排队最大快乐值" class="headerlink" title="排队最大快乐值"></a>排队最大快乐值</h2><ul><li>视频：<code>0:21:35-0:35:35</code></li><li><a href="https://blog.csdn.net/qq_45117263/article/details/113819919">派对的最大快乐值</a></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220430094905864.png" alt="image-20220430094905864"></p><h3 id="思路及代码-9"><a href="#思路及代码-9" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>分为两种大情况</p><ul><li>当前员工X来：那么下层员工都不能来，那么当前的值为<strong>X的快乐值 + 下级不来的最大快乐值</strong></li><li>当前员工不X来：那么下层员工可能来，求<strong>max(下级不来的最大快乐值, 下级来的最大快乐值)</strong></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220430095333492.png" alt="image-20220430095333492"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="type">int</span> happy;</span><br><span class="line">    vector&lt;Employee*&gt; nexts;</span><br><span class="line">    <span class="built_in">Employee</span>(<span class="type">int</span> h) : <span class="built_in">happy</span>(h)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> laiMaxHappy;</span><br><span class="line">    <span class="type">int</span> buMaxHappy;</span><br><span class="line">    <span class="built_in">Info</span>(<span class="type">int</span> lai, <span class="type">int</span> bu):<span class="built_in">laiMaxHappy</span>(lai), <span class="built_in">buMaxHappy</span>(bu)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Info* <span class="title">process</span><span class="params">(Employee* x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x 是基层员工</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;nexts.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Info</span>(x-&gt;happy, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lai = x-&gt;happy;</span><br><span class="line">    <span class="type">int</span> bu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : x-&gt;nexts) &#123;</span><br><span class="line">        Info* nextInfo = <span class="built_in">process</span>(v);</span><br><span class="line">        lai += nextInfo-&gt;buMaxHappy;</span><br><span class="line">        bu += <span class="built_in">max</span>(nextInfo-&gt;buMaxHappy, nextInfo-&gt;laiMaxHappy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Info</span>(lai, bu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxHappy</span><span class="params">(Employee* boss)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(boss == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Info* headInfo = <span class="built_in">process</span>(boss);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(headInfo-&gt;laiMaxHappy, headInfo-&gt;buMaxHappy);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, root;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; root;</span><br><span class="line">    vector&lt;Employee*&gt; all_people;</span><br><span class="line">    all_people.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="type">int</span> happy_val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; happy_val;</span><br><span class="line">        all_people.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Employee</span>(happy_val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> boss, sub;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        cin &gt;&gt; boss &gt;&gt; sub;</span><br><span class="line">        all_people[boss]-&gt;nexts.<span class="built_in">push_back</span>(all_people[sub]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">maxHappy</span>(all_people[root]);</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h2><ul><li>视频：<code>0:39:25-1:37:40</code></li></ul><h3 id="思路及代码-10"><a href="#思路及代码-10" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><a href="./%E7%AE%97%E6%B3%95%E5%BF%83%E5%BE%97%EF%BC%9A%E6%A0%91.md">详细笔记：Morris遍历</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Morris</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    TreeNode* cur = root;</span><br><span class="line">    TreeNode* mostRight = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        mostRight = cur-&gt;left;</span><br><span class="line">        <span class="comment">// 有左子树</span></span><br><span class="line">        <span class="keyword">if</span> (mostRight != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 找到左子树的最右节点，两种情况</span></span><br><span class="line">            <span class="comment">// 右子树为空或者执行cur</span></span><br><span class="line">            <span class="keyword">while</span>(mostRight-&gt;right != <span class="literal">nullptr</span> &amp;&amp; mostRight-&gt;right != cur) mostRight = mostRight-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (mostRight-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                mostRight-&gt;right = cur;</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mostRight-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有左子树或者第二次来到cur，cur向右移动</span></span><br><span class="line">        cur = cur-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树形DP与Morris"><a href="#树形DP与Morris" class="headerlink" title="树形DP与Morris"></a>树形DP与Morris</h2><ul><li>视频：<code>1:37:40-1:40:00</code></li><li>树形DP：必须做第三次信息的强整合</li><li>Morris：其他情况</li></ul><h2 id="大范围数小内存找没出现的数（内存限制1G）——位图"><a href="#大范围数小内存找没出现的数（内存限制1G）——位图" class="headerlink" title="大范围数小内存找没出现的数（内存限制1G）——位图"></a>大范围数小内存找没出现的数（内存限制1G）——位图</h2><ul><li>视频：<code>1:44:45-2:05:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220430102145837.png" alt="image-20220430102145837"></p><h3 id="基础：1GB"><a href="#基础：1GB" class="headerlink" title="基础：1GB"></a>基础：1GB</h3><ul><li>用整形表示位图，那么一个<code>int</code>为4字节，可以表示<code>32 bit</code></li><li>数的范围为$2^{32} - 1$，那么需要$2^{32}&#x2F;8$字节大小的空间（申请$2^{32}$bit大小的数组，一个字节表示8位，共需要512M即可）</li></ul><h3 id="进阶1：3KB"><a href="#进阶1：3KB" class="headerlink" title="进阶1：3KB"></a>进阶1：3KB</h3><ul><li>只有<code>3 KB</code>内存，求一个没出现的数字</li><li>首先看，<code>3 KB</code>内存可以支持开多大的整形数组&#x3D;&gt;<code>3 KB / 4 = 700+</code>，那么最接近的是<code>512</code>（512 * 4字节&#x3D;2KB）</li><li>然后将，范围内的数字分成<code>512</code>份，那么每一份为$2^{32} &#x2F; 2^9 &#x3D; 8388608$</li><li>此时，数组中的每一位表示<strong>某个范围内的数出现的次数</strong>，如<code>arr[0]</code>表示<code>0 ~ 8388607</code>出现的次数，依次类推</li><li>那么对于40亿中的某个数，落在的范围即<code>x / 8388608</code>，落在哪个位置，就词频++</li><li>那么范围为0 ~ 42亿，而数字为40亿个，那么必然有某个范围的数不足 8388608个</li><li>找到某个不足量的位置后，然后继续拆分，直到定位到没出现的数字</li></ul><h3 id="进阶2：有限几个变量"><a href="#进阶2：有限几个变量" class="headerlink" title="进阶2：有限几个变量"></a>进阶2：有限几个变量</h3><ul><li>先对<code>范围</code>二分（0~42亿），因为只有40亿数，所以必然有一边不足$2^{32} &#x2F; 2$，对不足的一半继续二分</li></ul><h1 id="基础提升——二叉树的Morris遍历（P44）"><a href="#基础提升——二叉树的Morris遍历（P44）" class="headerlink" title="基础提升——二叉树的Morris遍历（P44）"></a>基础提升——二叉树的Morris遍历（P44）</h1><h2 id="大数据题目解题技巧"><a href="#大数据题目解题技巧" class="headerlink" title="大数据题目解题技巧"></a>大数据题目解题技巧</h2><p><img src="/algorithm/Algorithm-zuo/image-20220503085948978.png" alt="image-20220503085948978"></p><h2 id="大数据范围找重复URL"><a href="#大数据范围找重复URL" class="headerlink" title="大数据范围找重复URL"></a>大数据范围找重复URL</h2><ul><li>视频：<code>0:02:35-0:13:45</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503090022098.png" alt="image-20220503090022098"></p><h3 id="基础——哈希函数"><a href="#基础——哈希函数" class="headerlink" title="基础——哈希函数"></a>基础——哈希函数</h3><ul><li>哈希函数分流：每一个URL算出一个哈希值，然后对m取模，所以<strong>一种URL会进一个小文件</strong>，然后依次对每个小文件计数，最后汇总</li><li>布隆过滤器（存在一定误差）：边添加边查询</li></ul><h3 id="补充——二维堆"><a href="#补充——二维堆" class="headerlink" title="补充——二维堆"></a>补充——二维堆</h3><ul><li>堆：<strong>根据系统配置，分成多个小文件</strong>，每个小文件按<strong>大根堆</strong>组织，然后准备一个<strong>总大根堆</strong>，里面放每个小文件的<code>top1</code>，然后依次从<strong>总大根堆</strong>弹出记录，并更新小文件（假设总大根堆的top1为文件3的top1，那么弹出总大根堆的top1且删除文件3的top1，并将文件3的top2加入总堆，依次类推，直到找到top100）</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503090902599.png" alt="image-20220503090902599"></p><h2 id="大范围小内存找出现了两次的数"><a href="#大范围小内存找出现了两次的数" class="headerlink" title="大范围小内存找出现了两次的数"></a>大范围小内存找出现了两次的数</h2><ul><li>视频：<code>0:13:45-0:36:25</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503091119731.png" alt="image-20220503091119731"></p><h3 id="基础：1GB-1"><a href="#基础：1GB-1" class="headerlink" title="基础：1GB"></a>基础：1GB</h3><ul><li><p><del>哈希函数分流</del>：因为会爆内存（一条记录至少8字节，最坏情况，40亿数都不相同，即320亿字节，大约为32G）</p></li><li><p>位图：用<strong>两个位图</strong>表示，那么对于$2^{32}$种数，每一个数用两位表示，换算成字节，共需要$2^{32} * 2 &#x2F; 8$字节，即<code>1G</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">00：表示没出现过</span></span><br><span class="line"><span class="comment">01：表示出现1次</span></span><br><span class="line"><span class="comment">10：表示出现2次</span></span><br><span class="line"><span class="comment">11：表示出现2次以上</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="进阶：10MB-10KB等——找中位数"><a href="#进阶：10MB-10KB等——找中位数" class="headerlink" title="进阶：10MB&#x2F;10KB等——找中位数"></a>进阶：10MB&#x2F;10KB等——找中位数</h3><ul><li>看给定的内存能支持开辟多大的<strong>无符号整形数组</strong>，每一位表示一个范围的词频数量<ul><li>对于10MB：10MB&#x2F;4B，最接近的$2^?$为$2^{20}$，即可以开这么大数组，那么数组每一位表示$2^{32}&#x2F;2^{20}$大小的数，记录累计词频即可</li><li>对于10KB：10KB&#x2F;4B，最接近的$2^?$为$2^{11}$，即可以开这么大数组，那么数组每一位表示$2^{32}&#x2F;2^{11}$大小的数，记录累计词频即可</li></ul></li><li>&#x3D;&#x3D;视频中每一位表示的范围说的有点问题，大概这个意思就行&#x3D;&#x3D;</li></ul><h2 id="补充题：无序大文件变有序大文件"><a href="#补充题：无序大文件变有序大文件" class="headerlink" title="补充题：无序大文件变有序大文件"></a>补充题：无序大文件变有序大文件</h2><ul><li><p>视频：<code>0:40:15-1:06:40</code></p></li><li><p>有一个无序的<code>10G</code>大文件，每一条记录是一个整数，给定<code>5G</code>内存，要求变成有序文件（保留所有数）</p></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503092735830.png" alt="image-20220503092735830"></p><h3 id="基础：5G内存"><a href="#基础：5G内存" class="headerlink" title="基础：5G内存"></a>基础：5G内存</h3><ul><li>堆：使用小根堆，小根堆存放<strong>某个数及其出现的次数</strong>，<font color="red">并根据数的大小进行组织，而不是出现的次数</font>，那么一条记录占用<code>8</code>字节（可能小根堆组织需要内存，所以可以假设一条记录使用16字节），因为对于<code>5G</code>内存，最多$5GB&#x2F;16B&#x3D;2^{28}$条记录，然后将范围等分成$2^{32}&#x2F;2^{28}&#x3D;16$份</li><li>然后从小范围到大范围依次统计出现的情况，并将其按照数的大小及词频添加到最终文件中</li></ul><h2 id="位运算——不使用比较比较大小"><a href="#位运算——不使用比较比较大小" class="headerlink" title="位运算——不使用比较比较大小"></a>位运算——不使用比较比较大小</h2><ul><li>视频：<code>1:06:40-1:22:45</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503094101352.png" alt="image-20220503094101352"></p><h3 id="思路及代码-11"><a href="#思路及代码-11" class="headerlink" title="思路及代码"></a>思路及代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author       : 955nice</span></span><br><span class="line"><span class="comment"> * @Date         : 2022-04-06 10:30:42</span></span><br><span class="line"><span class="comment"> * @version      : 1.0</span></span><br><span class="line"><span class="comment"> * @LastEditors  : 955nice</span></span><br><span class="line"><span class="comment"> * @LastEditTime : 2022-04-06 10:40:55</span></span><br><span class="line"><span class="comment"> * @Description  : 有符号32整数，比大小（不能使用比较判断）</span></span><br><span class="line"><span class="comment"> * @FilePath     : /code/job/bit_compare.cpp</span></span><br><span class="line"><span class="comment"> * Talk is cheap, Show me the code</span></span><br><span class="line"><span class="comment"> * @refer        : https://www.bilibili.com/video/BV1YL4y1v7Hy?p=44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 --&gt; 0</span></span><br><span class="line"><span class="comment">// 0 --&gt; 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">flip</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n ^ <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是非负数，返回1</span></span><br><span class="line"><span class="comment">// 如果是负数，返回0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">flip</span>((n &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可能溢出，所以后面做了单独判断</span></span><br><span class="line">    <span class="type">int</span> c = a - b;</span><br><span class="line">    <span class="type">int</span> sa = <span class="built_in">sign</span>(a);</span><br><span class="line">    <span class="type">int</span> sb = <span class="built_in">sign</span>(b);</span><br><span class="line">    <span class="type">int</span> sc = <span class="built_in">sign</span>(c);</span><br><span class="line">    <span class="type">int</span> diffSab = sa ^ sb;              <span class="comment">// a与b符号不一样为1，一样为0</span></span><br><span class="line">    <span class="type">int</span> sameSab = <span class="built_in">flip</span>(diffSab);        <span class="comment">// a与b符号一样为1，不一样为0</span></span><br><span class="line">    <span class="comment">// 返回A的情况</span></span><br><span class="line">    <span class="comment">// 如果a和b同符号，那么返回a的条件是，a - b ≥ 0</span></span><br><span class="line">    <span class="comment">// 如果a和b不是同符号，那么返回a的条件是，a ≥ 0</span></span><br><span class="line">    <span class="type">int</span> returnA = sameSab * sc + diffSab * sa;</span><br><span class="line">    <span class="type">int</span> returnB = <span class="built_in">flip</span>(returnA);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a * returnA + b * returnB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">-16</span>, b = <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getMax</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    a = <span class="number">2147483647</span>;</span><br><span class="line">    b = <span class="number">-2147483648</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getMax</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算——判断是否为2或4的幂次"><a href="#位运算——判断是否为2或4的幂次" class="headerlink" title="位运算——判断是否为2或4的幂次"></a>位运算——判断是否为2或4的幂次</h2><ul><li>视频：<code>1:25:55-1:34:15</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503094415811.png" alt="image-20220503094415811"></p><h3 id="思路及代码-12"><a href="#思路及代码-12" class="headerlink" title="思路及代码"></a>思路及代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author       : 955nice</span></span><br><span class="line"><span class="comment"> * @Date         : 2022-04-06 10:48:00</span></span><br><span class="line"><span class="comment"> * @version      : 1.0</span></span><br><span class="line"><span class="comment"> * @LastEditors  : 955nice</span></span><br><span class="line"><span class="comment"> * @LastEditTime : 2022-05-03 09:47:03</span></span><br><span class="line"><span class="comment"> * @Description  : 位运算判断是否为2的幂次，4的幂次</span></span><br><span class="line"><span class="comment"> * @FilePath     : /code/job/bit_power.cpp</span></span><br><span class="line"><span class="comment"> * Talk is cheap, Show me the code</span></span><br><span class="line"><span class="comment"> * @refer        : https://www.bilibili.com/video/BV1YL4y1v7Hy?p=44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一个1</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is2Power</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一个1且1出现在偶数位</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is4Power</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span> &amp;&amp; (n &amp; <span class="number">0x55555555</span>) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">4</span>, b = <span class="number">8</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">is2Power</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">is4Power</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">is2Power</span>(b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">is4Power</span>(b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算——加减乘除"><a href="#位运算——加减乘除" class="headerlink" title="位运算——加减乘除"></a>位运算——加减乘除</h2><ul><li>视频：<code>1:34:15-2:18:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220503094841763.png" alt="image-20220503094841763"></p><h3 id="思路及代码-13"><a href="#思路及代码-13" class="headerlink" title="思路及代码"></a>思路及代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author       : 955nice</span></span><br><span class="line"><span class="comment"> * @Date         : 2022-04-06 10:06:45</span></span><br><span class="line"><span class="comment"> * @version      : 1.0</span></span><br><span class="line"><span class="comment"> * @LastEditors  : 955nice</span></span><br><span class="line"><span class="comment"> * @LastEditTime : 2022-05-03 10:11:44</span></span><br><span class="line"><span class="comment"> * @Description  : 位运算实现加减乘除</span></span><br><span class="line"><span class="comment"> * @FilePath     : /code/job/bit_ammd.cpp</span></span><br><span class="line"><span class="comment"> * Talk is cheap, Show me the code</span></span><br><span class="line"><span class="comment"> * @refer        : https://www.bilibili.com/video/BV1YL4y1v7Hy?p=44，https://blog.csdn.net/yzt629/article/details/100545654</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加</span></span><br><span class="line"><span class="comment">// 异或：无进位相加</span></span><br><span class="line"><span class="comment">// 与：左移1位以后表示进位信息</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = a;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        sum = a ^ b;</span><br><span class="line">        b = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        a = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减：a - b = &gt; a + (-b)</span></span><br><span class="line"><span class="comment">// 获得相反数：取反加1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">negNum</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">my_add</span>(~a, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_minus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">my_add</span>(a, <span class="built_in">negNum</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断正负</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNeg</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line"><span class="comment">// 小学乘法知识，不过这里只有0和1两位</span></span><br><span class="line"><span class="comment">// 每次取b的最后一位，如果为1，那么应该是加上a左移了某位以后的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_multi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span> || b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先将被乘数与乘数全部弄为正数</span></span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">isNeg</span>(a) ? <span class="built_in">negNum</span>(a) : a;</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">isNeg</span>(b) ? <span class="built_in">negNum</span>(b) : b;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果最后一位是1，则进行加运算</span></span><br><span class="line">        <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">            res = <span class="built_in">my_add</span>(res, x);</span><br><span class="line">        <span class="comment">//无论是否进行了加运算，都将被乘数左移一位，乘数右移一位</span></span><br><span class="line">        x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//恢复符号，a^b为负值时表示两者异号，相乘必为负值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isNeg</span>(a) ^ <span class="built_in">isNeg</span>(b) ? <span class="built_in">my_add</span>(~res, <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">isNeg</span>(a) ? <span class="built_in">negNum</span>(a) : a;</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">isNeg</span>(b) ? <span class="built_in">negNum</span>(b) : b;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt; <span class="number">-1</span>; i = <span class="built_in">my_minus</span>(i, <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; i) &gt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            res |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            x = <span class="built_in">my_minus</span>(x, y &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isNeg</span>(a) ^ <span class="built_in">isNeg</span>(b) ? <span class="built_in">negNum</span>(res) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">7</span>, b = <span class="number">-3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">my_add</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">my_minus</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">my_multi</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">my_divide</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础提升——大数据题目（P45）"><a href="#基础提升——大数据题目（P45）" class="headerlink" title="基础提升——大数据题目（P45）"></a>基础提升——大数据题目（P45）</h1><h2 id="机器人左右移动——递归转DP"><a href="#机器人左右移动——递归转DP" class="headerlink" title="机器人左右移动——递归转DP"></a>机器人左右移动——递归转DP</h2><ul><li>视频：<code>0:02:45-0:59:50</code></li><li>题意：给定一个数组，表示机器人可以移动的范围，机器人起始位置为S，可以走K步，想要去到E，问有多少种方法</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220506091443610.png" alt="image-20220506091443610"></p><h3 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process1</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> E, <span class="type">int</span> cur, <span class="type">int</span> rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cur == E ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process1</span>(N, E, <span class="number">2</span>, rest - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur == N) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process1</span>(N, E, N - <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process1</span>(N, E, cur - <span class="number">1</span>, rest - <span class="number">1</span>) + <span class="built_in">process1</span>(N, E, cur + <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">walkWays1</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> E, <span class="type">int</span> S, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process1</span>(N, E, S, K);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process2</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> E, <span class="type">int</span> cur, <span class="type">int</span> rest, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; memo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (memo[cur][rest] != <span class="number">-1</span>) <span class="keyword">return</span> memo[cur][rest];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">        memo[cur][rest] = cur == E ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">        memo[cur][rest] = <span class="built_in">process2</span>(N, E, <span class="number">2</span>, rest - <span class="number">1</span>, memo);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == N) &#123;</span><br><span class="line">        memo[cur][rest] = <span class="built_in">process2</span>(N, E, N - <span class="number">1</span>, rest - <span class="number">1</span>, memo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        memo[cur][rest] = <span class="built_in">process2</span>(N, E, cur - <span class="number">1</span>, rest - <span class="number">1</span>, memo) + <span class="built_in">process2</span>(N, E, cur + <span class="number">1</span>, rest - <span class="number">1</span>, memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memo[cur][rest];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">walkWays2</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> E, <span class="type">int</span> S, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">memo</span>(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(K + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">    <span class="built_in">process2</span>(N, E, S, K, memo);</span><br><span class="line">    <span class="keyword">return</span> memo[S][K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li><font color="red">画图来帮助改DP</font></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">walkWays3</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> E, <span class="type">int</span> S, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(K + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    dp[E][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> rest = <span class="number">1</span>; rest &lt;= K; rest++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cur = <span class="number">1</span>; cur &lt;= N; cur++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[cur][rest] = dp[<span class="number">2</span>][rest - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == N) &#123;</span><br><span class="line">                dp[cur][rest] = dp[N - <span class="number">1</span>][rest - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[cur][rest] = dp[cur - <span class="number">1</span>][rest - <span class="number">1</span>] + dp[cur + <span class="number">1</span>][rest - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[S][K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="凑零钱（有重复，只能选一次）"><a href="#凑零钱（有重复，只能选一次）" class="headerlink" title="凑零钱（有重复，只能选一次）"></a>凑零钱（有重复，只能选一次）</h2><ul><li>视频：<code>1:05:50-2:03:01</code></li><li>题意：给定一个数组，代表硬币的面值（可能有重复，只能选一次），问凑出aim的最少硬币数量，不能凑出，返回-1</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220506094352472.png" alt="image-20220506094352472"></p><h3 id="暴力递归-1"><a href="#暴力递归-1" class="headerlink" title="暴力递归"></a>暴力递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> index, <span class="type">int</span> rest)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不能搞定，返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (rest &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搞定了，只需要0枚硬币</span></span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果选到最后一个硬币，还剩余rest，说明没解决</span></span><br><span class="line">    <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p1 = <span class="built_in">process1</span>(nums, index + <span class="number">1</span>, rest - nums[index]);</span><br><span class="line">    <span class="type">int</span> p2 = <span class="built_in">process1</span>(nums, index + <span class="number">1</span>, rest);</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="number">-1</span> &amp;&amp; p2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p1 != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + p1;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="number">1</span> + p1, p2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minCoins1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> aim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process1</span>(nums, <span class="number">0</span>, aim);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="记忆化搜索-1"><a href="#记忆化搜索-1" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> index, <span class="type">int</span> rest, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; memo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不能搞定，返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (rest &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搞定了，只需要0枚硬币</span></span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">        memo[index][rest] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> memo[index][rest];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        memo[index][rest] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> memo[index][rest];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (memo[index][rest] != <span class="number">-2</span>) <span class="keyword">return</span> memo[index][rest];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p1 = <span class="built_in">process1</span>(nums, index + <span class="number">1</span>, rest - nums[index]);</span><br><span class="line">    <span class="type">int</span> p2 = <span class="built_in">process1</span>(nums, index + <span class="number">1</span>, rest);</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="number">-1</span> &amp;&amp; p2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        memo[index][rest] = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p1 != <span class="number">-1</span>) &#123;</span><br><span class="line">        memo[index][rest] = <span class="number">1</span> + p1;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 != <span class="number">-1</span>) &#123;</span><br><span class="line">        memo[index][rest] = p2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        memo[index][rest] = <span class="built_in">min</span>(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memo[index][rest];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minCoins2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> aim)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">memo</span>(nums.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(aim + <span class="number">1</span>, <span class="number">-2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process2</span>(nums, <span class="number">0</span>, aim, memo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minCoins3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> aim)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(aim + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt;= n; index++) dp[index][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index = n - <span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> rest = <span class="number">1</span>; rest &lt;= aim; rest++) &#123;</span><br><span class="line">            <span class="type">int</span> p1 = rest - nums[index] &lt; <span class="number">0</span> ? <span class="number">-1</span> : dp[index + <span class="number">1</span>][rest - nums[index]];</span><br><span class="line">            <span class="type">int</span> p2 = dp[index + <span class="number">1</span>][rest];</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="number">-1</span> &amp;&amp; p2 == <span class="number">-1</span>) &#123;</span><br><span class="line">                dp[index][rest] = <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p1 != <span class="number">-1</span>) &#123;</span><br><span class="line">                dp[index][rest] = <span class="number">1</span> + p1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 != <span class="number">-1</span>) &#123;</span><br><span class="line">                dp[index][rest] = p2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[index][rest] = <span class="built_in">min</span>(p1, p2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][aim];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础提升——暴力递归（P46）"><a href="#基础提升——暴力递归（P46）" class="headerlink" title="基础提升——暴力递归（P46）"></a>基础提升——暴力递归（P46）</h1><h2 id="先手后手数组取数问题"><a href="#先手后手数组取数问题" class="headerlink" title="先手后手数组取数问题"></a>先手后手数组取数问题</h2><ul><li>视频：<code>0:03:15-0:30:00</code></li><li>有一个数组，里面数字全是正数，然后两个人依次从数组拿数（数被拿了就相当于从数组中删除，只能从数组头或者数组尾拿数），问拿出数的最大和</li></ul><h3 id="暴力递归-2"><a href="#暴力递归-2" class="headerlink" title="暴力递归"></a>暴力递归</h3><ul><li>设计两个函数：先手函数和后手函数，分别在$[L, R]$上取数，代码如下</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">s</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> L, <span class="type">int</span> R)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先手函数，在L, R上自由选数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只有一个数，先手拿完</span></span><br><span class="line">    <span class="keyword">if</span> (L == R) <span class="keyword">return</span> arr[L];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普遍情况</span></span><br><span class="line">    <span class="comment">// 选择拿头或者拿尾，先手拿完后，下一次变成后手</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(arr[L] + <span class="built_in">s</span>(arr, L + <span class="number">1</span>, R), arr[R] + <span class="built_in">s</span>(arr, L, R - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只有一个数，先手拿完了，后手拿不了</span></span><br><span class="line">    <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普遍情况</span></span><br><span class="line">    <span class="comment">// 先手拿了头，那么只能从[L + 1, R]中拿数</span></span><br><span class="line">    <span class="comment">// 先手拿了尾，那么只能从[L, R - 1]中拿数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">f</span>(arr, L + <span class="number">1</span>, R), <span class="built_in">f</span>(arr, L, R - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">win</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">empty</span>() || arr.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">f</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>), <span class="built_in">s</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-2"><a href="#动态规划-2" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li>根据暴力递归，f和s函数生成两个表</li><li>根据暴力递归主函数调用，确定最终需要的答案</li><li>左边界不可能大于右边界，所以两个动态规划表下半部分不需要，然后根据暴力递归画图确定填表路径</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">winDp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">empty</span>() || arr.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dpF</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dpS</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="comment">// 把退出条件给填好</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dpF[i][i] = arr[i];</span><br><span class="line">        dpS[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一定要画图来确定更新规则</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dpF[i][j] = <span class="built_in">max</span>(arr[i] + dpS[i + <span class="number">1</span>][j], arr[j] + dpS[i][j - <span class="number">1</span>]);</span><br><span class="line">            dpS[i][j] = <span class="built_in">min</span>(dpF[i + <span class="number">1</span>][j], dpF[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dpF[<span class="number">0</span>][n - <span class="number">1</span>], dpS[<span class="number">0</span>][n - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中级提升班1-P49"><a href="#中级提升班1-P49" class="headerlink" title="中级提升班1(P49)"></a>中级提升班1(P49)</h1><h2 id="绳子覆盖点问题——滑动窗口"><a href="#绳子覆盖点问题——滑动窗口" class="headerlink" title="绳子覆盖点问题——滑动窗口"></a>绳子覆盖点问题——滑动窗口</h2><ul><li>视频：<code>0:02:50-0:16:30</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220307085654830.png" alt="image-20220307085654830"></p><h3 id="思路及代码-14"><a href="#思路及代码-14" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>思路1：每个<strong>数轴上存在的点</strong>作为绳子<strong>右</strong>端点，<strong>二分查找</strong></p></li><li><p>思路2：每个<strong>数轴上存在的点</strong>作为绳子<strong>左</strong>端点，滑动窗口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> lens)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (R &lt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span> (R &lt; n &amp;&amp; vec[R] - vec[L] &lt;= lens) R++;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, R - L + <span class="number">1</span>);</span><br><span class="line">        L = R;</span><br><span class="line">        R++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="捆绑交易最少袋子数量——打表优化"><a href="#捆绑交易最少袋子数量——打表优化" class="headerlink" title="捆绑交易最少袋子数量——打表优化"></a>捆绑交易最少袋子数量——打表优化</h2><ul><li>视频：<code>0:16:30-0:44:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220307091430083.png" alt="image-20220307091430083"></p><h3 id="思路及代码-15"><a href="#思路及代码-15" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>提前筛选：奇数通通不行，偶数才继续试</p></li><li><p>普通思路：先尝试最大的8个袋子数，然后看剩下的苹果是否能被6整除，如果能，找到并返回，如果不能，减少8个袋子数</p></li><li><p>改进思路：在本题中，考虑到袋子数量是6和8，那么在剩余的苹果数超过24（最小公倍数），提前停止</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minBagBase6</span><span class="params">(<span class="type">int</span> rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rest % <span class="number">6</span> == <span class="number">0</span> ? rest / <span class="number">6</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minBags</span><span class="params">(<span class="type">int</span> apple)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (apple &lt; <span class="number">0</span> || apple &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> bag6 = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> bag8 = apple / <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> rest = apple - bag8 * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">while</span> (bag8 &gt;= <span class="number">0</span> &amp;&amp; res &lt; <span class="number">24</span>) &#123;</span><br><span class="line">        <span class="type">int</span> resUse6 = <span class="built_in">minBagBase6</span>(rest);</span><br><span class="line">        <span class="keyword">if</span> (resUse6 != <span class="number">-1</span>) &#123;</span><br><span class="line">            bag6 = resUse6;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rest = apple - <span class="number">8</span> * (--bag8);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bag6 == <span class="number">-1</span> ? <span class="number">-1</span> : bag8 + bag6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进阶思路：<font color="red">如果输入和输出都是一个数，那么可以通过打表发现规律</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minBagAwesome</span><span class="params">(<span class="type">int</span> apple)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((apple &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (apple &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> apple == <span class="number">0</span> ? <span class="number">0</span> : (apple == <span class="number">6</span> || apple == <span class="number">8</span>) ? <span class="number">1</span> : (apple == <span class="number">12</span> || apple == <span class="number">14</span> || apple == <span class="number">16</span>) ? <span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (apple - <span class="number">18</span>) / <span class="number">8</span> + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="补充题：先手后手-4-k-吃草——打表优化"><a href="#补充题：先手后手-4-k-吃草——打表优化" class="headerlink" title="补充题：先手后手$4^k$吃草——打表优化"></a>补充题：先手后手$4^k$吃草——打表优化</h2><ul><li><p>视频：<code>0:44:00-1:10:10</code></p></li><li><p>两只动物，先后吃草，没只动物只能吃$4^k,k≥0$数量的草，输入草的数量$N$，问谁赢？（谁先吃完草谁赢）</p></li></ul><h3 id="思路及代码-16"><a href="#思路及代码-16" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>普通思路：分析普通情况，然后考虑<font color="red">当前的尝试逻辑，先吃1份，看能不能赢，如果不能，尝试吃4份，直到越界或者找到答案</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">winner1</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (n == <span class="number">0</span> || n == <span class="number">2</span>) ? <span class="string">&quot;后手&quot;</span>:<span class="string">&quot;先手&quot;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 先手决定吃的草</span></span><br><span class="line">    <span class="type">int</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (base &lt;= n) &#123;</span><br><span class="line">        <span class="comment">// 母过程的先手是子过程的后手</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">winner1</span>(n - base) == <span class="string">&quot;后手&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;先手&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (base &gt; n / <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        base *= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;后手&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打表：通过尝试多个输入，找到规律</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">winner2</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">0</span> || n % <span class="number">5</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;后手&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;先手&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="染色的最少次数——预处理-前缀后缀和"><a href="#染色的最少次数——预处理-前缀后缀和" class="headerlink" title="染色的最少次数——预处理(前缀后缀和)"></a>染色的最少次数——预处理(前缀后缀和)</h2><ul><li>视频：<code>1:10:10-1:28:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220307094937068.png" alt="image-20220307094937068"></p><h3 id="思路及代码-17"><a href="#思路及代码-17" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>说明：讲的时候可能看错题了，题目要求左R右G，他说的是左G右R，不影响</p></li><li><p>普通思路：划分为左右两侧，即左侧全为G（如果是R就需要染色），右侧全为R（如果是G就需要染色）</p><p><img src="/algorithm/Algorithm-zuo/image-20220307095315301.png" alt="image-20220307095315301"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minPaint1</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 枚举左侧部分为L，右侧部分为N-L</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> L = <span class="number">0</span>; L &lt;= N; L++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 统计s[0..N-1]有多少个R    </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L == N) &#123;</span><br><span class="line">            <span class="comment">// 统计s[0..N-1]有多少个G</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计s[0..L]有多少个G + 统计s[L + 1..N - 1]有多少个R</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进阶思路：提前处理<code>s[0..i]</code>上有多少个<code>R</code>(从左往右)，提前处理<code>s[i..N-1]</code>上有多少个<code>G</code>(从右往左)</p><p><img src="/algorithm/Algorithm-zuo/image-20220307100007294.png" alt="image-20220307100007294"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minPaint2</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 统计右侧有多少个R</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">    right[n - <span class="number">1</span>] = s[n - <span class="number">1</span>] == <span class="string">&#x27;R&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        right[i] = right[i + <span class="number">1</span>] + (s[i] == <span class="string">&#x27;R&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = right[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 统计左侧有多少个G</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        left += s[i] == <span class="string">&#x27;G&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        res = <span class="built_in">min</span>(res, left + right[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(res, left + (s[n - <span class="number">1</span>] == <span class="string">&#x27;G&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="边框全是1的最大值——预处理"><a href="#边框全是1的最大值——预处理" class="headerlink" title="边框全是1的最大值——预处理"></a>边框全是1的最大值——预处理</h2><ul><li>视频：<code>1:30:00-1:55:25</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220307100735538.png" alt="image-20220307100735538"></p><h3 id="思路及代码-18"><a href="#思路及代码-18" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>正方形：枚举左上角点开始，边长为1开始尝试，直接碰到边界</li><li>从<strong>右往左</strong>计算当前点右侧包括自己一共有几个<strong>连续的1</strong>，right矩阵(和原数组等规模)</li><li>从<strong>下往上</strong>计算当前点下侧包括自己一共有几个<strong>连续的1</strong>，down矩阵(和原数组等规模)</li></ul><h2 id="给定随机函数加工出另一个随机函数——位运算"><a href="#给定随机函数加工出另一个随机函数——位运算" class="headerlink" title="给定随机函数加工出另一个随机函数——位运算"></a>给定随机函数加工出另一个随机函数——位运算</h2><ul><li>视频：<code>1:55:25-2:06:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220307102805507.png" alt="image-20220307102805507"></p><ul><li>以第一题为例：如果随机函数返回1，2返回0，如果随机函数返回3，4返回1，如果是5重新计算，然后通过位运算（3位就可以，因为三位最大可以表示7）计算出等概率返回0~6即可</li></ul><h1 id="中级提升班2-3-P48-P50"><a href="#中级提升班2-3-P48-P50" class="headerlink" title="中级提升班2,3(P48,P50)"></a>中级提升班2,3(P48,P50)</h1><h2 id="不同二叉树结构——递归转dp"><a href="#不同二叉树结构——递归转dp" class="headerlink" title="不同二叉树结构——递归转dp"></a>不同二叉树结构——递归转dp</h2><ul><li>视频：P48<code>0:00:30-0:07:26</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308190755532.png" alt="image-20220308190755532"></p><h3 id="思路及代码-19"><a href="#思路及代码-19" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>全局考虑，分左孩子多少种情况，右树多少种情况，最后相乘&#x3D;&gt;递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 空树</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n <span class="number">-1</span>; i++) &#123;</span><br><span class="line">        res += <span class="built_in">process</span>(i) * <span class="built_in">process</span>(n - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归改动规</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dpWay</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 空树</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 外层循环表示总节点个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 表示左树节点个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            dp[i] += dp[j] * dp[i - j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="完整括号串需要添加的括号数量——遍历"><a href="#完整括号串需要添加的括号数量——遍历" class="headerlink" title="完整括号串需要添加的括号数量——遍历"></a>完整括号串需要添加的括号数量——遍历</h2><ul><li>视频：P48<code>0:07:26-0:17:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308192558217.png" alt="image-20220308192558217"></p><h3 id="思路及代码-20"><a href="#思路及代码-20" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>两个变量，<code>cnt</code>遇到左括号加一，遇到右括号减一，<code>ans</code>如果<code>cnt</code>再减会变成负数，那么加一</li><li>最终结果即为需要的左括号数量（cnt）加需要的右括号数量（ans）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">needParenthess</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt + ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差值为k的去重数字对——哈希表"><a href="#差值为k的去重数字对——哈希表" class="headerlink" title="差值为k的去重数字对——哈希表"></a>差值为k的去重数字对——哈希表</h2><ul><li>视频：P48<code>0:17:00-0:21:24</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308193051102.png" alt="image-20220308193051102"></p><h3 id="思路及代码-21"><a href="#思路及代码-21" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>用哈希表将数组中的元素存储，每次查找哈希表中<code>k-arr[i]</code>是否存在，存在即加入答案</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getGroups</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : vec) st.<span class="built_in">insert</span>(v);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : vec) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st.<span class="built_in">count</span>(k - v)) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="magic操作：两数组平均值——业务分析"><a href="#magic操作：两数组平均值——业务分析" class="headerlink" title="magic操作：两数组平均值——业务分析"></a>magic操作：两数组平均值——业务分析</h2><ul><li>视频：P48<code>0:21:24-结尾</code>+P50<code>0:00:00-0:05:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308193847742.png" alt="image-20220308193847742"></p><h3 id="思路及代码-22"><a href="#思路及代码-22" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>分析三种情况<ul><li>集合A和集合B平均值相等：无法进行操作，返回0</li><li>集合A的平均值大于集合B的平均值：只能在平均值大的集合中拿两个集合平均值之间的数</li></ul></li><li><font color="red">注意：平均值用double存储</font></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">avg</span><span class="params">(<span class="type">double</span> sum, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum / <span class="built_in">double</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxOps</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr1, vector&lt;<span class="type">int</span>&gt;&amp; arr2)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : arr1) sum1 += (<span class="type">double</span>)v;</span><br><span class="line">    <span class="type">double</span> sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : arr2) sum2 += (<span class="type">double</span>)v;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">avg</span>(sum1, arr1.<span class="built_in">size</span>()) == <span class="built_in">avg</span>(sum2, arr2.<span class="built_in">size</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arrMore;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arrLess;</span><br><span class="line">    <span class="type">double</span> sumMore = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> sumLess = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">avg</span>(sum1, arr1.<span class="built_in">size</span>()) &gt; <span class="built_in">avg</span>(sum2, arr2.<span class="built_in">size</span>())) &#123;</span><br><span class="line">        arrMore = arr1;</span><br><span class="line">        sumMore = sum1;</span><br><span class="line">        arrLess = arr2;</span><br><span class="line">        sumLess = sum2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arrMore = arr2;</span><br><span class="line">        sumMore = sum2;</span><br><span class="line">        arrLess = arr1;</span><br><span class="line">        sumLess = sum1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arrMore.<span class="built_in">begin</span>(), arrMore.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 因为要保证移动的元素在平均值较少集合中不存在，所以需要哈希表存储</span></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; setLess;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : arrLess) setLess.<span class="built_in">insert</span>(v);</span><br><span class="line">    <span class="type">int</span> moreSize = arrMore.<span class="built_in">size</span>();      <span class="comment">// 平均值大的集合还剩几个数</span></span><br><span class="line">    <span class="type">int</span> lessSize = arrLess.<span class="built_in">size</span>();      <span class="comment">// 平均值小的集合还剩几个数</span></span><br><span class="line">    <span class="type">int</span> ops = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrMore.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">double</span> cur = (<span class="type">double</span>)arrMore[i];</span><br><span class="line">        <span class="keyword">if</span> (cur &lt; <span class="built_in">avg</span>(sumMore, moreSize) &amp;&amp; cur &gt; <span class="built_in">avg</span>(sumLess, lessSize) &amp;&amp; !setLess.<span class="built_in">count</span>(arrMore[i])) &#123;</span><br><span class="line">            sumMore -= cur;</span><br><span class="line">            moreSize--;</span><br><span class="line">            sumLess += cur;</span><br><span class="line">            lessSize++;</span><br><span class="line">            setLess.<span class="built_in">insert</span>(arrMore[i]);</span><br><span class="line">            ops++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ops;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合法括号的深度——dp"><a href="#合法括号的深度——dp" class="headerlink" title="合法括号的深度——dp"></a>合法括号的深度——dp</h2><ul><li>视频：P50<code>0:05:00-0:26:15</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308200145219.png" alt="image-20220308200145219"></p><h3 id="思路及代码-23"><a href="#思路及代码-23" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>考虑以$i$结尾（包含）的位置</p><ul><li>如果为<code>(</code>：设为0</li><li>如果为<code>)</code>：那么看<strong>前一个位置<code>i-1</code>的结果的再往前一个位置P</strong><ul><li>如果是<code>(</code>，<strong>至少</strong>为<code>前一个位置结果+2</code>，并且需要接上<code>p-1</code>位置的答案</li><li>如果是<code>)</code>，结果为0</li></ul></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308200651585.png" alt="image-20220308200651585"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxLens</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || s == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(s.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            pre = i - dp[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (pre &gt;= <span class="number">0</span> &amp;&amp; s[pre] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + <span class="number">2</span> + (pre &gt; <span class="number">0</span> ? dp[pre - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使栈中元素升序排序——辅助栈"><a href="#使栈中元素升序排序——辅助栈" class="headerlink" title="使栈中元素升序排序——辅助栈"></a>使栈中元素升序排序——辅助栈</h2><ul><li>视频：P50<code>0:26:15-0:30:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308202023757.png" alt="image-20220308202023757"></p><h3 id="思路及代码-24"><a href="#思路及代码-24" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>准备一个辅助栈，递减栈，两个栈相互倒元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortStack</span><span class="params">(stack&lt;<span class="type">int</span>&gt;&amp; stk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">return</span> ;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; helper;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cur = stk.<span class="built_in">top</span>();</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span> (!helper.<span class="built_in">empty</span>() &amp;&amp; cur &gt; helper.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(helper.<span class="built_in">top</span>());</span><br><span class="line">            helper.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        helper.<span class="built_in">push</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!helper.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; helper.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        stk.<span class="built_in">push</span>(helper.<span class="built_in">top</span>());</span><br><span class="line">        helper.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数字转字符串个数：递归转dp"><a href="#数字转字符串个数：递归转dp" class="headerlink" title="数字转字符串个数：递归转dp"></a>数字转字符串个数：递归转dp</h2><ul><li>视频：P50<code>0:30:30-0:46:19</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308203201333.png" alt="image-20220308203201333"></p><h3 id="思路及代码-25"><a href="#思路及代码-25" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>递归：<strong>从左往右尝试模型</strong></p><ul><li>如果当前位置为<code>0</code>，表示不能匹配，返回0</li><li>如果当前位置等于字符串长度，说明找到了一种匹配方式，返回1</li><li>普遍位置：下一次递归从<code>index+1</code>开始，如果此时<code>index</code>已经到了最后一位，那么直接返回，如果还有下一位，那么判断是否小于27</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process</span><span class="params">(string str, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开头为0，不能进行匹配</span></span><br><span class="line">    <span class="keyword">if</span> (str[index] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历到结尾，找到一种可能性</span></span><br><span class="line">    <span class="keyword">if</span> (index == str.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">process</span>(str, index + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 到了最后一个字符了</span></span><br><span class="line">    <span class="keyword">if</span> (index == str.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (((str[index] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + str[index + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) &lt; <span class="number">27</span>) &#123;</span><br><span class="line">        res += <span class="built_in">process</span>(str, index + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归转dp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dpWays</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    dp[n] = <span class="number">1</span>;</span><br><span class="line">    dp[n - <span class="number">1</span>] = str[n - <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            dp[i] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = dp[i + <span class="number">1</span>] + (((str[i] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + str[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) &lt; <span class="number">27</span> ? dp[i + <span class="number">2</span>] : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二叉树，根节点到叶结点的最大路径和——二叉树套路"><a href="#二叉树，根节点到叶结点的最大路径和——二叉树套路" class="headerlink" title="二叉树，根节点到叶结点的最大路径和——二叉树套路"></a>二叉树，根节点到叶结点的最大路径和——二叉树套路</h2><ul><li>视频：P50<code>0:46:19-1:00:45</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308204817149.png" alt="image-20220308204817149"></p><h3 id="思路及代码-26"><a href="#思路及代码-26" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>二叉树套路题，找左右两个孩子要答案</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">process</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left = root-&gt;left ? <span class="built_in">process</span>(root-&gt;left) : <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = root-&gt;right ? <span class="built_in">process</span>(root-&gt;right) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + root-&gt;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维矩阵搜索（每行每列升序）——右上角查找"><a href="#二维矩阵搜索（每行每列升序）——右上角查找" class="headerlink" title="二维矩阵搜索（每行每列升序）——右上角查找"></a>二维矩阵搜索（每行每列升序）——右上角查找</h2><ul><li>视频：P50<code>1:01:15-1:04:45</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308210030745.png" alt="image-20220308210030745"></p><h3 id="思路及代码-27"><a href="#思路及代码-27" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>从右上角开始进行二分查找</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &gt; target) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充题：求含有连续1最多的行——右上角查找"><a href="#补充题：求含有连续1最多的行——右上角查找" class="headerlink" title="补充题：求含有连续1最多的行——右上角查找"></a>补充题：求含有连续1最多的行——右上角查找</h2><ul><li><p>视频：P50<code>1:04:45-1:10:40</code></p></li><li><p>每一行数，0一定在1的左边，要求找到1最多的行</p></li></ul><h3 id="思路及代码-28"><a href="#思路及代码-28" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>从右上角开始，如果是1往左走，如果是0往下一行一走，继续这个套路</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220308210355180.png" alt="image-20220308210355180"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">countOne</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m = arr.<span class="built_in">size</span>(), n = arr[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m &amp;&amp; j &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">-1</span> &amp;&amp; arr[i][j] == <span class="number">1</span>) j--;</span><br><span class="line">        res = <span class="built_in">max</span>(res, n - j - <span class="number">1</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中级提升班4-P51"><a href="#中级提升班4-P51" class="headerlink" title="中级提升班4(P51)"></a>中级提升班4(P51)</h1><h2 id="洗衣机问题——分析当前位置"><a href="#洗衣机问题——分析当前位置" class="headerlink" title="洗衣机问题——分析当前位置"></a>洗衣机问题——分析当前位置</h2><ul><li>视频：<code>0:01:14-0:25:15</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220310104728796.png" alt="image-20220310104728796"></p><h3 id="思路及代码-29"><a href="#思路及代码-29" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>考虑当前位置<code>i</code>，那么我可以知道<ul><li>左侧目前有多少衣服，实际需要多少衣服</li><li>右侧目前有多少衣服，实际需要多少衣服</li><li>假设需要衣服为负数，扔出衣服为正数</li></ul></li><li>四种情况<ul><li>总和不能被整除，肯定不符合，返回0</li><li>左右两侧都接收衣服（都为负数）：那么肯定是当前位置<code>i</code>往两边扔，由于一次只能扔一件，所以需要<code>abs(left) + abs(right)</code></li><li>左右两侧都扔出衣服（都为正数）：那么只有当前位置<code>i</code>需要接收衣服，<font color="red">接收能力没有限制</font>，所以共需要<code>max(abs(left), abs(right))</code></li><li>一侧扔一侧接收（一正一负）：那么中间需要操作的次数同<strong>都为正数</strong>的情况，因为可以在接收的同时扔出衣服</li></ul></li><li><font color="red">那么每个位置最高的瓶颈即为答案</font></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMinMoves</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; machines)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = machines.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : machines) sum += v;</span><br><span class="line">    <span class="keyword">if</span> (sum % n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> avg = sum / n;</span><br><span class="line">    <span class="type">int</span> leftSum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> leftRest = leftSum - i * avg;</span><br><span class="line">        <span class="type">int</span> rightRest = (sum - leftSum - machines[i]) - (n - i - <span class="number">1</span>) * avg;</span><br><span class="line">        <span class="type">int</span> ops = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftRest &lt; <span class="number">0</span> &amp;&amp; rightRest &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">abs</span>(leftRest) + <span class="built_in">abs</span>(rightRest));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(<span class="built_in">abs</span>(leftRest), <span class="built_in">abs</span>(rightRest)));</span><br><span class="line">        &#125;</span><br><span class="line">        leftSum += machines[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋打印矩阵——全局考虑（左上角右下角）"><a href="#螺旋打印矩阵——全局考虑（左上角右下角）" class="headerlink" title="螺旋打印矩阵——全局考虑（左上角右下角）"></a>螺旋打印矩阵——全局考虑（左上角右下角）</h2><ul><li>视频：<code>0:26:30-0:33:10</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220310111118618.png" alt="image-20220310111118618"></p><h3 id="思路及代码-30"><a href="#思路及代码-30" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>打印左上角和右下角区间内数字，三种情况<ul><li>只有一列，既打头又打尾</li><li>只有一行，既打头又打</li><li>普遍情况：先右再下再左再上，打头不打尾</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> tC, <span class="type">int</span> tR, <span class="type">int</span> sC, <span class="type">int</span> sR)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> c = tC, r = tR;</span><br><span class="line">        <span class="keyword">if</span> (tC == sC) &#123;</span><br><span class="line">            <span class="comment">// 只有一行</span></span><br><span class="line">            <span class="keyword">while</span> (r != sR + <span class="number">1</span>) ans.<span class="built_in">push_back</span>(matrix[c][r++]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tR == sR) &#123;</span><br><span class="line">            <span class="comment">// 只有一列</span></span><br><span class="line">            <span class="keyword">while</span> (c != sC + <span class="number">1</span>) ans.<span class="built_in">push_back</span>(matrix[c++][r]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 普遍情况</span></span><br><span class="line">            <span class="keyword">while</span> (r != sR) ans.<span class="built_in">push_back</span>(matrix[c][r++]);</span><br><span class="line">            <span class="keyword">while</span> (c != sC) ans.<span class="built_in">push_back</span>(matrix[c++][r]);</span><br><span class="line">            <span class="keyword">while</span> (r != tR) ans.<span class="built_in">push_back</span>(matrix[c][r--]);</span><br><span class="line">            <span class="keyword">while</span> (c != tC) ans.<span class="built_in">push_back</span>(matrix[c--][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() &lt; <span class="number">1</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> tC = <span class="number">0</span>, tR = <span class="number">0</span>, sC = matrix.<span class="built_in">size</span>() - <span class="number">1</span>, sR = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (tC &lt;= sC &amp;&amp; tR &lt;= sR) &#123;</span><br><span class="line">            <span class="built_in">spiralOrder</span>(matrix, tC++, tR++, sC--, sR--);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="矩阵旋转——宏观调度（考虑几个位置）"><a href="#矩阵旋转——宏观调度（考虑几个位置）" class="headerlink" title="矩阵旋转——宏观调度（考虑几个位置）"></a>矩阵旋转——宏观调度（考虑几个位置）</h2><ul><li>视频：<code>0:33:10-0:52:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220310112344747.png" alt="image-20220310112344747"></p><h3 id="思路及代码-31"><a href="#思路及代码-31" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>考虑四个角的位置相互转</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() &lt; <span class="number">1</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = m - <span class="number">1</span>, d = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &lt; d) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; d - b; i++) &#123;</span><br><span class="line">                <span class="type">int</span> temp = matrix[a][b + i];</span><br><span class="line">                matrix[a][b + i] = matrix[c - i][b];</span><br><span class="line">                matrix[c - i][b] = matrix[c][d - i];</span><br><span class="line">                matrix[c][d - i] = matrix[a + i][d];</span><br><span class="line">                matrix[a + i][d] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            a++;</span><br><span class="line">            b++;</span><br><span class="line">            c--;</span><br><span class="line">            d--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="zigzag——宏观调度"><a href="#zigzag——宏观调度" class="headerlink" title="zigzag——宏观调度"></a>zigzag——宏观调度</h2><ul><li>视频：<code>0:52:24-0:59:40</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220310141524427.png" alt="image-20220310141524427"></p><h3 id="思路及代码-32"><a href="#思路及代码-32" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>首先用两个点(A, B)标记起始位置<ul><li>A只往右走，走到不能走了往下走</li><li>B只往下走，走到不能走了往右走</li></ul></li><li>每次打印两个点之间的内容</li><li>用一个变量控制打印顺序（A-&gt;B or B-&gt;A）</li><li><font color="red">注意：A先查行再查列，B先查列再查行</font></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; arr, <span class="type">int</span> aR, <span class="type">int</span> aC, <span class="type">int</span> bR, <span class="type">int</span> bC, <span class="type">bool</span> order)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (order) &#123;</span><br><span class="line">        <span class="keyword">while</span> (aR != bR + <span class="number">1</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(arr[aR++][aC--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (bR != aR - <span class="number">1</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(arr[bR--][bC++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zigzag</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">1</span> || arr[<span class="number">0</span>].<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> endR = arr.<span class="built_in">size</span>() - <span class="number">1</span>, endC = arr[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> aR = <span class="number">0</span>, aC = <span class="number">0</span>, bR = <span class="number">0</span>, bC = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> order = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (aR != endR + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printMatrix</span>(arr, aR, aC, bR, bC, order);</span><br><span class="line">        aR = aC == endC ? aR + <span class="number">1</span> : aR;</span><br><span class="line">        aC = aC == endC ? aC : aC + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果下面两句顺序迭代，错误</span></span><br><span class="line">        bC = bR == endR ? bC + <span class="number">1</span> : bC;</span><br><span class="line">        bR = bR == endR ? bR : bR + <span class="number">1</span>;</span><br><span class="line">        order = !order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最少拼接次数"><a href="#最少拼接次数" class="headerlink" title="最少拼接次数*"></a>最少拼接次数*</h2><ul><li>视频：<code>1:04:00-1:22:05</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314144955727.png" alt="image-20220314144955727"></p><h2 id="字符串数组TopK"><a href="#字符串数组TopK" class="headerlink" title="字符串数组TopK*"></a>字符串数组TopK*</h2><ul><li>视频：<code>1:22:05-1:31:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314145323259.png" alt="image-20220314145323259"></p><h2 id="补充题：自定义堆结构——可变的TopK"><a href="#补充题：自定义堆结构——可变的TopK" class="headerlink" title="补充题：自定义堆结构——可变的TopK*"></a>补充题：自定义堆结构——可变的TopK*</h2><ul><li>视频：<code>1:31:20-2:13:19</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314154029562.png" alt="image-20220314154029562"></p><h1 id="中级提升班5-P52"><a href="#中级提升班5-P52" class="headerlink" title="中级提升班5(P52)"></a>中级提升班5(P52)</h1><h2 id="实现栈：能够返回栈中最小元素"><a href="#实现栈：能够返回栈中最小元素" class="headerlink" title="实现栈：能够返回栈中最小元素*"></a>实现栈：能够返回栈中最小元素*</h2><ul><li>视频：<code>0:03:05-0:06:30</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314145920919.png" alt="image-20220314145920919"></p><h2 id="栈实现队列-队列实现栈"><a href="#栈实现队列-队列实现栈" class="headerlink" title="栈实现队列 &amp; 队列实现栈*"></a>栈实现队列 &amp; 队列实现栈*</h2><ul><li>视频：<code>0:06:30-0:15:05</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314150124414.png" alt="image-20220314150124414"></p><h2 id="二维数组最小路径和——动态规划空间压缩技巧"><a href="#二维数组最小路径和——动态规划空间压缩技巧" class="headerlink" title="二维数组最小路径和——动态规划空间压缩技巧*"></a>二维数组最小路径和——动态规划空间压缩技巧*</h2><ul><li>视频：<code>0:15:05-0:36:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314150159015.png" alt="image-20220314150159015"></p><h2 id="一维接雨水"><a href="#一维接雨水" class="headerlink" title="一维接雨水*"></a>一维接雨水*</h2><ul><li>视频：<code>0:36:00-0:55:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314150344984.png" alt="image-20220314150344984"></p><h2 id="最大的左右部分最大值之差的绝对值"><a href="#最大的左右部分最大值之差的绝对值" class="headerlink" title="最大的左右部分最大值之差的绝对值*"></a>最大的左右部分最大值之差的绝对值*</h2><ul><li>视频：<code>0:55:50-1:03:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314150504534.png" alt="image-20220314150504534"></p><h2 id="字符串是否互为旋转词"><a href="#字符串是否互为旋转词" class="headerlink" title="字符串是否互为旋转词*"></a>字符串是否互为旋转词*</h2><ul><li>视频：<code>1:03:00-1:07:15</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314150655015.png" alt="image-20220314150655015"></p><h2 id="补充题：咖啡杯问题"><a href="#补充题：咖啡杯问题" class="headerlink" title="补充题：咖啡杯问题*"></a>补充题：咖啡杯问题*</h2><ul><li>视频：<code>1:07:15-1:49:15</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314151328312.png" alt="image-20220314151328312"></p><h2 id="相邻数字是4的倍数"><a href="#相邻数字是4的倍数" class="headerlink" title="相邻数字是4的倍数*"></a>相邻数字是4的倍数*</h2><ul><li>视频：<code>1:49:15-2:00:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314151755070.png" alt="image-20220314151755070"></p><h1 id="中级提升班6-P53"><a href="#中级提升班6-P53" class="headerlink" title="中级提升班6(P53)"></a>中级提升班6(P53)</h1><h2 id="斐波那契数列套题——行列式"><a href="#斐波那契数列套题——行列式" class="headerlink" title="斐波那契数列套题——行列式*"></a>斐波那契数列套题——行列式*</h2><ul><li>视频：<code>0:01:40-0:39:30</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314152537567.png" alt="image-20220314152537567"></p><h2 id="补充题：牛生产问题"><a href="#补充题：牛生产问题" class="headerlink" title="补充题：牛生产问题*"></a>补充题：牛生产问题*</h2><ul><li>视频：<code>0:39:30-0:47:30</code></li><li>描述：母年一年可以生一只，三年后成熟可以生产，<strong>问n年后多少年</strong>。假设牛不会死</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314152929324.png" alt="image-20220314152929324"></p><h2 id="补充题：兔生产问题"><a href="#补充题：兔生产问题" class="headerlink" title="补充题：兔生产问题*"></a>补充题：兔生产问题*</h2><ul><li>视频：<code>0:47:30-0:51:30</code></li><li>描述：和上一题差不多，修改一点点。母年一年可以生两只，两年后成熟可以生产，<strong>问n年后多少年</strong>。兔子五年后会死</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314153435870.png" alt="image-20220314153435870"></p><h2 id="符合要求的字符串：出现0的左边必有1"><a href="#符合要求的字符串：出现0的左边必有1" class="headerlink" title="符合要求的字符串：出现0的左边必有1*"></a>符合要求的字符串：出现0的左边必有1*</h2><ul><li>视频：<code>0:54:10-1:04:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314153655738.png" alt="image-20220314153655738"></p><h2 id="去掉木棍，使得任意三根不能组成三角形"><a href="#去掉木棍，使得任意三根不能组成三角形" class="headerlink" title="去掉木棍，使得任意三根不能组成三角形*"></a>去掉木棍，使得任意三根不能组成三角形*</h2><ul><li>视频：<code>1:04:20-1:11:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314153903706.png" alt="image-20220314153903706"></p><h2 id="背包问题：零食放法"><a href="#背包问题：零食放法" class="headerlink" title="背包问题：零食放法*"></a>背包问题：零食放法*</h2><ul><li>视频：<code>1:12:00-1:19:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314154235741.png" alt="image-20220314154235741"></p><h2 id="报酬与能力：找工作"><a href="#报酬与能力：找工作" class="headerlink" title="报酬与能力：找工作*"></a>报酬与能力：找工作*</h2><ul><li>视频：<code>1:19:00-1:30:40</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314154359610.png" alt="image-20220314154359610"></p><h2 id="字符串转日常书写整数"><a href="#字符串转日常书写整数" class="headerlink" title="字符串转日常书写整数*"></a>字符串转日常书写整数*</h2><ul><li>视频：<code>1:30:40-1:56:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314154540315.png" alt="image-20220314154540315"></p><h1 id="中级提升班7-P54"><a href="#中级提升班7-P54" class="headerlink" title="中级提升班7(P54)"></a>中级提升班7(P54)</h1><h2 id="子目录打印问题"><a href="#子目录打印问题" class="headerlink" title="子目录打印问题*"></a>子目录打印问题*</h2><ul><li>视频：<code>0:01:10-0:20:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314154901149.png" alt="image-20220314154901149"></p><h2 id="搜索二叉树转有序双向链表"><a href="#搜索二叉树转有序双向链表" class="headerlink" title="搜索二叉树转有序双向链表*"></a>搜索二叉树转有序双向链表*</h2><ul><li>视频：<code>0:20:30-0:28:10</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314154951850.png" alt="image-20220314154951850"></p><h3 id="思路及代码-33"><a href="#思路及代码-33" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>递归：解决以X为头的整颗树</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;Node*&gt; <span class="title">process</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span> &#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>&#125;;</span><br><span class="line">    vector&lt;Node*&gt; lNode = <span class="built_in">process</span>(node-&gt;left);</span><br><span class="line">    vector&lt;Node*&gt; rNode = <span class="built_in">process</span>(node-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (lNode[<span class="number">1</span>] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        lNode[<span class="number">1</span>]-&gt;right = node;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;left = lNode[<span class="number">1</span>];</span><br><span class="line">    node-&gt;right = rNode[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (rNode[<span class="number">0</span>] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        rNode[<span class="number">0</span>]-&gt;left = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;lNode[<span class="number">0</span>] != <span class="literal">nullptr</span> ? lNode[<span class="number">0</span>] : node, rNode[<span class="number">1</span>] != <span class="literal">nullptr</span> ? rNode[<span class="number">1</span>] : node&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大搜索二叉子树的节点个数"><a href="#最大搜索二叉子树的节点个数" class="headerlink" title="最大搜索二叉子树的节点个数*"></a>最大搜索二叉子树的节点个数*</h2><ul><li>视频：<code>0:30:50-1:31:20</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314155126826.png" alt="image-20220314155126826"></p><h2 id="打分——最长连续子数组和"><a href="#打分——最长连续子数组和" class="headerlink" title="打分——最长连续子数组和*"></a>打分——最长连续子数组和*</h2><ul><li>视频：<code>1:34:10-1:54:35</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314155310090.png" alt="image-20220314155310090"></p><h2 id="最大子矩阵的和"><a href="#最大子矩阵的和" class="headerlink" title="最大子矩阵的和*"></a>最大子矩阵的和*</h2><ul><li>视频：<code>1:54:35-2:08:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314155908701.png" alt="image-20220314155908701"></p><h1 id="中级提升班8-P55"><a href="#中级提升班8-P55" class="headerlink" title="中级提升班8(P55)"></a>中级提升班8(P55)</h1><h2 id="最少路灯数"><a href="#最少路灯数" class="headerlink" title="最少路灯数*"></a>最少路灯数*</h2><ul><li>视频：<code>0:01:40-0:24:10</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314160107805.png" alt="image-20220314160107805"></p><h2 id="前序中序数组生成后序数组"><a href="#前序中序数组生成后序数组" class="headerlink" title="前序中序数组生成后序数组*"></a>前序中序数组生成后序数组*</h2><ul><li>视频：<code>0:24:10-0:46:35</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314160410899.png" alt="image-20220314160410899"></p><h2 id="数字的中-英文表达"><a href="#数字的中-英文表达" class="headerlink" title="数字的中&#x2F;英文表达*"></a>数字的中&#x2F;英文表达*</h2><ul><li>视频：<code>0:46:35-0:58:55</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314161013469.png" alt="image-20220314161013469"></p><h2 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数*"></a>完全二叉树的节点个数*</h2><ul><li>视频：<code>0:59:15-1:19:45</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314161610108.png" alt="image-20220314161610108"></p><h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列*"></a>最长上升子序列*</h2><ul><li>视频：<code>1:19:45-1:54:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314161904107.png" alt="image-20220314161904107"></p><h2 id="判断区间内能被3整除的个数"><a href="#判断区间内能被3整除的个数" class="headerlink" title="判断区间内能被3整除的个数*"></a>判断区间内能被3整除的个数*</h2><ul><li>视频：<code>1:56:00-2:03:35</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314162216413.png" alt="image-20220314162216413"></p><h1 id="中级提升班9-P56"><a href="#中级提升班9-P56" class="headerlink" title="中级提升班9(P56)"></a>中级提升班9(P56)</h1><h2 id="找出未出现在数组中的数"><a href="#找出未出现在数组中的数" class="headerlink" title="找出未出现在数组中的数"></a>找出未出现在数组中的数</h2><ul><li>视频：<code>0:01:30-0:09:15</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314162515486.png" alt="image-20220314162515486"></p><h2 id="主播晋级"><a href="#主播晋级" class="headerlink" title="主播晋级*"></a>主播晋级*</h2><ul><li>视频：<code>0:09:25-0:33:35</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314162951582.png" alt="image-20220314162951582"></p><h2 id="参与活动的最大奖励"><a href="#参与活动的最大奖励" class="headerlink" title="参与活动的最大奖励*"></a>参与活动的最大奖励*</h2><ul><li>视频：<code>0:37:50-0:58:40</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314163220340.png" alt="image-20220314163220340"></p><h2 id="字符组成达标结果的数量"><a href="#字符组成达标结果的数量" class="headerlink" title="字符组成达标结果的数量*"></a>字符组成达标结果的数量*</h2><ul><li>视频：<code>1:00:00-1:27:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314163700270.png" alt="image-20220314163700270"></p><h2 id="没有重复字符的最长子串"><a href="#没有重复字符的最长子串" class="headerlink" title="没有重复字符的最长子串*"></a>没有重复字符的最长子串*</h2><ul><li>视频：<code>1:28:40-1:36:40</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314164203321.png" alt="image-20220314164203321"></p><h2 id="编辑距离问题"><a href="#编辑距离问题" class="headerlink" title="编辑距离问题*"></a>编辑距离问题*</h2><ul><li>视频：<code>1:40:00-2:01:10</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314164801075.png" alt="image-20220314164801075"></p><h2 id="删除多余字符使得字典序最小"><a href="#删除多余字符使得字典序最小" class="headerlink" title="删除多余字符使得字典序最小*"></a>删除多余字符使得字典序最小*</h2><ul><li>视频：<code>2:02:00-2:14:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314165532240.png" alt="image-20220314165532240"></p><h1 id="中级提升班10-P57"><a href="#中级提升班10-P57" class="headerlink" title="中级提升班10(P57)"></a>中级提升班10(P57)</h1><h2 id="字符串排序后的位置"><a href="#字符串排序后的位置" class="headerlink" title="字符串排序后的位置*"></a>字符串排序后的位置*</h2><ul><li>其他都在9讲过</li><li>视频：<code>1:37:20-2:00:00</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220314170520383.png" alt="image-20220314170520383"></p><h1 id="高级进阶班1-P58"><a href="#高级进阶班1-P58" class="headerlink" title="高级进阶班1(P58)"></a>高级进阶班1(P58)</h1><h2 id="相邻两数最大差值"><a href="#相邻两数最大差值" class="headerlink" title="相邻两数最大差值"></a>相邻两数最大差值</h2><ul><li>视频：<code>0:01:30-0:31:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220728121201796.png" alt="image-20220728121201796"></p><h3 id="思路及代码-34"><a href="#思路及代码-34" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>假设数组中有N个数，准备N + 1个桶（为了舍弃可能性：最大差值必不可能在同一个桶内）</li><li>第一次遍历，找到全局最大值mx和最小值mi</li><li>第二次遍历，确定每个桶的最大值，最小值以及桶内是否有数，通过公式$(x - mi) * N &#x2F; (mx - mi)$得到每个数应该在的桶</li><li>第三次遍历，比较相邻桶的差值，找到答案</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bucket</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> n, <span class="type">int</span> mi, <span class="type">int</span> mx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num - mi) * n / (mx - mi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxGap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> mx = nums[<span class="number">0</span>], mi = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : nums) &#123;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, v);</span><br><span class="line">        mi = <span class="built_in">min</span>(mi, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mx == mi) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">hasNum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxs</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mins</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">// 桶号</span></span><br><span class="line">    <span class="type">int</span> bid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        bid = <span class="built_in">bucket</span>(nums[i], n, mi, mx);</span><br><span class="line">        maxs[bid] = hasNum[bid] ? <span class="built_in">max</span>(maxs[bid], nums[i]) : nums[i];</span><br><span class="line">        mins[bid] = hasNum[bid] ? <span class="built_in">min</span>(mins[bid], nums[i]) : nums[i];</span><br><span class="line">        hasNum[bid] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lastMax = maxs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNum[i]) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, mins[i] - lastMax);</span><br><span class="line">            lastMax = maxs[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级进阶班5（P62）"><a href="#高级进阶班5（P62）" class="headerlink" title="高级进阶班5（P62）"></a>高级进阶班5（P62）</h1><h2 id="字符串公式计算"><a href="#字符串公式计算" class="headerlink" title="字符串公式计算"></a>字符串公式计算</h2><ul><li>视频：<code>1:02:30-1:04:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220821123232653.png" alt="image-20220821123232653"></p><h3 id="不带括号（只考虑正数）"><a href="#不带括号（只考虑正数）" class="headerlink" title="不带括号（只考虑正数）"></a>不带括号（只考虑正数）</h3><ul><li><p>不带括号，表明不需要考虑额外的优先级，即只有<code>+-*/</code>，因此此部分不处理负数</p></li><li><p>核心：双端开口栈（<code>deque</code>）</p></li><li><p>遍历字符串，用一个数字记录当前扫过的数字字符，遇到运算符就考虑入栈，如果栈顶是<code>+-</code>，直接入栈，如果栈顶是<code>*/</code>，弹出计算结果，再入栈</p></li><li><p>最后计算栈中所有结果</p></li><li><p><font color="red">是下面的简化版本，代码略</font></p></li></ul><h3 id="带括号-递归（包打一切）"><a href="#带括号-递归（包打一切）" class="headerlink" title="带括号-递归（包打一切）"></a>带括号-递归（包打一切）</h3><ul><li>带括号，表明<strong>需要考虑额外的优先级</strong>，包打一切</li><li>核心：双端开口栈（<code>deque</code>）</li><li>遍历字符串，当还有字符且字符不为<code>)</code>时，考虑三种情况<ul><li>当前字符是数字字符，累加到num上</li><li>当前字符非<code>(</code>，即可能是运算符，或者<code>)</code>时，进行一次结算，即将<code>num</code>和当前字符入<code>deque</code></li><li>当前字符是<code>(</code>，递归去处理后面的情况，并更新此时的num和新下标</li><li>最后将<code>num</code>将加入<code>deque</code></li></ul></li><li>返回此处的结果与下次开始的坐标</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(deque&lt;string&gt;&amp; deq, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!deq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            string top = deq.<span class="built_in">back</span>();</span><br><span class="line">            deq.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="string">&quot;+&quot;</span> || top == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">                deq.<span class="built_in">push_back</span>(top);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = <span class="built_in">atoi</span>(deq.<span class="built_in">back</span>().<span class="built_in">c_str</span>());</span><br><span class="line">                deq.<span class="built_in">pop_back</span>();</span><br><span class="line">                num = top == <span class="string">&quot;*&quot;</span> ? (cur * num) : (cur / num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        deq.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">(deque&lt;string&gt;&amp; deq)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> add = <span class="literal">true</span>;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            cur = deq.<span class="built_in">front</span>();</span><br><span class="line">            deq.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">                add = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">                add = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num = <span class="built_in">atoi</span>(cur.<span class="built_in">c_str</span>());</span><br><span class="line">                res += add ? num : (-num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">process</span><span class="params">(string&amp; s, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        deque&lt;string&gt; deq;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; s[i] != <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + (s[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">addNum</span>(deq, num);</span><br><span class="line">                deq.<span class="built_in">push_back</span>(<span class="built_in">string</span>(<span class="number">1</span>, s[i++]));</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = <span class="built_in">process</span>(s, i + <span class="number">1</span>);</span><br><span class="line">                num = cur[<span class="number">0</span>];</span><br><span class="line">                i = cur[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">addNum</span>(deq, num);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="built_in">getNum</span>(deq), i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理字符串中有多余空格的情况</span></span><br><span class="line">        string need = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            need += v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(need, <span class="number">0</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="带括号-迭代（未考虑乘除）"><a href="#带括号-迭代（未考虑乘除）" class="headerlink" title="带括号-迭代（未考虑乘除）"></a>带括号-迭代（未考虑乘除）</h3><ul><li>力扣评论区优秀的解法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="comment">// sign表示正负</span></span><br><span class="line">        <span class="type">int</span> sign = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> ch = s[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">                <span class="type">long</span> cur = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">while</span> (i + <span class="number">1</span> &lt; n &amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                    <span class="comment">// 可能越界：&quot;2147483647&quot;</span></span><br><span class="line">                    cur = cur * <span class="number">10</span> + s[++i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res += sign * cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                sign = <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(res);</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">                stk.<span class="built_in">push</span>(sign);</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">                res = a * res + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="高级进阶班11-P68"><a href="#高级进阶班11-P68" class="headerlink" title="高级进阶班11(P68)"></a>高级进阶班11(P68)</h1><h2 id="完美洗牌问题，-L1-L2-…Ln-R1-R2-…Rn-R1-L1-R2-L2-…Rn-Ln"><a href="#完美洗牌问题，-L1-L2-…Ln-R1-R2-…Rn-R1-L1-R2-L2-…Rn-Ln" class="headerlink" title="完美洗牌问题，{L1, L2, …Ln, R1. R2,…Rn}&#x3D;&gt;{R1,L1,R2,L2,…Rn,Ln}"></a>完美洗牌问题，{L1, L2, …Ln, R1. R2,…Rn}&#x3D;&gt;{R1,L1,R2,L2,…Rn,Ln}</h2><ul><li>视频：<code>0:29:00-1:04:50</code></li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220305171212847.png" alt="image-20220305171212847"></p><ul><li>要求时间复杂度$O(nlog_3n)$和空间复杂度$O(1)$</li></ul><h3 id="思路及代码-35"><a href="#思路及代码-35" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li><p>假设下标从1开始，数组长度为$2<em>n$，那么位于<strong>左半区</strong>的$i$位置最终要去的位置为$2</em>i$，位于<strong>右半区</strong>的$i$位置最终要去的位置为$(i-n)*2-1$</p></li><li><p>不同圈</p><p><img src="/algorithm/Algorithm-zuo/image-20220305172311673.png" alt="image-20220305172311673"></p></li><li><p>利用<code>完美洗牌问题</code>结论：当整个数组长度$M$满足$M&#x3D;3^k-1，k≥1$时，<code>不同圈</code>的出发位置为$[1,3,9,3^{k-1}]$</p></li><li><p>补充：为什么需要进行三次逆序？实现实际长度不等于$3^k-1$的数组，即先解决最接近$3^k-1$的子数组（左右部分平移逆序，时间复杂度O(k)，k为数组长度，空间复杂度O(1)）</p><p><img src="/algorithm/Algorithm-zuo/image-20220511100907824.png" alt="image-20220511100907824"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组总长度len，调整前位置为i，返回调整后的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">modifyIndex</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (i -n) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从start位置开始，往右len的长度这一段，做下标连续推</span></span><br><span class="line"><span class="comment">// 出发位置一次为1,3,9...</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cycles</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> start, <span class="type">int</span> len, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 找到每一个出发位置trigger，一共k个</span></span><br><span class="line">    <span class="comment">// 每一个trigger都进行下标连续推</span></span><br><span class="line">    <span class="comment">// 出发位置是从1开始算的,而数组下标是从0开始算的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, trigger = <span class="number">1</span>; i &lt; k; i++, trigger *= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="type">int</span> preValue = arr[trigger + start - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> cur = <span class="built_in">modifyIndex</span>(trigger, len);</span><br><span class="line">        <span class="keyword">while</span> (cur != trigger) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = arr[cur + start - <span class="number">1</span>];</span><br><span class="line">            arr[cur + start - <span class="number">1</span>] = preValue;</span><br><span class="line">            preValue = tmp;</span><br><span class="line">            cur = <span class="built_in">modifyIndex</span>(cur, len);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[cur + start - <span class="number">1</span>] = preValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [L..R]做逆序调整</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myReverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = arr[L];</span><br><span class="line">        arr[L++] = arr[R];</span><br><span class="line">        arr[R--] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [L..M]为左部分，[M+1..R]为右部分，左右两部分互换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">myReverse</span>(arr, L, M);</span><br><span class="line">    <span class="built_in">myReverse</span>(arr, M + <span class="number">1</span>, R);</span><br><span class="line">    <span class="built_in">myReverse</span>(arr, L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在arr[L...R]上做完美洗牌问题</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shuffle</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 切成一块一块的解决，每一块的长度满足(3^k - 1)</span></span><br><span class="line">    <span class="keyword">while</span> (R - L + <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> len = R - L + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> base = <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 计算小于等于k且满足(3^k - 1)的数</span></span><br><span class="line">        <span class="comment">// 也就是找最大的k，满足3^k &lt;= len + 1</span></span><br><span class="line">        <span class="keyword">while</span> (base &lt;= (len + <span class="number">1</span>) / <span class="number">3</span>) &#123;</span><br><span class="line">            base *= <span class="number">3</span>;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前要解决长度为base-1的块，一半就是再除以2</span></span><br><span class="line">        <span class="type">int</span> half = (base - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// [L...R]中点位置</span></span><br><span class="line">        <span class="type">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 要旋转的左半部分为[L+half...mid]</span></span><br><span class="line">        <span class="comment">// 要旋转的右半部分为[mid+1...mid+half]</span></span><br><span class="line">        <span class="comment">// 注意此处下标从0开始</span></span><br><span class="line">        <span class="built_in">rotate</span>(arr, L + half, mid, mid + half);</span><br><span class="line">        <span class="comment">// 旋转完成后。从L开始算起，长度为base-1的部分进行下标连续推</span></span><br><span class="line">        <span class="built_in">cycles</span>(arr, L, base - <span class="number">1</span>, k);</span><br><span class="line">        <span class="comment">// 解决了前base-1部分，剩下的部分继续处理</span></span><br><span class="line">        L = L + base - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完美洗牌问题主函数</span></span><br><span class="line"><span class="comment">// 数组不为空，且必须是偶数</span></span><br><span class="line"><span class="comment">// [a1, a2, a3, a4, a5, b1, b2, b3, b4, b5] =&gt; [a1, a2, a3, a4, b1, b2, b3, b4, a5, b5] =&gt; ... =&gt;[b1, a1, b2, a2, b3, a3, b4, a4, b5, a5]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shuffle</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() != <span class="number">0</span> &amp;&amp; (arr.<span class="built_in">size</span>() &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">shuffle</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>给定一个数组，要求调整之后数组相邻元素满足：&lt;&#x3D;，&gt;&#x3D;，&lt;&#x3D;一直下去</p><p><img src="/algorithm/Algorithm-zuo/image-20220511101104959.png" alt="image-20220511101104959"></p><ul><li><p>思路：使用堆排进行排序（时间足够快，空间复杂度小）</p><ul><li><p>长度为偶数，然后使用完美洗牌算法进行排序即可</p><p><img src="/algorithm/Algorithm-zuo/image-20220511101510146.png" alt="image-20220511101510146"></p></li><li><p>长度为奇数，剔除第一个（排序之后最小的数）</p><p><img src="/algorithm/Algorithm-zuo/image-20220511101638318.png" alt="image-20220511101638318"></p></li></ul></li></ul><h2 id="最大线段重叠问题"><a href="#最大线段重叠问题" class="headerlink" title="最大线段重叠问题"></a>最大线段重叠问题</h2><ul><li>视频：<code>1:31:40-1:57:55</code></li><li>有个二维数组，每一个位置代表一个线段的起始和结尾位置，求最大重叠的线段数量（压点不算，即[1,2]，[2,3]结果是1），如{ {2, 5},{1, 9},{3, 10},{6, 8},{2, 4} }最长重叠包含的线段有四条（除了6,8）</li></ul><p><img src="/algorithm/Algorithm-zuo/image-20220727124128515.png" alt="image-20220727124128515"></p><h3 id="思路及代码-36"><a href="#思路及代码-36" class="headerlink" title="思路及代码"></a>思路及代码</h3><ul><li>以起点升序排序</li><li>有序表存当前位置结尾（删除不符合要求的数据）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author       : 955nice</span></span><br><span class="line"><span class="comment"> * @Date         : 2022-07-27 12:30:00</span></span><br><span class="line"><span class="comment"> * @version      : 1.0</span></span><br><span class="line"><span class="comment"> * @LastEditors  : 955nice</span></span><br><span class="line"><span class="comment"> * @LastEditTime : 2022-07-27 12:30:00</span></span><br><span class="line"><span class="comment"> * @Description  : 线段重叠的最多线段树</span></span><br><span class="line"><span class="comment"> * @FilePath     : /code/job/bitmap.cpp</span></span><br><span class="line"><span class="comment"> * Talk is cheap, Show me the code</span></span><br><span class="line"><span class="comment"> * @refer        : https://blog.csdn.net/no_O_ac/article/details/103174451, https://www.cnblogs.com/fnlingnzb-learner/p/9300073.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxOverlap</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="comment">// 枚举以某个点为开头，重叠的线段数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vec : nums) &#123;</span><br><span class="line">        <span class="type">int</span> start = vec[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> end = vec[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 删除会使当前元素迭代器失效，不能使用直接删除</span></span><br><span class="line">        <span class="comment">// for (auto v : st) &#123;</span></span><br><span class="line">        <span class="comment">//     if (v &gt;= start) break;</span></span><br><span class="line">        <span class="comment">//     st.erase(v);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> iter = st.<span class="built_in">begin</span>(); iter != st.<span class="built_in">end</span>();) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*iter &gt;= start) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 两种方法都可以</span></span><br><span class="line">            <span class="comment">// iter = st.erase(iter);</span></span><br><span class="line">            st.<span class="built_in">erase</span>(iter++);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.<span class="built_in">insert</span>(end);</span><br><span class="line">        <span class="type">int</span> cur = st.<span class="built_in">size</span>();</span><br><span class="line">        res = <span class="built_in">max</span>(res, cur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; nums = &#123;</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="number">6</span>, <span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">maxOverlap</span>(nums) &lt;&lt; endl;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展：最大矩形重叠问题"><a href="#扩展：最大矩形重叠问题" class="headerlink" title="扩展：最大矩形重叠问题*"></a>扩展：最大矩形重叠问题*</h3><ul><li>线段问题扩展为矩形重叠问题</li><li>思路<ol><li><p>将每一个矩形，根据底边升序排序</p></li><li><p>先处理在下方的矩形，准备一个容器，如果当前遍历到的矩形X的底边，没有超过容器中最高矩形的顶边，加入&#x3D;&gt;换句话说，删除所有顶边低于当前X的矩形，求此次答案</p><ul><li><p>ABCD时，如下</p><p><img src="/algorithm/Algorithm-zuo/image-20220727125010461.png" alt="image-20220727125010461"></p></li><li><p>加入E后，如下</p><p><img src="/algorithm/Algorithm-zuo/image-20220727125034212.png" alt="image-20220727125034212"></p></li></ul></li><li><p>变换成线段重叠问题求解</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 左程云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用说明</title>
      <link href="/tools/The-trick-of-git/"/>
      <url>/tools/The-trick-of-git/</url>
      
        <content type="html"><![CDATA[<h1 id="同一账号不同电脑同步同一仓库"><a href="#同一账号不同电脑同步同一仓库" class="headerlink" title="同一账号不同电脑同步同一仓库"></a>同一账号不同电脑同步同一仓库</h1><h2 id="1-初始工作"><a href="#1-初始工作" class="headerlink" title="1 初始工作"></a>1 初始工作</h2><h3 id="1-1-创建github账号（一次性）"><a href="#1-1-创建github账号（一次性）" class="headerlink" title="1.1 创建github账号（一次性）"></a>1.1 创建github账号（一次性）</h3><p>在<a href="github.com">github官网</a>按指引进行注册即可</p><h3 id="1-2-安装git（一次性）"><a href="#1-2-安装git（一次性）" class="headerlink" title="1.2 安装git（一次性）"></a>1.2 安装git（一次性）</h3><ul><li><p>以下以<code>Windows</code>为例，<code>Linux</code>直接使用<code>sudo apt-get install git</code>即可</p></li><li><p><strong>需要进行同步的电脑</strong>都需要下载并安装<code>git</code>，<a href="https://gitforwindows.org/">Git for windows地址</a>，除安装路径可按需修改外，其余均可按照默认设置进行安装。成功安装后，可以在<code>cmd</code>中使用<code>git --version</code>查看版本，此时右键菜单中出现下图红框选项，以后关于<code>git</code>的操作均使用<code>Git Bash Here</code>操作</p></li></ul><p><img src="/tools/The-trick-of-git/image-20210823195126529.png" alt="image-20210823195126529"></p><h3 id="1-3-设置本地推送github账号（一次性）"><a href="#1-3-设置本地推送github账号（一次性）" class="headerlink" title="1.3 设置本地推送github账号（一次性）"></a>1.3 设置本地推送github账号（一次性）</h3><p><strong>需要进行同步的电脑都设置本地推送github账号</strong>，如已设置，则跳过此步。在<code>git控制台</code>输入以下命令，即可完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github账号名字或&quot;</span><br><span class="line">git config --global user.email &quot;github账号绑定邮箱&quot;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li>命令执行没有任何输出视为正确</li><li>命令执行后，即在<code>C:\Users\自己的用户名</code>下生成了<code>.gitconfig</code>文件</li></ol><h3 id="1-4-生成ssh秘钥（一次性）"><a href="#1-4-生成ssh秘钥（一次性）" class="headerlink" title="1.4 生成ssh秘钥（一次性）"></a>1.4 生成ssh秘钥（一次性）</h3><p>**需要进行同步的电脑都生成<code>ssh秘钥</code>**，用于推送免密执行，如已设置，则跳过此步。</p><ol><li><p>在<code>cmd</code>终端或者<code>git控制台</code>输入：<code>cd ~/.ssh</code>，检查本机已存在的ssh密钥，如果输出为<code>系统找不到指定的路径。</code>，那么说明之前并未生成过<code>ssh秘钥</code>，继续执行下步</p></li><li><p>使用<code>ssh-keygen -t rsa -C &quot;github邮箱地址&quot;</code>生成秘钥，<code>-C</code>后面跟的是说明，用于区分不同<code>ssh秘钥</code>，<del>执行命令行，全部回车执行默认操作，否则可能出错（比如更改秘钥名字就无法连接github，即ssh -T测试失败，原因未知）</del>&#x3D;&gt;<font color="red">可能是Windows原因</font>，在Linux下<code>ssh -T</code>全局有效，当然可能是配置了<code>config</code>，总而言之，针对自定义名称设置，见<a href="#%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%97%B6%E4%BD%BF%E7%94%A8%E4%BA%86%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%90%AB%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AEgit%E8%B4%A6%E6%88%B7%EF%BC%89">创建SSH密钥时使用了自定义文件名遇到的问题（含单独文件夹设置git账户）</a></p><p><img src="/tools/The-trick-of-git/image-20210823204654427.png" alt="image-20210823204654427"></p></li><li><p>此时会在<code>C:\Users\用户名\.ssh\下生成私钥(xxx)和公钥(xxx.pub)</code>，复制公钥内容至GitHub：<code>点击头像-&gt;Settings→SSH and GPG keys</code>中即可完成配置</p></li><li><p>在<code>.ssh</code>文件夹下创建<code>config</code>文件，内容如下，根据需要配置<code>github</code>和<code>gitlab</code>，<code>IdentityFile</code>也需要替换成第二步创建的文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">        Hostname ssh.github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        PubKeyAcceptedKeyTypes=+ssh-rsa</span><br><span class="line">        IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line">        User 【自己的用户名】</span><br><span class="line">        Port 443</span><br><span class="line">Host gitlab.com</span><br><span class="line">        Hostname altssh.gitlab.com</span><br><span class="line">        IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line">        User 【自己的用户名】</span><br><span class="line">        Port 443</span><br></pre></td></tr></table></figure></li><li><p>测试【SSH Key】：<code>ssh -T git@github.com</code></p><ul><li><p>如果正常连接，如下图</p><p><img src="/tools/The-trick-of-git/image-20210824085727853.png" alt="image-20210824085727853"></p></li><li><p>如果出现下图错误，可能是在<strong>复制公钥时多了空格</strong>或者<strong>在生成SSH秘钥时改名了（即不使用默认id_rsa）</strong>，针对自定义名称设置，见<a href="#%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%97%B6%E4%BD%BF%E7%94%A8%E4%BA%86%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%90%AB%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AEgit%E8%B4%A6%E6%88%B7%EF%BC%89">创建SSH密钥时使用了自定义文件名遇到的问题（含单独文件夹设置git账户）</a></p><p><img src="/tools/The-trick-of-git/image-20210824084603638.png" alt="image-20210824084603638"></p></li></ul></li></ol><h3 id="1-5-初始化本地项目"><a href="#1-5-初始化本地项目" class="headerlink" title="1.5 初始化本地项目"></a>1.5 初始化本地项目</h3><ol><li><p><strong>假设在电脑A上</strong>，建立一个文件夹，此处我创建的文件夹为：<code>E:\workspace\test_repo</code></p></li><li><p>进入这个目录，点击鼠标右键，在弹出框里点击<code>Git Bash here</code>，在当前文件夹打开<code>git控制台</code></p><p><img src="/tools/The-trick-of-git/image-20210823200105677.png" alt="image-20210823200105677"></p></li><li><p><strong>初始化仓库</strong>：<code>git init</code></p><p><img src="/tools/The-trick-of-git/image-20210823200308603.png" alt="image-20210823200308603"></p></li></ol><h3 id="1-6-配置git远程仓库"><a href="#1-6-配置git远程仓库" class="headerlink" title="1.6 配置git远程仓库"></a>1.6 配置git远程仓库</h3><ol><li><p>在<code>Github</code>中创建本地同名仓库</p><p><img src="/tools/The-trick-of-git/image-20210825091055660.png" alt="image-20210825091055660"></p></li><li><p>创建好后，会跳转到下图所示页面</p><p><img src="/tools/The-trick-of-git/image-20210823211127073.png" alt="image-20210823211127073"></p></li></ol><h3 id="1-7-将本地仓库与远程github仓库关联"><a href="#1-7-将本地仓库与远程github仓库关联" class="headerlink" title="1.7 将本地仓库与远程github仓库关联"></a>1.7 将本地仓库与远程github仓库关联</h3><ol><li><p><strong>添加远程仓库</strong>：<code>git remote add origin &lt;你的项目地址&gt; </code></p><p><strong>注</strong>：</p><ul><li><p>项目地址形式为：<code>https://github.com/xxx/xxx.git</code>或者<code>git@github.com:xxx/xxx.git</code></p></li><li><p>HTTPS和SSH区别：使用HTTP需要每次输入账号密码，使用SSH可以添加公私钥</p></li></ul><p><img src="/tools/The-trick-of-git/image-20210823211531346.png" alt="image-20210823211531346"></p></li><li><p><strong>查看关联的远程仓库</strong>：<code>git remote -v</code></p><p><img src="/tools/The-trick-of-git/image-20210823211705872.png" alt="image-20210823211705872"></p></li></ol><h2 id="2-文章撰写与同步"><a href="#2-文章撰写与同步" class="headerlink" title="2 文章撰写与同步"></a>2 文章撰写与同步</h2><h3 id="2-1-初始操作"><a href="#2-1-初始操作" class="headerlink" title="2.1 初始操作"></a>2.1 初始操作</h3><ul><li><p>假设此时已经在<strong>电脑A</strong>上写好了文件，如下</p><p><img src="/tools/The-trick-of-git/image-20210823212238228.png" alt="image-20210823212238228"></p></li><li><p>在<strong>电脑A</strong>上执行操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前路径下所有文件</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交说明</span></span><br><span class="line">git commit -m &quot;第一次提交&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传至GitHub</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210824090007051.png" alt="image-20210824090007051"></p></li><li><p>此时可在github中看到文件已经提交成功</p><p><img src="/tools/The-trick-of-git/image-20210824090106097.png" alt="image-20210824090106097"></p></li><li><p>在另一台安装好了git的电脑上（<strong>电脑B</strong>），只需要在某个文件夹下打开git控制台。输入如下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:你的账户名/仓库名.git</span><br></pre></td></tr></table></figure></li></ul><p><img src="/tools/The-trick-of-git/image-20210824092552070.png" alt="image-20210824092552070"></p><ul><li>此时<strong>电脑B</strong>和<strong>电脑A</strong>的内容一致</li></ul><h3 id="2-2-日常同步"><a href="#2-2-日常同步" class="headerlink" title="2.2 日常同步"></a>2.2 日常同步</h3><ol><li><p><strong>首先将远程仓库与本地仓库进行合并</strong>，这一步很重要，必须每次都执行，保证在本地修改是在最新远程库的更新</p><p>偷懒操作：<code>git pull</code>一条命令即可，如果提示失败，可采用<code>git pull origin master</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从远程的origin仓库的master分支下载代码到本地的origin master</span></span><br><span class="line">git fetch origin master </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较本地的仓库和远程参考的区别</span></span><br><span class="line">git log -p master.. origin/master</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把远程下载下来的代码合并到本地仓库，远程的和本地的合并</span></span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210824093356147.png" alt="image-20210824093356147"></p><p><strong>注</strong>：上图由于本地仓库刚从远程仓库clone下来，所以两者没有变化，如果是以后同步执行以上代码后，可能是下图所示情况</p><p><img src="/tools/The-trick-of-git/image-20210824094130422.png" alt="image-20210824094130422"></p></li><li><p>更改文件，新增文件等，并提交至远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前路径下所有文件</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交说明</span></span><br><span class="line">git commit -m &quot;第一次提交&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传至GitHub</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210824093800714.png" alt="image-20210824093800714"></p></li><li><p>此时远程仓库已经更新，如下</p><p><img src="/tools/The-trick-of-git/image-20210824093848206.png" alt="image-20210824093848206"></p></li></ol><h3 id="2-3-遇到问题"><a href="#2-3-遇到问题" class="headerlink" title="2.3 遇到问题"></a>2.3 遇到问题</h3><ol><li><p><code>Your branch is behind &#39;origin/master&#39; by N commits, and can be fast-forwarded</code></p><ul><li>在日常同步过程中，合并远程分支与本地分支时出现下图问题：</li></ul><p><img src="/tools/The-trick-of-git/image-20210906091019866.png" alt="image-20210906091019866"></p><ul><li>解决方法：<code>git reset --hard origin/master</code>&#x3D;&gt;<strong>将本地库更新为远程最新库</strong></li><li>参考博客：<a href="https://www.cnblogs.com/-mrl/p/14385009.html">Your branch is behind ‘origin&#x2F;master’ by N commits, and can be fast-forwarded 解决方法</a></li></ul></li></ol><h2 id="3-其他命令说明"><a href="#3-其他命令说明" class="headerlink" title="3 其他命令说明"></a>3 其他命令说明</h2><ul><li><code>git remote -v</code>：仓库路径查询查询</li><li><code>git remote rm origin</code>：删除指定的远程仓库</li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h2><ul><li><a href="https://blog.csdn.net/u013044310/article/details/102692264">利用Git构建云服务器实现多台电脑同步工作</a></li><li><a href="https://blog.csdn.net/weixin_41995541/article/details/90183684">GitHub 的 Git 用户名和邮箱配置+【SSH Key】加密传输</a></li><li><a href="https://blog.csdn.net/zhezhebie/article/details/78761417">git修改&#x2F;添加&#x2F;删除远程仓库</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git教程</a></li></ul><h1 id="同一账号相同电脑推送不同仓库"><a href="#同一账号相同电脑推送不同仓库" class="headerlink" title="同一账号相同电脑推送不同仓库"></a>同一账号相同电脑推送不同仓库</h1><ul><li>在本地不同文件夹，使用<code>git init</code>进行初始化仓库后，每个文件夹就是一个仓库，在不同文件夹中打开<code>git 控制台</code>根据进行独立推送即可</li></ul><h1 id="多个账号不同电脑维护同一仓库"><a href="#多个账号不同电脑维护同一仓库" class="headerlink" title="多个账号不同电脑维护同一仓库"></a>多个账号不同电脑维护同一仓库</h1><h2 id="1-合作者模式"><a href="#1-合作者模式" class="headerlink" title="1 合作者模式"></a>1 合作者模式</h2><p><strong>注</strong>：将本节阅读完后，再进行操作</p><h3 id="1-1-初始工作"><a href="#1-1-初始工作" class="headerlink" title="1.1 初始工作"></a>1.1 初始工作</h3><h4 id="1-1-1-推送设置"><a href="#1-1-1-推送设置" class="headerlink" title="1.1.1 推送设置"></a>1.1.1 推送设置</h4><ul><li>不同电脑都拥有推送github仓库的基本设置，即已完成<strong>同一账号不同电脑同步同一仓库——&gt;1.1至1.4</strong></li></ul><h4 id="1-1-2-仓库创建及邀请合作者"><a href="#1-1-2-仓库创建及邀请合作者" class="headerlink" title="1.1.2 仓库创建及邀请合作者"></a>1.1.2 仓库创建及邀请合作者</h4><ul><li><p><strong>账号A</strong>创建空仓库如下</p><p><img src="/tools/The-trick-of-git/image-20210907172948670.png" alt="image-20210907172948670"></p></li><li><p>通过以下步骤邀请合作者</p><ol><li><p><code>settings-&gt;Manage access</code></p><p><img src="/tools/The-trick-of-git/image-20210908082144062.png" alt="image-20210908082144062"></p></li><li><p>输入账号密码即可进入下图所示界面</p><p><img src="/tools/The-trick-of-git/image-20210908082238337.png" alt="image-20210908082238337"></p></li><li><p>通过<code>invite a collaborator</code>在弹出的搜索框中输入<strong>用户名</strong>或<strong>邮箱地址</strong>进行邀请</p><p><img src="/tools/The-trick-of-git/image-20210908082424978.png" alt="image-20210908082424978"></p></li><li><p>此时状态为<strong>等待受邀者同意</strong></p><p><img src="/tools/The-trick-of-git/image-20210908082713011.png" alt="image-20210908082713011"></p></li><li><p>此时<code>受邀者</code>将会受到一封邮件，根据提示选择接受邀请即可，同意邀请后，合作者状态变为下图</p><p><img src="/tools/The-trick-of-git/image-20210908083106756.png" alt="image-20210908083106756"></p></li></ol></li></ul><h4 id="1-1-3-仓库初始映射到本地"><a href="#1-1-3-仓库初始映射到本地" class="headerlink" title="1.1.3 仓库初始映射到本地"></a>1.1.3 仓库初始映射到本地</h4><ul><li><p>有两种可选方式</p><ol><li>按照<strong>同一账号不同电脑同步同一仓库——&gt;1.5至1.7</strong>进行配置</li><li>直接将仓库进行<code>clone</code>，下面介绍第二种</li></ol></li><li><p>在电脑A和电脑B分别找一个空文件夹执行：<code>git clone git@github.com:cv-programmer/test_repo2.git</code>，此时两者都与远程仓库有了关联</p><ul><li><p>电脑A</p><p><img src="/tools/The-trick-of-git/image-20210908091605987.png" alt="image-20210908091605987"></p></li><li><p>电脑B</p><p><img src="/tools/The-trick-of-git/image-20210908093023105.png" alt="image-20210908093023105"></p></li></ul></li></ul><h3 id="1-2-文章撰写与同步"><a href="#1-2-文章撰写与同步" class="headerlink" title="1.2 文章撰写与同步"></a>1.2 文章撰写与同步</h3><h4 id="1-2-1-初始操作（空仓库）"><a href="#1-2-1-初始操作（空仓库）" class="headerlink" title="1.2.1 初始操作（空仓库）"></a>1.2.1 初始操作（空仓库）</h4><ul><li><p>此时<code>电脑A本地仓库</code>、<code>电脑B本地仓库</code>和<code>远程仓库</code>均为<strong>空仓库</strong></p></li><li><p><code>电脑A</code>添加文件并上传至远程仓库</p><ul><li><p>操作步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前路径下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加并修改computerA.txt</span></span><br><span class="line">vim computerA.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交更改至远程</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;电脑A新增文件&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p><img src="/tools/The-trick-of-git/image-20210908093419726.png" alt="image-20210908093419726"></p><ul><li><p>此时远程仓库状态如下</p><p><img src="/tools/The-trick-of-git/image-20210908093635720.png" alt="image-20210908093635720"></p></li></ul></li><li><p><code>电脑B</code>重复<code>电脑A</code>操作</p><ul><li><p>操作步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前路径下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加并修改computerB.txt</span></span><br><span class="line">vim computerB.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交更改至远程</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;电脑B新增文件&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210908093948791.png" alt="image-20210908093948791"></p></li><li><p>此时，可以看到，在推送至远程时，发生冲突，原因在于<strong>由于电脑A的修改及推送，此时远程仓库已经与电脑B本地仓库不相同</strong>，根据提示，依次执行以下步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地仓库更新为最新远程仓库</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次更新</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210908094511816.png" alt="image-20210908094511816"></p></li></ul></li><li><p>可以看到，<strong>此时还是更新失败</strong>，原因在于<strong>电脑B在此之前没有过提交，相当于本地没有分支，而此时远程仓库有了电脑A的推送，导致两者分支毫无关联</strong>，处理办法如下：</p><ol><li><p>将<code>电脑B</code>的仓库进行删除，重新执行<code>git clone git@github.com:cv-programmer/test_repo2.git</code></p></li><li><p>此时文件内容如下</p><p><img src="/tools/The-trick-of-git/image-20210908095000508.png" alt="image-20210908095000508"></p></li><li><p>再次按照下列步骤新增文件并推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前路径下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加并修改computerB.txt</span></span><br><span class="line">vim computerB.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交更改至远程</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;电脑B新增文件&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210908095145255.png" alt="image-20210908095145255"></p></li><li><p>此时远程仓库状态如下</p><p><img src="/tools/The-trick-of-git/image-20210908095247133.png" alt="image-20210908095247133"></p></li></ol></li></ul><h4 id="1-2-2-初始操作（非空仓库）"><a href="#1-2-2-初始操作（非空仓库）" class="headerlink" title="1.2.2 初始操作（非空仓库）"></a>1.2.2 初始操作（非空仓库）</h4><ul><li><p>经过<strong>多个账号不同电脑维护同一仓库1.2.1</strong>的操作，此时，<code>电脑A</code>、<code>电脑B</code>和<code>远程仓库</code>的状态如下</p><ul><li><p>电脑A</p><p><img src="/tools/The-trick-of-git/image-20210908095528584.png" alt="image-20210908095528584"></p></li><li><p>电脑B</p><p><img src="/tools/The-trick-of-git/image-20210908095627649.png" alt="image-20210908095627649"></p></li><li><p>远程仓库</p><p><img src="/tools/The-trick-of-git/image-20210908095247133.png" alt="image-20210908095247133"></p></li><li><p>说明：可以看到，此时<code>电脑B</code>与<code>远程仓库</code>内容保持了一致，而<code>电脑A</code>确实<code>computerB.txt</code></p></li></ul></li><li><p>此时再在<code>电脑A</code>修改<code>computerA.txt</code>和新增<code>a.txt</code>文件</p><ul><li><p>操作步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前路径下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改computerA.txt</span></span><br><span class="line">vim computerA.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加并修改a.txt</span></span><br><span class="line">vim a.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交更改至远程</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;电脑A再次修改&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20210908100458026.png" alt="image-20210908100458026"></p></li><li><p>此时发生冲突，原因在于<strong>在<code>1.2.1 初始操作（空仓库）</code>中电脑B的修改及推送，此时远程仓库已经与电脑A本地仓库不相同</strong>，根据提示，依次执行以下步骤</p><ol><li><p>将本地仓库更新为最新远程仓库：<code>git pull</code>，会出现如下图所示界面，<strong>是git发现两者内容不同，需要合并，并需要填写必要说明（可不填，直接保存退出即可）</strong></p><p><img src="/tools/The-trick-of-git/image-20210908100713958.png" alt="image-20210908100713958"></p></li><li><p>再次推送：<code>git push origin master</code></p></li></ol><p><img src="/tools/The-trick-of-git/image-20210908101019080.png" alt="image-20210908101019080"></p></li><li><p>此时<code>电脑A</code>状态如下</p><p><img src="/tools/The-trick-of-git/image-20210908101100263.png" alt="image-20210908101100263"></p></li><li><p><code>远程仓库</code>状态如下</p><p><img src="/tools/The-trick-of-git/image-20210908101159133.png" alt="image-20210908101159133"></p></li><li><p><code>电脑B</code>状态如下</p><p><img src="/tools/The-trick-of-git/image-20210908101233848.png" alt="image-20210908101233848"></p></li></ul></li></ul><h4 id="1-2-3-日常同步"><a href="#1-2-3-日常同步" class="headerlink" title="1.2.3 日常同步"></a>1.2.3 日常同步</h4><ul><li><strong>注</strong>：</li></ul><ol><li>严格按照以下步骤进行操作，否则可能发生冲突导致推送失败</li><li>只能修改自己的文件，不能修改其他合作者的文件，否则两者同时修改也会导致推送失败</li></ol><ul><li><p>步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 将本地仓库更新为最新远程仓库</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改或新增文件，即修改md文档等</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 将更改提交至暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 将更改提交至本地分支</span></span><br><span class="line">git commit -m &quot;提交说明&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 推送远程</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li><li><p>示例</p><ul><li><p>仓库状态</p><ul><li><p><code>电脑A</code></p><p><img src="/tools/The-trick-of-git/image-20210908101100263.png" alt="image-20210908101100263"></p></li><li><p><code>电脑B</code></p><p><img src="/tools/The-trick-of-git/image-20210908101233848.png" alt="image-20210908101233848"></p></li><li><p><code>远程仓库</code></p><p><img src="/tools/The-trick-of-git/image-20210908101159133.png" alt="image-20210908101159133"></p></li></ul></li><li><p>考虑到只有<code>电脑B</code>状态不为最新，所以以下操作均针对于<code>电脑B</code></p><ol><li><p>将本地仓库更新为最新远程仓库：<code>git pull</code></p><p><img src="/tools/The-trick-of-git/image-20210908102132360.png" alt="image-20210908102132360"></p></li><li><p>修改文件，本次修改了<code>computerB.txt</code>和新增<code>b.txt</code></p></li><li><p>将更改提交至暂存区：<code>git add .</code></p></li><li><p>将更改提交至本地分支：<code>git commit -m &quot;电脑B日常同步&quot;</code></p></li><li><p>推送远程：<code>git push origin master</code></p></li></ol><p><img src="/tools/The-trick-of-git/image-20210908102415864.png" alt="image-20210908102415864"></p></li><li><p>此时远程仓库状态</p><p><img src="/tools/The-trick-of-git/image-20210908102443168.png" alt="image-20210908102443168"></p></li></ul></li></ul><h2 id="2-fork-模式"><a href="#2-fork-模式" class="headerlink" title="2 fork 模式"></a><del>2 fork 模式</del></h2><p>(未完成…)</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3 参考"></a>3 参考</h2><ul><li><a href="https://www.cnblogs.com/idorax/p/9366035.html">GitHub多人协作简明教程</a></li></ul><h1 id="多个账号相同电脑推送不同仓库"><a href="#多个账号相同电脑推送不同仓库" class="headerlink" title="多个账号相同电脑推送不同仓库"></a>多个账号相同电脑推送不同仓库</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li><p>假设此时已经配置好基础环境，见<a href="#%E5%90%8C%E4%B8%80%E8%B4%A6%E5%8F%B7%E4%B8%8D%E5%90%8C%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%90%8C%E4%B8%80%E4%BB%93%E5%BA%93">同一账号不同电脑同步同一仓库：1. 初始工作</a>，基础设置如下</p><p><img src="/tools/The-trick-of-git/image-20221010095437917.png" alt="image-20221010095437917"></p></li><li><p>假设新github用户名为<code>fighting</code></p></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>进入ssh文件夹：<code>cd ~/.ssh</code></p></li><li><p>为<code>其他账号</code>生成<code>ssh秘钥</code>，即<code>ssh-keygen -t rsa -C &quot;github邮箱地址&quot; </code>，用于区分不同秘钥，注意下图中，保存名称需要修改为唯一（默认为<code>id_rsa</code>和<code>id_rsa.pub</code>，已经被设置的默认全局账号使用），本测试名称为<code>id_rsa_fighting</code></p><p><img src="/tools/The-trick-of-git/image-20221010102705114.png" alt="image-20221010102705114"></p></li><li><p>添加公钥<code>id_rsa_fighting.pub</code>内容至github仓库</p></li><li><p>在~&#x2F;.ssh目录下创建一个<code>config</code>文件，格式如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git server global</span></span><br><span class="line"><span class="comment"># Host 别名                                                                               # Hostname 真实域名                                                                       </span></span><br><span class="line"><span class="comment"># IdentityFile ssh秘钥w路径                                                               </span></span><br><span class="line"><span class="comment"># User 标识作用                                      </span></span><br><span class="line"></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com    </span></span><br><span class="line"><span class="attr">Hostname</span> <span class="string">ssh.github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="attr">User</span> <span class="string">global</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Host</span> <span class="string">o1github.com</span></span><br><span class="line"><span class="attr">Hostname</span> <span class="string">ssh.github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa_fighting</span></span><br><span class="line"><span class="attr">User</span> <span class="string">other1    </span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>config</code>权限<code>chmod 600 config</code>：否则出现如下错误<code>Bad owner or permissions on .ssh/config</code>：</p><p><img src="/tools/The-trick-of-git/image-20221010104632634.png" alt="image-20221010104632634"></p></li><li><p>测试连接，结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：ssh -T ssh@Host</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置config前</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置config后（因为我这里全局别名没变，所以第一个保持）</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@o1github.com</span><br></pre></td></tr></table></figure><p><img src="/tools/The-trick-of-git/image-20221010104958375.png" alt="image-20221010104958375"></p></li><li><p>下载仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：git <span class="built_in">clone</span> git@Host:项目路径.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置config前</span></span><br><span class="line">git clone git@github.com:cv-programmer/test_repo.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置config后</span></span><br><span class="line">git clone git@github.com:cv-programmer/test_repo.git</span><br><span class="line">git clone git@o1github.com:fighting/test_repo.git</span><br></pre></td></tr></table></figure></li><li><p>为仓库设置单独的推送账号信息，如没有设置，推送信息为全局账户，<strong>如果觉得每次修改仓库的配置过于麻烦</strong>，可按照步骤9修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只为新账户单独设置（我的需求是以一个为主，另一个偶尔提交，没必要改全局的）</span></span><br><span class="line">git config user.name &quot;用户名&quot;</span><br><span class="line">git config user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>此方法按照文件夹设定不同的<code>name</code>及<code>email</code></p><ol><li><p>假设在 <code>E:\codes</code> 下存放所有的 git repos，已有<code>.gitconfig</code>配置如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[user]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">email</span> = <span class="string">xxxxx@aaa.com</span></span><br></pre></td></tr></table></figure></li><li><p>现在建立两个特殊的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\codes\github --&gt; 专门存放托管于 github 的项目</span><br><span class="line">E:\codes\gitlab --&gt; 专门存放托管于 gitlab 的项目</span><br></pre></td></tr></table></figure></li><li><p>打开git的全局配置文件，增加两段配置，如下（第 5 行起的部分），更多规则可查看<a href="https://git-scm.com/docs/git-config#_conditional_includes">Git Conditional Includes</a></p><ul><li>Windows: <code> C:\Users\&#123;用户名&#125;\.gitconfig</code></li><li>Linux等：<code>~/.gitconfig</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[user]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">email</span> = <span class="string">xxxxx@aaa.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[includeIf</span> <span class="string">&quot;gitdir:codes/github/&quot;]</span></span><br><span class="line">    <span class="attr">path</span> = <span class="string">./.github</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[includeIf</span> <span class="string">&quot;gitdir:codes/gitlab/&quot;]</span></span><br><span class="line">    <span class="attr">path</span> = <span class="string">./.gitlab</span></span><br></pre></td></tr></table></figure></li><li><p>在全局 <code>.gitconfig</code>文件夹相同的位置，创建 <code>.github</code> 和 <code>.gitlab</code> 文件，内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github</span></span><br><span class="line"><span class="attr">[user]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">hello</span></span><br><span class="line">    <span class="attr">email</span> = <span class="string">xxxxx@gmail.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># .gitlab</span></span><br><span class="line"><span class="attr">[user]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">world</span></span><br><span class="line">    <span class="attr">email</span> = <span class="string">xxxxx@qq.com</span></span><br></pre></td></tr></table></figure></li><li><p>这样配置以后，如果你是在 <code>E:\codes\gitlab</code> 下的某个项目时，你的 email 是 <code>xxxxx@qq.com</code>，如果你是在 <code>E:\codes\github</code> 下的某个项目时，你的 email 是 <code>xxxxx@gmail.com</code>，其它情况下，是 <code>xxxxx@aaa.com</code>，name同理</p></li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.51cto.com/xdr630/2795451">同一台电脑上同时使用多个Git账号</a></li><li><a href="https://blog.csdn.net/zcc_heu/article/details/79017606">Bad owner or permissions on .ssh&#x2F;config的解决</a></li><li><a href="https://git-scm.com/docs/git-config#_conditional_includes">Git Conditional Includes</a></li></ul><h1 id="同步本地仓库至多个远程仓库（未完成）"><a href="#同步本地仓库至多个远程仓库（未完成）" class="headerlink" title="同步本地仓库至多个远程仓库（未完成）"></a>同步本地仓库至多个远程仓库（未完成）</h1><h1 id="Git-pull失败"><a href="#Git-pull失败" class="headerlink" title="Git pull失败"></a>Git pull失败</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li><p>之前已经配置好公私钥，能够与github互通上传及下载代码，<strong>突然不能git pull&#x2F;clone等操作了</strong></p><p><img src="/tools/The-trick-of-git/image-20220108170920022.png" alt="image-20220108170920022"></p></li><li><p>使用<code>ssh -T git@github.com</code>，也显示无法连接</p></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li><p>在本机<code>~/.ssh</code>目录下，修改<code>config</code>文件，增加以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span><br><span class="line">    <span class="attr">User</span> <span class="string">YourEmail（你的邮箱）</span></span><br><span class="line">    <span class="attr">Hostname</span> <span class="string">ssh.github.com</span></span><br><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="attr">Port</span> <span class="string">443</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/e786a8f7f022">ssh: connect to host github.com port 22: Connection timed out</a></li><li><a href="https://blog.csdn.net/nightwishh/article/details/99647545">git报错ssh: connect to host github.com port 22: Connection timed out</a></li></ul><h1 id="Git实现原理"><a href="#Git实现原理" class="headerlink" title="Git实现原理"></a>Git实现原理</h1><h2 id="存储实现原理（Git对象）"><a href="#存储实现原理（Git对象）" class="headerlink" title="存储实现原理（Git对象）"></a>存储实现原理（Git对象）</h2><ul><li>在git中以存储<code>键值对（key-value）</code>的方式来存储文件。它允许插入任意类型的内容，并会返回一个键值，通过该键值可以在任何时候再取出该内容。git的kv中value一般有以下几种类型<code>blob</code>、<code>tree</code>、<code>commit</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/tools/The-trick-of-git/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc2MjEzMw==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/weixin_42762133/article/details/105458252">git实现原理</a></li><li><a href="https://git-scm.com/book/zh/v2">官方</a></li></ul><h1 id="创建SSH密钥时使用了自定义文件名遇到的问题（含单独文件夹设置git账户）"><a href="#创建SSH密钥时使用了自定义文件名遇到的问题（含单独文件夹设置git账户）" class="headerlink" title="创建SSH密钥时使用了自定义文件名遇到的问题（含单独文件夹设置git账户）"></a>创建SSH密钥时使用了自定义文件名遇到的问题（含单独文件夹设置git账户）</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>创建自定义名ssh私钥：<code> ssh-keygen -t rsa -C &quot;注释信息&quot;</code>，假设生成的文件为 <code>~/.ssh/test_key</code></p></li><li><p>使用 <code>ssh-add</code>命令把专用密钥添加到ssh-agent的高速缓存中（不执行这一步的话，后面使用ssh -T测试，就只能在 <code>~/.ssh</code>下才能成功）：<code>ssh-add ~/.ssh/test_key</code>，如果报错，先执行 <code>ssh-agent bash</code>，再次执行 <code>ssh-add ~/.ssh/test_key</code>即可，可使用 <code>ssh-add -l</code>查看已添加的私钥</p></li><li><p>修改 <code>~/.ssh/config</code>，如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">github</span></span><br><span class="line">    <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">    <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">    <span class="attr">IdentityFile</span> <span class="string">~/.ssh/test_key</span></span><br></pre></td></tr></table></figure></li><li><p>进入 <code>github</code>添加公钥，配置成功后，测试连接：<code>ssh -T -i test_key git@github.com</code>，出现 <code>Hi xxx</code>，说明配置成功</p></li><li><p>在项目文件夹下，设置推送人信息（修改成功后，在 <code>&#123;项目&#125;/.ssh/config</code>文件中可看到修改）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;用户名&quot;</span><br><span class="line">git config user.email &quot;邮箱号&quot;</span><br></pre></td></tr></table></figure></li><li><p>为项目添加 <code>remote</code>信息，注意添加 <code>git@xxx</code>，如果是添加了 <code>https://</code>，则还需要每次输入帐密（没走ssh这条路），可使用 <code>git remote -v</code>查看已经添加的远程仓库信息</p></li><li><p>执行推送操作</p></li></ol><h2 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/weixin_43670802/article/details/105527914">创建SSH密钥时使用了自定义文件名遇到的问题</a></li><li><a href="https://www.jianshu.com/p/0c6719f33fb9">ssh-add命令</a></li><li><a href="https://blog.csdn.net/zyddj123/article/details/85613825">github设置ssh key后push还要输入用户名和密码解决方案</a></li><li><a href="https://blog.csdn.net/argleary/article/details/100638560">执行ssh-add时：Could not open a connection to your authentication agent</a></li></ul><h1 id="git-crypt"><a href="#git-crypt" class="headerlink" title="git-crypt"></a>git-crypt</h1><ul><li>安装: <code>brew install git-crypt</code> 或参考 <a href="https://github.com/AGWA/git-crypt">https://github.com/AGWA/git-crypt</a> 进行安装</li></ul><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><ol><li><p>初始化 key: <code>git-crypt init</code></p></li><li><p>添加需要加密的文件: <code>.gitattributes</code>文件中添加以下内容，表示加密<code>aaa/bbb</code>下所有 yml 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa/bbb/*.yml filter=git-crypt diff=git-crypt</span><br></pre></td></tr></table></figure></li><li><p>提交到 remote 时，远端仓库显示如下</p><p><img src="/tools/The-trick-of-git/image-20240311172947784.png" alt="image-20240311172947784"></p></li></ol><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><ol><li>拿到 key，通过 <code>git-crypt unlock [密钥文件]</code>进行解密</li></ol><h2 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://glennklockwood.com/sysadmin-howtos/git-crypt.html">Using git-crypt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】04-hexo搭配Typora</title>
      <link href="/tutorial/Hexo-04-hexo-with-typora/"/>
      <url>/tutorial/Hexo-04-hexo-with-typora/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><ul><li><a href="https://www.typora.io/">下载地址</a></li></ul><h2 id="Typora协同hexo图片不显示问题"><a href="#Typora协同hexo图片不显示问题" class="headerlink" title="Typora协同hexo图片不显示问题"></a>Typora协同hexo图片不显示问题</h2><h3 id="hexo设置"><a href="#hexo设置" class="headerlink" title="hexo设置"></a>hexo设置</h3><ol><li>修改博客根目录中<code>_config.yml</code>文件的配置项<code>post_asset_folder</code>为<code>true</code></li><li>在博客根目录中下使用npm安装插件：<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li></ol><h3 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h3><p>进入<code>文件-&gt;偏好设置-&gt;图像</code>，将设置改为下述内容</p><p><img src="/tutorial/Hexo-04-hexo-with-typora/image-20210317123348886.png" alt="image-20210317123348886"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】03-hexo搭配github.io访问</title>
      <link href="/tutorial/Hexo-03-hexo-with-github/"/>
      <url>/tutorial/Hexo-03-hexo-with-github/</url>
      
        <content type="html"><![CDATA[<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ol><li>首先需要有一个GitHub账号，没有就到<a href="https://github.com/">官网</a>注册一个</li><li>创建一个<strong>与用户名一样的仓库</strong>，如我的用户名为<code>cv-programmer</code>，则创建名为<code>cv-programmer.github.io</code>，其他按默认设置即可</li><li>配置ssh，将<code>本地生成的ssh公钥</code>填入<code>点击github头像-&gt;Settings→SSH and GPG keys</code>中，GitHub端配置完成</li></ol><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><ol><li><p><code>cd ~/. ssh #检查本机已存在的ssh密钥</code></p></li><li><p>使用<code>ssh-keygen -t rsa -C github邮箱地址</code>生成秘钥</p></li><li><p>此时会在<code>C:\Users\用户名\.ssh\</code>下生成私钥(id_rsa)和公钥(id_rsa.pub)，复制公钥内容至GitHub<code>Settings→SSH and GPG keys</code>中即可成功</p></li><li><p>修改<code>e:\hexo-blog\_config.yml</code>中<code>deploy</code>部分，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:cv-programmer/cv-programmer.github.io.git</span> <span class="comment"># 此处修改为自己的github地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>设置本地推送github账号，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub邮箱地址&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>修改完成后，使用<code>hexo d</code>进行推送，若报错<code>ERROR Deployer not found: git</code>,则使用<code>npm install --save hexo-deployer-git</code>进行相关组件安装</p></li><li><p>使用以下命令进行推送，即可通过<code>用户名.github.io</code>进行访问了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 依次执行这三个命令，不建议直接执行hexo d</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】02-修改hexo主题</title>
      <link href="/tutorial/Hexo-02-hexo-theme/"/>
      <url>/tutorial/Hexo-02-hexo-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="选择hexo主题"><a href="#选择hexo主题" class="headerlink" title="选择hexo主题"></a>选择hexo主题</h2><ul><li>在github中通过关键字<code>hexo-theme</code>进行搜索</li><li><a href="https://hexo.io/themes/">hexo官方主题</a></li><li>本文选择<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>，效果如下</li></ul><p><img src="/tutorial/Hexo-02-hexo-theme/image-20210315231312132.png" alt="image-20210315231312132"></p><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ol><li><p>进入hexo管理文件夹（如<code>Hexo系列（一）中提到的e:\hexo-blog</code>）</p></li><li><p>命令下载，即可在<code>e:\hexo-blog\themes</code>下找到下载的主题了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li><p>修改<code>e:\hexo-blog\_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: butterfly</code>，即<strong>修改为主题对应文件夹</strong>，并把<code>e:\hexo-blog\themes\butterfly\_config.yml</code>复制到<code>e:\hexo-blog</code>下并重命名为<code>_config.butterfly.yml</code>，以后大部分配置只需要在<code>_config.butterfly.yml</code>修改即可。</p></li><li><p>未避免出错，执行以下命令重新进行生成，并开启本地服务，成功显示见<code>步骤6</code>，若网页不能正常显示（显示为一串英文），见<code>步骤5</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存（删除已生成的public文件）</span></span><br><span class="line">hexo g <span class="comment"># 生成文件</span></span><br><span class="line">hexo s <span class="comment"># 开启本地服务</span></span><br></pre></td></tr></table></figure></li><li><p>使用以下命令安装<code>pug以及stylus的渲染器</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在cmd或git for windows下进行安装，命令输入路径为e:\hexo-blog</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>成功显示如下所示，可以看到和官方显示效果有所差异</p></li></ol><p><img src="/tutorial/Hexo-02-hexo-theme/image-20210315232618112.png" alt="image-20210315232618112"></p><ol start="7"><li>详细主题配置介绍，参见<a href="https://butterfly.js.org/posts/dc584b87/">官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】01-搭建个人博客</title>
      <link href="/tutorial/Hexo-01-build-the-blog/"/>
      <url>/tutorial/Hexo-01-build-the-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ol><li><p>下载并安装<code>node.js</code>，<a href="https://nodejs.org/en/">node.js官网地址</a>  </p></li><li><p>下载并安装<code>git</code>，<a href="https://gitforwindows.org/">Git for windows地址</a></p><p><strong>注</strong>：hexo版本为v5.4时，node js版本为v14.16时会有报错，原因是<code>node js版本过高</code>，故本文安装node js版本为v12.21，<a href="https://hexo.io/zh-cn/docs/index.html#Node-js-%E7%89%88%E6%9C%AC%E9%99%90%E5%88%B6">官方推荐对应版本</a>，升级方式详见<a href="/tutorial/Hexo-09-upgrade-hexo-version/" title="【Hexo】09-版本升级">【Hexo】09-版本升级</a></p></li><li><p>在<code>cmd命令行</code>中使用以下命令检查相关组件是否已成功安装</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>cmd命令行</code>中使用<code>npm install hexo-cli -g</code>安装<code>hexo</code></li></ol><p><img src="/tutorial/Hexo-01-build-the-blog/image-20210315123422838.png" alt="image-20210315123422838"></p><p>​<strong>注</strong>:<code>npm -g</code>命令表示全局安装，存储路径为<code> C:\Users\用户名\AppData\Roaming\npm\</code>,图中<code>warning</code>是因为下载的git仓库来源于Mac系统，安装在windows会缺少<code>fsevents</code>，<strong>不影响可忽略</strong></p><ol start="5"><li>输入<code>hexo -v</code> 检查是否安装成功，如果在 windows 中输入报错：<code>hexo : 无法加载文件 C:\Users\xxx\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https://go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies</code> ，需要用管理员打开 <code>powershell</code>，输入 <code>set-ExecutionPolicy RemoteSigned</code> 即可（输入 <code> get-ExecutionPolicy</code> 可查看当前配置，默认是 <code>Restricted</code>）</li></ol><p><img src="/tutorial/Hexo-01-build-the-blog/image-20210315124000972.png" alt="image-20210315124000972"></p><p><img src="/tutorial/Hexo-01-build-the-blog/image-20240901094846194.png" alt="image-20240901094846194"></p><h2 id="hexo设置"><a href="#hexo设置" class="headerlink" title="hexo设置"></a>hexo设置</h2><ol><li>在本地创建一个文件夹专门管理<code>hexo博客</code>，<strong>接下来所有操作均在此文件夹下进行</strong> ，如本文文件夹为<code>e:/hexo-blog</code></li><li>hexo初始化：<code>hexo init</code></li></ol><p><img src="/tutorial/Hexo-01-build-the-blog/image-20210315124449820.png" alt="image-20210315124449820"></p><ol start="3"><li>hexo页面生成：<code>hexo g</code></li></ol><p><img src="/tutorial/Hexo-01-build-the-blog/image-20210315124304661.png" alt="image-20210315124304661"></p><p>​<strong>注</strong>：图中红框部分如前文所述版本不匹配导致</p><ol start="4"><li>启动服务：<code>hexo s</code>，在浏览器输入<code>http://localhost:4000</code>即可访问</li></ol><p><img src="/tutorial/Hexo-01-build-the-blog/image-20210315124617365.png" alt="image-20210315124617365"></p><ol start="5"><li>初始页面如下</li></ol><p><img src="/tutorial/Hexo-01-build-the-blog/image-20210315124754667.png" alt="image-20210315124754667"></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>清除已有静态页面：<code>hexo clean</code></li><li>生成静态页面：<code>hexo g</code></li><li>本地预览：<code>hexo s</code></li><li>部署到远程：<code>hexo d</code></li><li>指定文件夹，指定模板，指定<code>title</code>创建文件<ul><li><code>hexo new [模板名] -p 文件路径 [title名称]</code>：<font color="red">按照此格式创建可避免bug</font></li><li><font color="red">注意点</font><ul><li>指定文件路径必须有<code>-p</code>，否则会直接在<code>_posts</code>中创建文件</li><li>带<code>-p</code>时，如果没有<code>[title名称]</code>，必须显示指定<code>[模板名]</code></li><li>如果有<code>[title名称]</code>，不指定<code>[模板名]</code>，会调用默认的<code>post</code>模板</li></ul></li><li>指定文件夹，创建文件：<code>hexo new post -p other/hello</code>，将会在<code>other</code>文件夹下，生成一个<code>hello.md</code>的文件，采用模板为<code>post</code>，<code>title</code>为<code>post</code></li><li>指定文件夹，指定<code>title</code>：<code>hexo new -p other/hello &quot;world&quot;</code></li><li>指定文件夹，指定<code>title</code>，指定模板：<code>hexo new mymd -p other/world &quot;ok&quot;</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
